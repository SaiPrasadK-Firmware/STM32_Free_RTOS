
TempForecast_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800a5a8  0800a5a8  0000b5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a4  0800a9a4  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9a4  0800a9a4  0000b9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9ac  0800a9ac  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9ac  0800a9ac  0000b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9b0  0800a9b0  0000b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a9b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  200001d8  0800ab8c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d48  0800ab8c  0000cd48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b0  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003326  00000000  00000000  000215b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000248e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00025b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b2c  00000000  00000000  00026954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163ab  00000000  00000000  0003f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cfe  00000000  00000000  0005582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  000e956c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000ef2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a58c 	.word	0x0800a58c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a58c 	.word	0x0800a58c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <BMP280_ReadReg>:
#include "bmp280.h"
#include "stm32f4xx_hal.h"

extern I2C_HandleTypeDef hi2c1;

static uint8_t BMP280_ReadReg(uint8_t reg, uint8_t *data, uint16_t len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	21ec      	movs	r1, #236	@ 0xec
 8000faa:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <BMP280_ReadReg+0x38>)
 8000fac:	f001 fb40 	bl	8002630 <HAL_I2C_Mem_Read>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f4 	.word	0x200001f4

08000fc0 <BMP280_WriteReg>:

static uint8_t BMP280_WriteReg(uint8_t reg, uint8_t *data, uint16_t len) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	21ec      	movs	r1, #236	@ 0xec
 8000fe6:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <BMP280_WriteReg+0x38>)
 8000fe8:	f001 fa28 	bl	800243c <HAL_I2C_Mem_Write>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001f4 	.word	0x200001f4

08000ffc <BMP280_Init>:

void BMP280_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
    uint8_t ctrl_meas[2];
    ctrl_meas[0] = 0x27; // Temperature oversampling x1, pressure oversampling x1, normal mode
 8001002:	2327      	movs	r3, #39	@ 0x27
 8001004:	713b      	strb	r3, [r7, #4]
    BMP280_WriteReg(0xF4, ctrl_meas, 1);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	20f4      	movs	r0, #244	@ 0xf4
 800100e:	f7ff ffd7 	bl	8000fc0 <BMP280_WriteReg>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <BMP280_Read>:

BMP280_Data_t BMP280_Read(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
    BMP280_Data_t data;
    uint8_t temp_raw[3] = {0};
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2100      	movs	r1, #0
 8001028:	460a      	mov	r2, r1
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	460a      	mov	r2, r1
 800102e:	709a      	strb	r2, [r3, #2]

    BMP280_ReadReg(0xFA, temp_raw, 3);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	2203      	movs	r2, #3
 8001036:	4619      	mov	r1, r3
 8001038:	20fa      	movs	r0, #250	@ 0xfa
 800103a:	f7ff ffa3 	bl	8000f84 <BMP280_ReadReg>

    int32_t adc_T = (temp_raw[0] << 12) | (temp_raw[1] << 4) | (temp_raw[2] >> 4);
 800103e:	7a3b      	ldrb	r3, [r7, #8]
 8001040:	031a      	lsls	r2, r3, #12
 8001042:	7a7b      	ldrb	r3, [r7, #9]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4313      	orrs	r3, r2
 8001048:	7aba      	ldrb	r2, [r7, #10]
 800104a:	0912      	lsrs	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	4313      	orrs	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]
    data.temperature = adc_T / 100.0; // Simplified conversion
 8001052:	69f8      	ldr	r0, [r7, #28]
 8001054:	f7ff fa6e 	bl	8000534 <__aeabi_i2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <BMP280_Read+0x80>)
 800105e:	f7ff fbfd 	bl	800085c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fda5 	bl	8000bb8 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	60fb      	str	r3, [r7, #12]

    return data;
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	ee07 2a10 	vmov	s14, r2
 800108a:	ee07 3a90 	vmov	s15, r3
}
 800108e:	eeb0 0a47 	vmov.f32	s0, s14
 8001092:	eef0 0a67 	vmov.f32	s1, s15
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40590000 	.word	0x40590000

080010a0 <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define LCD_ADDR (0x27 << 1) // Change if your LCD address is different

static void lcd_send_cmd(uint8_t cmd) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Control byte for command
 80010aa:	2300      	movs	r3, #0
 80010ac:	733b      	strb	r3, [r7, #12]
    data[1] = cmd;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 2, HAL_MAX_DELAY);
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2302      	movs	r3, #2
 80010be:	214e      	movs	r1, #78	@ 0x4e
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <lcd_send_cmd+0x30>)
 80010c2:	f001 f8bd 	bl	8002240 <HAL_I2C_Master_Transmit>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f4 	.word	0x200001f4

080010d4 <lcd_send_data>:

static void lcd_send_data(uint8_t data_val) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x40; // Control byte for data
 80010de:	2340      	movs	r3, #64	@ 0x40
 80010e0:	733b      	strb	r3, [r7, #12]
    data[1] = data_val;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 2, HAL_MAX_DELAY);
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2302      	movs	r3, #2
 80010f2:	214e      	movs	r1, #78	@ 0x4e
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <lcd_send_data+0x30>)
 80010f6:	f001 f8a3 	bl	8002240 <HAL_I2C_Master_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f4 	.word	0x200001f4

08001108 <LCD_Init>:

void LCD_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for LCD to power up
 800110c:	2032      	movs	r0, #50	@ 0x32
 800110e:	f000 fcab 	bl	8001a68 <HAL_Delay>

    lcd_send_cmd(0x38); // Function set: 8-bit, 2 line, 5x7 dots
 8001112:	2038      	movs	r0, #56	@ 0x38
 8001114:	f7ff ffc4 	bl	80010a0 <lcd_send_cmd>
    HAL_Delay(5);
 8001118:	2005      	movs	r0, #5
 800111a:	f000 fca5 	bl	8001a68 <HAL_Delay>
    lcd_send_cmd(0x0C); // Display on, cursor off
 800111e:	200c      	movs	r0, #12
 8001120:	f7ff ffbe 	bl	80010a0 <lcd_send_cmd>
    HAL_Delay(5);
 8001124:	2005      	movs	r0, #5
 8001126:	f000 fc9f 	bl	8001a68 <HAL_Delay>
    lcd_send_cmd(0x01); // Clear display
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ffb8 	bl	80010a0 <lcd_send_cmd>
    HAL_Delay(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fc99 	bl	8001a68 <HAL_Delay>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <LCD_Print>:

void LCD_Print(char* str, uint8_t line) {
 800113a:	b590      	push	{r4, r7, lr}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
    uint8_t addr;

    if (line == 1) addr = 0x80; // First line
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <LCD_Print+0x18>
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e001      	b.n	8001156 <LCD_Print+0x1c>
    else addr = 0xC0;           // Second line
 8001152:	23c0      	movs	r3, #192	@ 0xc0
 8001154:	73fb      	strb	r3, [r7, #15]

    lcd_send_cmd(addr);
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffa1 	bl	80010a0 <lcd_send_cmd>

    for (uint8_t i = 0; i < strlen(str); i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	e009      	b.n	8001178 <LCD_Print+0x3e>
        lcd_send_data(str[i]);
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb1 	bl	80010d4 <lcd_send_data>
    for (uint8_t i = 0; i < strlen(str); i++) {
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	73bb      	strb	r3, [r7, #14]
 8001178:	7bbc      	ldrb	r4, [r7, #14]
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f880 	bl	8000280 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	429c      	cmp	r4, r3
 8001184:	d3ee      	bcc.n	8001164 <LCD_Print+0x2a>
    }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b092      	sub	sp, #72	@ 0x48
 8001194:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001196:	f000 fbf5 	bl	8001984 <HAL_Init>
  SystemClock_Config();
 800119a:	f000 f86b 	bl	8001274 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 f92d 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a2:	f000 f901 	bl	80013a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011a6:	f000 f8d1 	bl	800134c <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  /* Initialize sensor and display drivers before starting scheduler */
  BMP280_Init();
 80011aa:	f7ff ff27 	bl	8000ffc <BMP280_Init>
  LCD_Init();
 80011ae:	f7ff ffab 	bl	8001108 <LCD_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011b2:	f003 f835 	bl	8004220 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Create the mutex used to protect I2C bus */
  i2cMutexHandle = osMutexNew(NULL);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f003 f929 	bl	800440e <osMutexNew>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a22      	ldr	r2, [pc, #136]	@ (8001248 <main+0xb8>)
 80011c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Create message queue to send BMP280 readings to LCD task */
  bmpQueueHandle = osMessageQueueNew(QUEUE_SIZE, sizeof(BMP280_Data_t), NULL);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2108      	movs	r1, #8
 80011c6:	2005      	movs	r0, #5
 80011c8:	f003 fa2f 	bl	800462a <osMessageQueueNew>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <main+0xbc>)
 80011d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <main+0xc0>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	481f      	ldr	r0, [pc, #124]	@ (8001254 <main+0xc4>)
 80011d8:	f003 f86c 	bl	80042b4 <osThreadNew>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <main+0xc8>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Create BMP280 & LCD tasks (use CMSIS-RTOS V2 osThreadAttr to set priority) */

  const osThreadAttr_t bmpAttr = {
 80011e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e6:	2224      	movs	r2, #36	@ 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 f901 	bl	80083f2 <memset>
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <main+0xcc>)
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011fa:	2328      	movs	r3, #40	@ 0x28
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      .name = "BMP280_Task",
      .stack_size = 256 * 4,
      .priority = (osPriority_t) osPriorityHigh
  };
  Task_BMP280Handle = osThreadNew(Task_BMP280, NULL, &bmpAttr);
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	461a      	mov	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	4816      	ldr	r0, [pc, #88]	@ (8001260 <main+0xd0>)
 8001208:	f003 f854 	bl	80042b4 <osThreadNew>
 800120c:	4603      	mov	r3, r0
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <main+0xd4>)
 8001210:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t lcdAttr = {
 8001212:	463b      	mov	r3, r7
 8001214:	2224      	movs	r2, #36	@ 0x24
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f007 f8ea 	bl	80083f2 <memset>
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <main+0xd8>)
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	2318      	movs	r3, #24
 800122a:	61bb      	str	r3, [r7, #24]
      .name = "LCD_Task",
      .stack_size = 256 * 4,
      .priority = (osPriority_t) osPriorityNormal
  };
  Task_LCDHandle = osThreadNew(Task_LCD, NULL, &lcdAttr);
 800122c:	463b      	mov	r3, r7
 800122e:	461a      	mov	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	480e      	ldr	r0, [pc, #56]	@ (800126c <main+0xdc>)
 8001234:	f003 f83e 	bl	80042b4 <osThreadNew>
 8001238:	4603      	mov	r3, r0
 800123a:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <main+0xe0>)
 800123c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800123e:	f003 f813 	bl	8004268 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 8001242:	bf00      	nop
 8001244:	e7fd      	b.n	8001242 <main+0xb2>
 8001246:	bf00      	nop
 8001248:	2000029c 	.word	0x2000029c
 800124c:	200002a0 	.word	0x200002a0
 8001250:	0800a5f4 	.word	0x0800a5f4
 8001254:	080014d9 	.word	0x080014d9
 8001258:	20000290 	.word	0x20000290
 800125c:	0800a5b4 	.word	0x0800a5b4
 8001260:	08001871 	.word	0x08001871
 8001264:	20000294 	.word	0x20000294
 8001268:	0800a5c0 	.word	0x0800a5c0
 800126c:	080018c9 	.word	0x080018c9
 8001270:	20000298 	.word	0x20000298

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	@ 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	@ 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f007 f8b5 	bl	80083f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <SystemClock_Config+0xd0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <SystemClock_Config+0xd0>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <SystemClock_Config+0xd4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c0:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <SystemClock_Config+0xd4>)
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <SystemClock_Config+0xd4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e8:	2310      	movs	r3, #16
 80012ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012f6:	2307      	movs	r3, #7
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fffe 	bl	8003300 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x9a>
 800130a:	f000 f8ee 	bl	80014ea <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fa60 	bl	80037f0 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xc6>
 8001336:	f000 f8d8 	bl	80014ea <Error_Handler>
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	@ 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  hi2c1.Instance = I2C1;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C1_Init+0x50>)
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <MX_I2C1_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_I2C1_Init+0x50>)
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_I2C1_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_I2C1_Init+0x50>)
 800136a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	@ (800139c <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_I2C1_Init+0x50>)
 800138a:	f000 fe15 	bl	8001fb8 <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C1_Init+0x4c>
 8001394:	f000 f8a9 	bl	80014ea <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001f4 	.word	0x200001f4
 80013a0:	40005400 	.word	0x40005400
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f002 fc26 	bl	8003c30 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
 80013ea:	f000 f87e 	bl	80014ea <Error_Handler>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000248 	.word	0x20000248
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <MX_GPIO_Init+0xd0>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_GPIO_Init+0xd0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <MX_GPIO_Init+0xd4>)
 8001488:	f000 fd7c 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001492:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <MX_GPIO_Init+0xd8>)
 80014a4:	f000 fbea 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014a8:	2320      	movs	r3, #32
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_GPIO_Init+0xd4>)
 80014c0:	f000 fbdc 	bl	8001c7c <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020800 	.word	0x40020800

080014d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop (keeps background idle) */
  for(;;)
  {
    osDelay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e4:	f002 ff78 	bl	80043d8 <osDelay>
 80014e8:	e7fa      	b.n	80014e0 <StartDefaultTask+0x8>

080014ea <Error_Handler>:
  }
  /* USER CODE END 5 */
}

void Error_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
  __disable_irq();
  while (1) { }
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_MspInit+0x54>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a11      	ldr	r2, [pc, #68]	@ (800154c <HAL_MspInit+0x54>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_MspInit+0x54>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_MspInit+0x54>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <HAL_MspInit+0x54>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_MspInit+0x54>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	210f      	movs	r1, #15
 800153a:	f06f 0001 	mvn.w	r0, #1
 800153e:	f000 fb74 	bl	8001c2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_I2C_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a0:	2304      	movs	r3, #4
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	@ (80015dc <HAL_I2C_MspInit+0x8c>)
 80015ac:	f000 fb66 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015be:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_I2C_MspInit+0x88>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400

080015e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_UART_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a17      	ldr	r2, [pc, #92]	@ (8001668 <HAL_UART_MspInit+0x88>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_UART_MspInit+0x88>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800163a:	230c      	movs	r3, #12
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164a:	2307      	movs	r3, #7
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_UART_MspInit+0x8c>)
 8001656:	f000 fb11 	bl	8001c7c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	@ 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004400 	.word	0x40004400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <UsageFault_Handler+0x4>

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 f9bd 	bl	8001a28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016ae:	f004 ffa7 	bl	8006600 <xTaskGetSchedulerState>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d001      	beq.n	80016bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016b8:	f005 fe9e 	bl	80073f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_kill>:

int _kill(int pid, int sig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016da:	f006 fedd 	bl	8008498 <__errno>
 80016de:	4603      	mov	r3, r0
 80016e0:	2216      	movs	r2, #22
 80016e2:	601a      	str	r2, [r3, #0]
  return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_exit>:

void _exit (int status)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffe7 	bl	80016d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <_exit+0x12>

08001706 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001718:	f3af 8000 	nop.w
 800171c:	4601      	mov	r1, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf0      	blt.n	8001718 <_read+0x12>
  }

  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e009      	b.n	8001766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf1      	blt.n	8001752 <_write+0x12>
  }
  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f006 fe42 	bl	8008498 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20018000 	.word	0x20018000
 8001840:	00000400 	.word	0x00000400
 8001844:	200002a4 	.word	0x200002a4
 8001848:	20004d48 	.word	0x20004d48

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Task_BMP280>:
#include "tasks.h"

extern osMessageQueueId_t bmpQueueHandle;
extern osMutexId_t i2cMutexHandle;

void Task_BMP280(void *argument) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    BMP280_Data_t data;

    for (;;) {
        osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <Task_BMP280+0x50>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fe4a 	bl	800451a <osMutexAcquire>

        data = BMP280_Read();
 8001886:	f7ff fbc9 	bl	800101c <BMP280_Read>
 800188a:	eeb0 7a40 	vmov.f32	s14, s0
 800188e:	eef0 7a60 	vmov.f32	s15, s1
 8001892:	ed87 7a02 	vstr	s14, [r7, #8]
 8001896:	edc7 7a03 	vstr	s15, [r7, #12]

        osMutexRelease(i2cMutexHandle);
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <Task_BMP280+0x50>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fe86 	bl	80045b0 <osMutexRelease>

        osMessageQueuePut(bmpQueueHandle, &data, 0, 0);
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <Task_BMP280+0x54>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	f002 ff2e 	bl	8004710 <osMessageQueuePut>

        osDelay(1000); // Read every 1 second
 80018b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b8:	f002 fd8e 	bl	80043d8 <osDelay>
        osMutexAcquire(i2cMutexHandle, osWaitForever);
 80018bc:	bf00      	nop
 80018be:	e7db      	b.n	8001878 <Task_BMP280+0x8>
 80018c0:	2000029c 	.word	0x2000029c
 80018c4:	200002a0 	.word	0x200002a0

080018c8 <Task_LCD>:
    }
}

void Task_LCD(void *argument) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    BMP280_Data_t data;
    char buffer[32];

    for (;;) {
        if (osMessageQueueGet(bmpQueueHandle, &data, NULL, osWaitForever) == osOK) {
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <Task_LCD+0x5c>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	2200      	movs	r2, #0
 80018de:	f002 ff77 	bl	80047d0 <osMessageQueueGet>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f3      	bne.n	80018d0 <Task_LCD+0x8>
            sprintf(buffer, "Temp: %.2f C", data.temperature);
 80018e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe34 	bl	8000558 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	f107 0008 	add.w	r0, r7, #8
 80018f8:	490b      	ldr	r1, [pc, #44]	@ (8001928 <Task_LCD+0x60>)
 80018fa:	f006 fd15 	bl	8008328 <siprintf>

            osMutexAcquire(i2cMutexHandle, osWaitForever);
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <Task_LCD+0x64>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 31ff 	mov.w	r1, #4294967295
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fe07 	bl	800451a <osMutexAcquire>

            LCD_Print(buffer, 1);
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc11 	bl	800113a <LCD_Print>

            osMutexRelease(i2cMutexHandle);
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <Task_LCD+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fe47 	bl	80045b0 <osMutexRelease>
        if (osMessageQueueGet(bmpQueueHandle, &data, NULL, osWaitForever) == osOK) {
 8001922:	e7d5      	b.n	80018d0 <Task_LCD+0x8>
 8001924:	200002a0 	.word	0x200002a0
 8001928:	0800a5cc 	.word	0x0800a5cc
 800192c:	2000029c 	.word	0x2000029c

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001934:	f7ff ff8a 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800195e:	f006 fda1 	bl	80084a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fc15 	bl	8001190 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001974:	0800a9b4 	.word	0x0800a9b4
  ldr r2, =_sbss
 8001978:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800197c:	20004d48 	.word	0x20004d48

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f931 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fd9e 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f93b 	bl	8001c62 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f911 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	200002a8 	.word	0x200002a8

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200002a8 	.word	0x200002a8

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	@ (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	@ 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff47 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff5c 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffb0 	bl	8001bd0 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e159      	b.n	8001f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8148 	bne.w	8001f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a2 	beq.w	8001f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b57      	ldr	r3, [pc, #348]	@ (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b54      	ldr	r3, [pc, #336]	@ (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a52      	ldr	r2, [pc, #328]	@ (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a49      	ldr	r2, [pc, #292]	@ (8001f6c <HAL_GPIO_Init+0x2f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	@ (8001f70 <HAL_GPIO_Init+0x2f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x1fe>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a47      	ldr	r2, [pc, #284]	@ (8001f74 <HAL_GPIO_Init+0x2f8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a46      	ldr	r2, [pc, #280]	@ (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x1f6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a45      	ldr	r2, [pc, #276]	@ (8001f7c <HAL_GPIO_Init+0x300>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x1f2>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	@ (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a24      	ldr	r2, [pc, #144]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1a      	ldr	r2, [pc, #104]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f aea2 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e12b      	b.n	8002222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fab6 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	@ 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800200a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800201a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800201c:	f001 fde0 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a81      	ldr	r2, [pc, #516]	@ (800222c <HAL_I2C_Init+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <HAL_I2C_Init+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a80      	ldr	r2, [pc, #512]	@ (8002230 <HAL_I2C_Init+0x278>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e006      	b.n	800204a <HAL_I2C_Init+0x92>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a7d      	ldr	r2, [pc, #500]	@ (8002234 <HAL_I2C_Init+0x27c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e7      	b.n	8002222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a78      	ldr	r2, [pc, #480]	@ (8002238 <HAL_I2C_Init+0x280>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a6a      	ldr	r2, [pc, #424]	@ (800222c <HAL_I2C_Init+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d802      	bhi.n	800208c <HAL_I2C_Init+0xd4>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	e009      	b.n	80020a0 <HAL_I2C_Init+0xe8>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a69      	ldr	r2, [pc, #420]	@ (800223c <HAL_I2C_Init+0x284>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	495c      	ldr	r1, [pc, #368]	@ (800222c <HAL_I2C_Init+0x274>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d819      	bhi.n	80020f4 <HAL_I2C_Init+0x13c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_I2C_Init+0x138>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e59      	subs	r1, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	e051      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e04f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <HAL_I2C_Init+0x168>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e012      	b.n	8002146 <HAL_I2C_Init+0x18e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x196>
 800214a:	2301      	movs	r3, #1
 800214c:	e022      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <HAL_I2C_Init+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e58      	subs	r0, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	fbb0 f3f3 	udiv	r3, r0, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002172:	e00f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	0099      	lsls	r1, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6809      	ldr	r1, [r1, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6911      	ldr	r1, [r2, #16]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68d2      	ldr	r2, [r2, #12]
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	000186a0 	.word	0x000186a0
 8002230:	001e847f 	.word	0x001e847f
 8002234:	003d08ff 	.word	0x003d08ff
 8002238:	431bde83 	.word	0x431bde83
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
 8002250:	4613      	mov	r3, r2
 8002252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fbfc 	bl	8001a50 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 80e0 	bne.w	8002428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2319      	movs	r3, #25
 800226e:	2201      	movs	r2, #1
 8002270:	4970      	ldr	r1, [pc, #448]	@ (8002434 <HAL_I2C_Master_Transmit+0x1f4>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fe0e 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	e0d3      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_I2C_Master_Transmit+0x50>
 800228c:	2302      	movs	r3, #2
 800228e:	e0cc      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d007      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2221      	movs	r2, #33	@ 0x21
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2210      	movs	r2, #16
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	893a      	ldrh	r2, [r7, #8]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_I2C_Master_Transmit+0x1f8>)
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fbc8 	bl	8002a94 <I2C_MasterRequestWrite>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08d      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002324:	e066      	b.n	80023f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fecc 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b04      	cmp	r3, #4
 800233c:	d107      	bne.n	800234e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <HAL_I2C_Master_Transmit+0x188>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6a39      	ldr	r1, [r7, #32]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fec3 	bl	8003158 <I2C_WaitOnBTFFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e01a      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d194      	bne.n	8002326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000

0800243c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002456:	f7ff fafb 	bl	8001a50 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	f040 80d9 	bne.w	800261c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	496d      	ldr	r1, [pc, #436]	@ (8002628 <HAL_I2C_Mem_Write+0x1ec>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fd0d 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	e0cc      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Mem_Write+0x56>
 800248e:	2302      	movs	r3, #2
 8002490:	e0c5      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d007      	beq.n	80024b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	@ 0x21
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	@ 0x40
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a4d      	ldr	r2, [pc, #308]	@ (800262c <HAL_I2C_Mem_Write+0x1f0>)
 80024f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fa:	88f8      	ldrh	r0, [r7, #6]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fb44 	bl	8002b98 <I2C_RequestMemoryWrite>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d052      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e081      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fdd2 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_I2C_Mem_Write+0x180>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1aa      	bne.n	800251a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fdc5 	bl	8003158 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e016      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000

08002630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	@ 0x30
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264a:	f7ff fa01 	bl	8001a50 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	f040 8214 	bne.w	8002a86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2319      	movs	r3, #25
 8002664:	2201      	movs	r2, #1
 8002666:	497b      	ldr	r1, [pc, #492]	@ (8002854 <HAL_I2C_Mem_Read+0x224>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc13 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
 8002676:	e207      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Mem_Read+0x56>
 8002682:	2302      	movs	r3, #2
 8002684:	e200      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d007      	beq.n	80026ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2222      	movs	r2, #34	@ 0x22
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	@ 0x40
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002858 <HAL_I2C_Mem_Read+0x228>)
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ee:	88f8      	ldrh	r0, [r7, #6]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fae0 	bl	8002cc4 <I2C_RequestMemoryRead>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e1bc      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e190      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b01      	cmp	r3, #1
 8002744:	d11b      	bne.n	800277e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e170      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	2b02      	cmp	r3, #2
 8002784:	d11b      	bne.n	80027be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	e150      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d4:	e144      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027da:	2b03      	cmp	r3, #3
 80027dc:	f200 80f1 	bhi.w	80029c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d123      	bne.n	8002830 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fcfb 	bl	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e145      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800282e:	e117      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	2b02      	cmp	r3, #2
 8002836:	d14e      	bne.n	80028d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283e:	2200      	movs	r2, #0
 8002840:	4906      	ldr	r1, [pc, #24]	@ (800285c <HAL_I2C_Mem_Read+0x22c>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fb26 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e11a      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
 8002852:	bf00      	nop
 8002854:	00100002 	.word	0x00100002
 8002858:	ffff0000 	.word	0xffff0000
 800285c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028d4:	e0c4      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	2200      	movs	r2, #0
 80028de:	496c      	ldr	r1, [pc, #432]	@ (8002a90 <HAL_I2C_Mem_Read+0x460>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fad7 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cb      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	2200      	movs	r2, #0
 800293a:	4955      	ldr	r1, [pc, #340]	@ (8002a90 <HAL_I2C_Mem_Read+0x460>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 faa9 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e09d      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029c0:	e04e      	b.n	8002a60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fc0e 	bl	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e058      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d124      	bne.n	8002a60 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f47f aeb6 	bne.w	80027d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	@ 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	00010004 	.word	0x00010004

08002a94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d006      	beq.n	8002abe <I2C_MasterRequestWrite+0x2a>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d003      	beq.n	8002abe <I2C_MasterRequestWrite+0x2a>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e00b      	b.n	8002ae8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	2b12      	cmp	r3, #18
 8002ad6:	d107      	bne.n	8002ae8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f9cd 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b0e:	d103      	bne.n	8002b18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e035      	b.n	8002b88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b24:	d108      	bne.n	8002b38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e01b      	b.n	8002b70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	11db      	asrs	r3, r3, #7
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f003 0306 	and.w	r3, r3, #6
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f063 030f 	orn	r3, r3, #15
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	490e      	ldr	r1, [pc, #56]	@ (8002b90 <I2C_MasterRequestWrite+0xfc>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa16 	bl	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e010      	b.n	8002b88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <I2C_MasterRequestWrite+0x100>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa06 	bl	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00010008 	.word	0x00010008
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	817b      	strh	r3, [r7, #10]
 8002baa:	460b      	mov	r3, r1
 8002bac:	813b      	strh	r3, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f960 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be8:	d103      	bne.n	8002bf2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e05f      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	492d      	ldr	r1, [pc, #180]	@ (8002cc0 <I2C_RequestMemoryWrite+0x128>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f9bb 	bl	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e04c      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa46 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e02b      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	e021      	b.n	8002cb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa20 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d107      	bne.n	8002ca6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e005      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	817b      	strh	r3, [r7, #10]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	813b      	strh	r3, [r7, #8]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f8c2 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d24:	d103      	bne.n	8002d2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0aa      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	4952      	ldr	r1, [pc, #328]	@ (8002e90 <I2C_RequestMemoryRead+0x1cc>)
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f91d 	bl	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e097      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	6a39      	ldr	r1, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f9a8 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d107      	bne.n	8002d96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e076      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	e021      	b.n	8002df0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dac:	893b      	ldrh	r3, [r7, #8]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f982 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e050      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de6:	893b      	ldrh	r3, [r7, #8]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df2:	6a39      	ldr	r1, [r7, #32]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f967 	bl	80030c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d107      	bne.n	8002e18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e035      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f82b 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e52:	d103      	bne.n	8002e5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e013      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	4906      	ldr	r1, [pc, #24]	@ (8002e90 <I2C_RequestMemoryRead+0x1cc>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f886 	bl	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	00010002 	.word	0x00010002

08002e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea4:	e048      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d044      	beq.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fe fdcf 	bl	8001a50 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d139      	bne.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d10d      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	e00c      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d116      	bne.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e023      	b.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10d      	bne.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	e00c      	b.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d093      	beq.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f96:	e071      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	d123      	bne.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e067      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d041      	beq.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fe fd2a 	bl	8001a50 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d136      	bne.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10c      	bne.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	e00b      	b.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e021      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10c      	bne.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e00b      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f47f af6d 	bne.w	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d4:	e034      	b.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f8e3 	bl	80032a2 <I2C_IsAcknowledgeFailed>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d028      	beq.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fcaf 	bl	8001a50 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11d      	bne.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310e:	2b80      	cmp	r3, #128	@ 0x80
 8003110:	d016      	beq.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e007      	b.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314a:	2b80      	cmp	r3, #128	@ 0x80
 800314c:	d1c3      	bne.n	80030d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003164:	e034      	b.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f89b 	bl	80032a2 <I2C_IsAcknowledgeFailed>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e034      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d028      	beq.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe fc67 	bl	8001a50 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11d      	bne.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d016      	beq.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e007      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d1c3      	bne.n	8003166 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031f4:	e049      	b.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d119      	bne.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e030      	b.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe fc0a 	bl	8001a50 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d016      	beq.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e007      	b.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b40      	cmp	r3, #64	@ 0x40
 8003296:	d1ae      	bne.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b8:	d11b      	bne.n	80032f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e267      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d075      	beq.n	800340a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800331e:	4b88      	ldr	r3, [pc, #544]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d00c      	beq.n	8003344 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b85      	ldr	r3, [pc, #532]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003332:	2b08      	cmp	r3, #8
 8003334:	d112      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b82      	ldr	r3, [pc, #520]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003342:	d10b      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	4b7e      	ldr	r3, [pc, #504]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05b      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d157      	bne.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e242      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x74>
 8003366:	4b76      	ldr	r3, [pc, #472]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x98>
 800337e:	4b70      	ldr	r3, [pc, #448]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6f      	ldr	r2, [pc, #444]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6c      	ldr	r2, [pc, #432]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003398:	4b69      	ldr	r3, [pc, #420]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a68      	ldr	r2, [pc, #416]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b66      	ldr	r3, [pc, #408]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a65      	ldr	r2, [pc, #404]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fb4a 	bl	8001a50 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fb46 	bl	8001a50 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	@ 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e207      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fb36 	bl	8001a50 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fb32 	bl	8001a50 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1f3      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b51      	ldr	r3, [pc, #324]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003416:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b44      	ldr	r3, [pc, #272]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1c7      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4937      	ldr	r1, [pc, #220]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_RCC_OscConfig+0x244>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe faeb 	bl	8001a50 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fae7 	bl	8001a50 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1a8      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4925      	ldr	r1, [pc, #148]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCC_OscConfig+0x244>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe faca 	bl	8001a50 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fac6 	bl	8001a50 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e187      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_RCC_OscConfig+0x248>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe faaa 	bl	8001a50 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe faa6 	bl	8001a50 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e167      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x240>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x200>
 800351e:	e01b      	b.n	8003558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_RCC_OscConfig+0x248>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fe fa93 	bl	8001a50 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00e      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe fa8f 	bl	8001a50 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d907      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e150      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b88      	ldr	r3, [pc, #544]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ea      	bne.n	800352e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8097 	beq.w	8003694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b81      	ldr	r3, [pc, #516]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b7d      	ldr	r3, [pc, #500]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a7c      	ldr	r2, [pc, #496]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b7a      	ldr	r3, [pc, #488]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b77      	ldr	r3, [pc, #476]	@ (8003774 <HAL_RCC_OscConfig+0x474>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b74      	ldr	r3, [pc, #464]	@ (8003774 <HAL_RCC_OscConfig+0x474>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	@ (8003774 <HAL_RCC_OscConfig+0x474>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fa4f 	bl	8001a50 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fa4b 	bl	8001a50 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e10c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003774 <HAL_RCC_OscConfig+0x474>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x2ea>
 80035dc:	4b64      	ldr	r3, [pc, #400]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a63      	ldr	r2, [pc, #396]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x324>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x30c>
 80035f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	4a5b      	ldr	r2, [pc, #364]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	@ 0x70
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x324>
 800360c:	4b58      	ldr	r3, [pc, #352]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	4a57      	ldr	r2, [pc, #348]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	@ 0x70
 8003618:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361c:	4a54      	ldr	r2, [pc, #336]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fa10 	bl	8001a50 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fa0c 	bl	8001a50 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0cb      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	4b49      	ldr	r3, [pc, #292]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCC_OscConfig+0x334>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fe f9fa 	bl	8001a50 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe f9f6 	bl	8001a50 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0b5      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	4b3e      	ldr	r3, [pc, #248]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	4a38      	ldr	r2, [pc, #224]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003692:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a1 	beq.w	80037e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369e:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d05c      	beq.n	8003764 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d141      	bne.n	8003736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b31      	ldr	r3, [pc, #196]	@ (8003778 <HAL_RCC_OscConfig+0x478>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f9ca 	bl	8001a50 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe f9c6 	bl	8001a50 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e087      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	491b      	ldr	r1, [pc, #108]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <HAL_RCC_OscConfig+0x478>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe f99f 	bl	8001a50 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe f99b 	bl	8001a50 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e05c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x416>
 8003734:	e054      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <HAL_RCC_OscConfig+0x478>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe f988 	bl	8001a50 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe f984 	bl	8001a50 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e045      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_RCC_OscConfig+0x470>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x444>
 8003762:	e03d      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e038      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000
 8003778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800377c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x4ec>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d028      	beq.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d121      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d11a      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d111      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fe f8b6 	bl	8001a50 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fe f8b2 	bl	8001a50 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f816 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	0800a618 	.word	0x0800a618
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b094      	sub	sp, #80	@ 0x50
 80039c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d4:	4b79      	ldr	r3, [pc, #484]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d00d      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x40>
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	f200 80e1 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ee:	e0db      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b73      	ldr	r3, [pc, #460]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f4:	e0db      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f6:	4b73      	ldr	r3, [pc, #460]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80039f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039fa:	e0d8      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a06:	4b6d      	ldr	r3, [pc, #436]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d063      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a12:	4b6a      	ldr	r3, [pc, #424]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	2200      	movs	r2, #0
 8003a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a26:	2300      	movs	r3, #0
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	0159      	lsls	r1, r3, #5
 8003a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a40:	0150      	lsls	r0, r2, #5
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4621      	mov	r1, r4
 8003a48:	1a51      	subs	r1, r2, r1
 8003a4a:	6139      	str	r1, [r7, #16]
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a60:	4659      	mov	r1, fp
 8003a62:	018b      	lsls	r3, r1, #6
 8003a64:	4651      	mov	r1, sl
 8003a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	018a      	lsls	r2, r1, #6
 8003a6e:	4651      	mov	r1, sl
 8003a70:	ebb2 0801 	subs.w	r8, r2, r1
 8003a74:	4659      	mov	r1, fp
 8003a76:	eb63 0901 	sbc.w	r9, r3, r1
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8e:	4690      	mov	r8, r2
 8003a90:	4699      	mov	r9, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	eb18 0303 	adds.w	r3, r8, r3
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	eb49 0303 	adc.w	r3, r9, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aae:	4629      	mov	r1, r5
 8003ab0:	024b      	lsls	r3, r1, #9
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab8:	4621      	mov	r1, r4
 8003aba:	024a      	lsls	r2, r1, #9
 8003abc:	4610      	mov	r0, r2
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003acc:	f7fd f8c4 	bl	8000c58 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad8:	e058      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ada:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	f04f 0000 	mov.w	r0, #0
 8003afc:	f04f 0100 	mov.w	r1, #0
 8003b00:	0159      	lsls	r1, r3, #5
 8003b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b06:	0150      	lsls	r0, r2, #5
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b30:	eb63 050b 	sbc.w	r5, r3, fp
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	00eb      	lsls	r3, r5, #3
 8003b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b42:	00e2      	lsls	r2, r4, #3
 8003b44:	4614      	mov	r4, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	4643      	mov	r3, r8
 8003b4a:	18e3      	adds	r3, r4, r3
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	464b      	mov	r3, r9
 8003b50:	eb45 0303 	adc.w	r3, r5, r3
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b62:	4629      	mov	r1, r5
 8003b64:	028b      	lsls	r3, r1, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	028a      	lsls	r2, r1, #10
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	61fa      	str	r2, [r7, #28]
 8003b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b80:	f7fd f86a 	bl	8000c58 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3750      	adds	r7, #80	@ 0x50
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	007a1200 	.word	0x007a1200

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	@ (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	@ (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	0800a628 	.word	0x0800a628

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c0c:	f7ff ffdc 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0b5b      	lsrs	r3, r3, #13
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	@ (8003c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	0800a628 	.word	0x0800a628

08003c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e042      	b.n	8003cc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fcc2 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	@ 0x24
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f82b 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b0c0      	sub	sp, #256	@ 0x100
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	ea40 0301 	orr.w	r3, r0, r1
 8003cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d28:	f021 010c 	bic.w	r1, r1, #12
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d36:	430b      	orrs	r3, r1
 8003d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	6999      	ldr	r1, [r3, #24]
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	ea40 0301 	orr.w	r3, r0, r1
 8003d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f9c <UART_SetConfig+0x2cc>)
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d005      	beq.n	8003d70 <UART_SetConfig+0xa0>
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa0 <UART_SetConfig+0x2d0>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d104      	bne.n	8003d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff ff4a 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8003d74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d78:	e003      	b.n	8003d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7a:	f7ff ff31 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8003d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d8c:	f040 810c 	bne.w	8003fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003daa:	415b      	adcs	r3, r3
 8003dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003db2:	4621      	mov	r1, r4
 8003db4:	eb12 0801 	adds.w	r8, r2, r1
 8003db8:	4629      	mov	r1, r5
 8003dba:	eb43 0901 	adc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003de0:	462b      	mov	r3, r5
 8003de2:	eb49 0303 	adc.w	r3, r9, r3
 8003de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dfe:	460b      	mov	r3, r1
 8003e00:	18db      	adds	r3, r3, r3
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e04:	4613      	mov	r3, r2
 8003e06:	eb42 0303 	adc.w	r3, r2, r3
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e14:	f7fc ff20 	bl	8000c58 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b61      	ldr	r3, [pc, #388]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011c      	lsls	r4, r3, #4
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e40:	415b      	adcs	r3, r3
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e48:	4641      	mov	r1, r8
 8003e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e4e:	4649      	mov	r1, r9
 8003e50:	eb43 0b01 	adc.w	fp, r3, r1
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e68:	4692      	mov	sl, r2
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e76:	464b      	mov	r3, r9
 8003e78:	eb4b 0303 	adc.w	r3, fp, r3
 8003e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e94:	460b      	mov	r3, r1
 8003e96:	18db      	adds	r3, r3, r3
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eaa:	f7fc fed5 	bl	8000c58 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2264      	movs	r2, #100	@ 0x64
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	1acb      	subs	r3, r1, r3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eca:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ed8:	441c      	add	r4, r3
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f50:	460b      	mov	r3, r1
 8003f52:	18db      	adds	r3, r3, r3
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f56:	4613      	mov	r3, r2
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f66:	f7fc fe77 	bl	8000c58 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2164      	movs	r1, #100	@ 0x64
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	3332      	adds	r3, #50	@ 0x32
 8003f82:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4422      	add	r2, r4
 8003f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f98:	e106      	b.n	80041a8 <UART_SetConfig+0x4d8>
 8003f9a:	bf00      	nop
 8003f9c:	40011000 	.word	0x40011000
 8003fa0:	40011400 	.word	0x40011400
 8003fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fba:	4642      	mov	r2, r8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	6239      	str	r1, [r7, #32]
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fca:	4641      	mov	r1, r8
 8003fcc:	1854      	adds	r4, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb43 0501 	adc.w	r5, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	eb45 0303 	adc.w	r3, r5, r3
 8003ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004016:	4629      	mov	r1, r5
 8004018:	008b      	lsls	r3, r1, #2
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004020:	4621      	mov	r1, r4
 8004022:	008a      	lsls	r2, r1, #2
 8004024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004028:	f7fc fe16 	bl	8000c58 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b60      	ldr	r3, [pc, #384]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011c      	lsls	r4, r3, #4
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	61b9      	str	r1, [r7, #24]
 8004054:	415b      	adcs	r3, r3
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405c:	4641      	mov	r1, r8
 800405e:	1851      	adds	r1, r2, r1
 8004060:	6139      	str	r1, [r7, #16]
 8004062:	4649      	mov	r1, r9
 8004064:	414b      	adcs	r3, r1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004074:	4659      	mov	r1, fp
 8004076:	00cb      	lsls	r3, r1, #3
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407e:	4651      	mov	r1, sl
 8004080:	00ca      	lsls	r2, r1, #3
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	4603      	mov	r3, r0
 8004088:	4642      	mov	r2, r8
 800408a:	189b      	adds	r3, r3, r2
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040b4:	4649      	mov	r1, r9
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	4641      	mov	r1, r8
 80040ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040be:	4641      	mov	r1, r8
 80040c0:	008a      	lsls	r2, r1, #2
 80040c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040c6:	f7fc fdc7 	bl	8000c58 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	4b38      	ldr	r3, [pc, #224]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040d2:	fba3 2301 	umull	r2, r3, r3, r1
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2264      	movs	r2, #100	@ 0x64
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	1acb      	subs	r3, r1, r3
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	3332      	adds	r3, #50	@ 0x32
 80040e4:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80040fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80040fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	415b      	adcs	r3, r3
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6039      	str	r1, [r7, #0]
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004142:	464b      	mov	r3, r9
 8004144:	460a      	mov	r2, r1
 8004146:	eb42 0303 	adc.w	r3, r2, r3
 800414a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	663b      	str	r3, [r7, #96]	@ 0x60
 8004156:	667a      	str	r2, [r7, #100]	@ 0x64
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004176:	f7fc fd6f 	bl	8000c58 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	@ 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	@ 0x32
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4422      	add	r2, r4
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <__NVIC_SetPriority>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	db0a      	blt.n	80041e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	490c      	ldr	r1, [pc, #48]	@ (8004204 <__NVIC_SetPriority+0x4c>)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	440b      	add	r3, r1
 80041dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041e0:	e00a      	b.n	80041f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4908      	ldr	r1, [pc, #32]	@ (8004208 <__NVIC_SetPriority+0x50>)
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3b04      	subs	r3, #4
 80041f0:	0112      	lsls	r2, r2, #4
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	440b      	add	r3, r1
 80041f6:	761a      	strb	r2, [r3, #24]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000e100 	.word	0xe000e100
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004210:	2100      	movs	r1, #0
 8004212:	f06f 0004 	mvn.w	r0, #4
 8004216:	f7ff ffcf 	bl	80041b8 <__NVIC_SetPriority>
#endif
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004226:	f3ef 8305 	mrs	r3, IPSR
 800422a:	603b      	str	r3, [r7, #0]
  return(result);
 800422c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004232:	f06f 0305 	mvn.w	r3, #5
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	e00c      	b.n	8004254 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <osKernelInitialize+0x44>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004242:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <osKernelInitialize+0x44>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e002      	b.n	8004254 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004254:	687b      	ldr	r3, [r7, #4]
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	200002ac 	.word	0x200002ac

08004268 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426e:	f3ef 8305 	mrs	r3, IPSR
 8004272:	603b      	str	r3, [r7, #0]
  return(result);
 8004274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <osKernelStart+0x1a>
    stat = osErrorISR;
 800427a:	f06f 0305 	mvn.w	r3, #5
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e010      	b.n	80042a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <osKernelStart+0x48>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d109      	bne.n	800429e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800428a:	f7ff ffbf 	bl	800420c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800428e:	4b08      	ldr	r3, [pc, #32]	@ (80042b0 <osKernelStart+0x48>)
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004294:	f001 fd56 	bl	8005d44 <vTaskStartScheduler>
      stat = osOK;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e002      	b.n	80042a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200002ac 	.word	0x200002ac

080042b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	@ 0x38
 80042b8:	af04      	add	r7, sp, #16
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c4:	f3ef 8305 	mrs	r3, IPSR
 80042c8:	617b      	str	r3, [r7, #20]
  return(result);
 80042ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d17e      	bne.n	80043ce <osThreadNew+0x11a>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d07b      	beq.n	80043ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042da:	2318      	movs	r3, #24
 80042dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d045      	beq.n	800437a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <osThreadNew+0x48>
        name = attr->name;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <osThreadNew+0x6e>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b38      	cmp	r3, #56	@ 0x38
 8004314:	d805      	bhi.n	8004322 <osThreadNew+0x6e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <osThreadNew+0x72>
        return (NULL);
 8004322:	2300      	movs	r3, #0
 8004324:	e054      	b.n	80043d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00e      	beq.n	800435c <osThreadNew+0xa8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b5b      	cmp	r3, #91	@ 0x5b
 8004344:	d90a      	bls.n	800435c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <osThreadNew+0xa8>
        mem = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e010      	b.n	800437e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <osThreadNew+0xca>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d108      	bne.n	800437e <osThreadNew+0xca>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <osThreadNew+0xca>
          mem = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e001      	b.n	800437e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d110      	bne.n	80043a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800438c:	9202      	str	r2, [sp, #8]
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f001 faf6 	bl	800598c <xTaskCreateStatic>
 80043a0:	4603      	mov	r3, r0
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e013      	b.n	80043ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	f107 0310 	add.w	r3, r7, #16
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 fb44 	bl	8005a4c <xTaskCreate>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <osThreadNew+0x11a>
            hTask = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043ce:	693b      	ldr	r3, [r7, #16]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e0:	f3ef 8305 	mrs	r3, IPSR
 80043e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <osDelay+0x1c>
    stat = osErrorISR;
 80043ec:	f06f 0305 	mvn.w	r3, #5
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e007      	b.n	8004404 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <osDelay+0x2c>
      vTaskDelay(ticks);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 fc6a 	bl	8005cd8 <vTaskDelay>
    }
  }

  return (stat);
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800440e:	b580      	push	{r7, lr}
 8004410:	b088      	sub	sp, #32
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441a:	f3ef 8305 	mrs	r3, IPSR
 800441e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004420:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004422:	2b00      	cmp	r3, #0
 8004424:	d174      	bne.n	8004510 <osMutexNew+0x102>
    if (attr != NULL) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <osMutexNew+0x26>
      type = attr->attr_bits;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e001      	b.n	8004438 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <osMutexNew+0x3a>
      rmtx = 1U;
 8004442:	2301      	movs	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e001      	b.n	800444c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d15c      	bne.n	8004510 <osMutexNew+0x102>
      mem = -1;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <osMutexNew+0x6a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004470:	d902      	bls.n	8004478 <osMutexNew+0x6a>
          mem = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e00c      	b.n	8004492 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <osMutexNew+0x84>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <osMutexNew+0x84>
            mem = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e001      	b.n	8004492 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d112      	bne.n	80044be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4619      	mov	r1, r3
 80044a4:	2004      	movs	r0, #4
 80044a6:	f000 fc50 	bl	8004d4a <xQueueCreateMutexStatic>
 80044aa:	61f8      	str	r0, [r7, #28]
 80044ac:	e016      	b.n	80044dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4619      	mov	r1, r3
 80044b4:	2001      	movs	r0, #1
 80044b6:	f000 fc48 	bl	8004d4a <xQueueCreateMutexStatic>
 80044ba:	61f8      	str	r0, [r7, #28]
 80044bc:	e00e      	b.n	80044dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80044ca:	2004      	movs	r0, #4
 80044cc:	f000 fc25 	bl	8004d1a <xQueueCreateMutex>
 80044d0:	61f8      	str	r0, [r7, #28]
 80044d2:	e003      	b.n	80044dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80044d4:	2001      	movs	r0, #1
 80044d6:	f000 fc20 	bl	8004d1a <xQueueCreateMutex>
 80044da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <osMutexNew+0xee>
        if (attr != NULL) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <osMutexNew+0xe2>
          name = attr->name;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e001      	b.n	80044f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	69f8      	ldr	r0, [r7, #28]
 80044f8:	f001 f9ea 	bl	80058d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <osMutexNew+0x102>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004510:	69fb      	ldr	r3, [r7, #28]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004538:	f3ef 8305 	mrs	r3, IPSR
 800453c:	60bb      	str	r3, [r7, #8]
  return(result);
 800453e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004544:	f06f 0305 	mvn.w	r3, #5
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e02c      	b.n	80045a6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004552:	f06f 0303 	mvn.w	r3, #3
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e025      	b.n	80045a6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	6938      	ldr	r0, [r7, #16]
 8004564:	f000 fc41 	bl	8004dea <xQueueTakeMutexRecursive>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d01b      	beq.n	80045a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004574:	f06f 0301 	mvn.w	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e014      	b.n	80045a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800457c:	f06f 0302 	mvn.w	r3, #2
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e010      	b.n	80045a6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f000 fee8 	bl	800535c <xQueueSemaphoreTake>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d009      	beq.n	80045a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004598:	f06f 0301 	mvn.w	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e002      	b.n	80045a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80045a0:	f06f 0302 	mvn.w	r3, #2
 80045a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045cc:	f3ef 8305 	mrs	r3, IPSR
 80045d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80045d8:	f06f 0305 	mvn.w	r3, #5
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e01f      	b.n	8004620 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80045e6:	f06f 0303 	mvn.w	r3, #3
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e018      	b.n	8004620 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f000 fbc3 	bl	8004d80 <xQueueGiveMutexRecursive>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d00f      	beq.n	8004620 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004600:	f06f 0302 	mvn.w	r3, #2
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e00b      	b.n	8004620 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004608:	2300      	movs	r3, #0
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	6938      	ldr	r0, [r7, #16]
 8004610:	f000 fc22 	bl	8004e58 <xQueueGenericSend>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d002      	beq.n	8004620 <osMutexRelease+0x70>
        stat = osErrorResource;
 800461a:	f06f 0302 	mvn.w	r3, #2
 800461e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004620:	697b      	ldr	r3, [r7, #20]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800462a:	b580      	push	{r7, lr}
 800462c:	b08a      	sub	sp, #40	@ 0x28
 800462e:	af02      	add	r7, sp, #8
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	613b      	str	r3, [r7, #16]
  return(result);
 8004640:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15f      	bne.n	8004706 <osMessageQueueNew+0xdc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05c      	beq.n	8004706 <osMessageQueueNew+0xdc>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d059      	beq.n	8004706 <osMessageQueueNew+0xdc>
    mem = -1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d029      	beq.n	80046b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <osMessageQueueNew+0x62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b4f      	cmp	r3, #79	@ 0x4f
 800466c:	d90e      	bls.n	800468c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <osMessageQueueNew+0x62>
        mem = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e014      	b.n	80046b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d110      	bne.n	80046b6 <osMessageQueueNew+0x8c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e001      	b.n	80046b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10b      	bne.n	80046d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2100      	movs	r1, #0
 80046c6:	9100      	str	r1, [sp, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fa30 	bl	8004b30 <xQueueGenericCreateStatic>
 80046d0:	61f8      	str	r0, [r7, #28]
 80046d2:	e008      	b.n	80046e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80046da:	2200      	movs	r2, #0
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 faa3 	bl	8004c2a <xQueueGenericCreate>
 80046e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00c      	beq.n	8004706 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e001      	b.n	80046fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	69f8      	ldr	r0, [r7, #28]
 8004702:	f001 f8e5 	bl	80058d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004706:	69fb      	ldr	r3, [r7, #28]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004728:	f3ef 8305 	mrs	r3, IPSR
 800472c:	617b      	str	r3, [r7, #20]
  return(result);
 800472e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004730:	2b00      	cmp	r3, #0
 8004732:	d028      	beq.n	8004786 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <osMessageQueuePut+0x36>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <osMessageQueuePut+0x36>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004746:	f06f 0303 	mvn.w	r3, #3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e038      	b.n	80047c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004752:	f107 0210 	add.w	r2, r7, #16
 8004756:	2300      	movs	r3, #0
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	69b8      	ldr	r0, [r7, #24]
 800475c:	f000 fc7e 	bl	800505c <xQueueGenericSendFromISR>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d003      	beq.n	800476e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004766:	f06f 0302 	mvn.w	r3, #2
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e028      	b.n	80047c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d025      	beq.n	80047c0 <osMessageQueuePut+0xb0>
 8004774:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <osMessageQueuePut+0xbc>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	e01c      	b.n	80047c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <osMessageQueuePut+0x82>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004792:	f06f 0303 	mvn.w	r3, #3
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e012      	b.n	80047c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800479a:	2300      	movs	r3, #0
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	69b8      	ldr	r0, [r7, #24]
 80047a2:	f000 fb59 	bl	8004e58 <xQueueGenericSend>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d009      	beq.n	80047c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80047b2:	f06f 0301 	mvn.w	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e002      	b.n	80047c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80047ba:	f06f 0302 	mvn.w	r3, #2
 80047be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80047c0:	69fb      	ldr	r3, [r7, #28]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e6:	f3ef 8305 	mrs	r3, IPSR
 80047ea:	617b      	str	r3, [r7, #20]
  return(result);
 80047ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d028      	beq.n	8004844 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <osMessageQueueGet+0x34>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <osMessageQueueGet+0x34>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004804:	f06f 0303 	mvn.w	r3, #3
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e037      	b.n	800487c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	461a      	mov	r2, r3
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	69b8      	ldr	r0, [r7, #24]
 800481a:	f000 feaf 	bl	800557c <xQueueReceiveFromISR>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d003      	beq.n	800482c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004824:	f06f 0302 	mvn.w	r3, #2
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e027      	b.n	800487c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d024      	beq.n	800487c <osMessageQueueGet+0xac>
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <osMessageQueueGet+0xb8>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	e01b      	b.n	800487c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <osMessageQueueGet+0x80>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004850:	f06f 0303 	mvn.w	r3, #3
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e011      	b.n	800487c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	69b8      	ldr	r0, [r7, #24]
 800485e:	f000 fc9b 	bl	8005198 <xQueueReceive>
 8004862:	4603      	mov	r3, r0
 8004864:	2b01      	cmp	r3, #1
 8004866:	d009      	beq.n	800487c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800486e:	f06f 0301 	mvn.w	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e002      	b.n	800487c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004876:	f06f 0302 	mvn.w	r3, #2
 800487a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800487c:	69fb      	ldr	r3, [r7, #28]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	@ (80048bc <vApplicationGetIdleTaskMemory+0x30>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	@ 0x80
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	200002b0 	.word	0x200002b0
 80048bc:	2000030c 	.word	0x2000030c

080048c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a07      	ldr	r2, [pc, #28]	@ (80048ec <vApplicationGetTimerTaskMemory+0x2c>)
 80048d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <vApplicationGetTimerTaskMemory+0x30>)
 80048d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	2000050c 	.word	0x2000050c
 80048f0:	20000568 	.word	0x20000568

080048f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d103      	bne.n	80049b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00c      	b.n	80049d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3308      	adds	r3, #8
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e002      	b.n	80049c4 <vListInsert+0x2e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d2f6      	bcs.n	80049be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d103      	bne.n	8004a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a88:	f002 fc26 	bl	80072d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	22ff      	movs	r2, #255	@ 0xff
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	22ff      	movs	r2, #255	@ 0xff
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d114      	bne.n	8004b08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3310      	adds	r3, #16
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fbb8 	bl	8006260 <xTaskRemoveFromEventList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <xQueueGenericReset+0xd0>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e009      	b.n	8004b1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3310      	adds	r3, #16
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fef1 	bl	80048f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3324      	adds	r3, #36	@ 0x24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff feec 	bl	80048f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b1c:	f002 fc0e 	bl	800733c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	@ 0x38
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <xQueueGenericCreateStatic+0x56>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <xQueueGenericCreateStatic+0x5a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueGenericCreateStatic+0x5c>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <xQueueGenericCreateStatic+0x84>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <xQueueGenericCreateStatic+0x88>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <xQueueGenericCreateStatic+0x8a>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61fb      	str	r3, [r7, #28]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bd6:	2350      	movs	r3, #80	@ 0x50
 8004bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b50      	cmp	r3, #80	@ 0x50
 8004bde:	d00b      	beq.n	8004bf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	61bb      	str	r3, [r7, #24]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f840 	bl	8004ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	@ 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b08a      	sub	sp, #40	@ 0x28
 8004c2e:	af02      	add	r7, sp, #8
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	613b      	str	r3, [r7, #16]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3350      	adds	r3, #80	@ 0x50
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 fc59 	bl	800751c <pvPortMalloc>
 8004c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3350      	adds	r3, #80	@ 0x50
 8004c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c84:	79fa      	ldrb	r2, [r7, #7]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f805 	bl	8004ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c96:	69bb      	ldr	r3, [r7, #24]
	}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e002      	b.n	8004cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cce:	2101      	movs	r1, #1
 8004cd0:	69b8      	ldr	r0, [r7, #24]
 8004cd2:	f7ff fec3 	bl	8004a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d06:	2300      	movs	r3, #0
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8a3 	bl	8004e58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	4603      	mov	r3, r0
 8004d22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6939      	ldr	r1, [r7, #16]
 8004d32:	6978      	ldr	r0, [r7, #20]
 8004d34:	f7ff ff79 	bl	8004c2a <xQueueGenericCreate>
 8004d38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff ffd3 	bl	8004ce6 <prvInitialiseMutex>

		return xNewQueue;
 8004d40:	68fb      	ldr	r3, [r7, #12]
	}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	4603      	mov	r3, r0
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d56:	2301      	movs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2200      	movs	r2, #0
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f7ff fee1 	bl	8004b30 <xQueueGenericCreateStatic>
 8004d6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ffb8 	bl	8004ce6 <prvInitialiseMutex>

		return xNewQueue;
 8004d76:	68fb      	ldr	r3, [r7, #12]
	}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60fb      	str	r3, [r7, #12]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	689c      	ldr	r4, [r3, #8]
 8004dae:	f001 fc17 	bl	80065e0 <xTaskGetCurrentTaskHandle>
 8004db2:	4603      	mov	r3, r0
 8004db4:	429c      	cmp	r4, r3
 8004db6:	d111      	bne.n	8004ddc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2100      	movs	r1, #0
 8004dd0:	6938      	ldr	r0, [r7, #16]
 8004dd2:	f000 f841 	bl	8004e58 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e001      	b.n	8004de0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004de0:	697b      	ldr	r3, [r7, #20]
	}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}

08004dea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004dea:	b590      	push	{r4, r7, lr}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	689c      	ldr	r4, [r3, #8]
 8004e1a:	f001 fbe1 	bl	80065e0 <xTaskGetCurrentTaskHandle>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	429c      	cmp	r4, r3
 8004e22:	d107      	bne.n	8004e34 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e00c      	b.n	8004e4e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6938      	ldr	r0, [r7, #16]
 8004e38:	f000 fa90 	bl	800535c <xQueueSemaphoreTake>
 8004e3c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004e4e:	697b      	ldr	r3, [r7, #20]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}

08004e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08e      	sub	sp, #56	@ 0x38
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e66:	2300      	movs	r3, #0
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xQueueGenericSend+0x34>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSend+0x42>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSend+0x46>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSend+0x48>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <xQueueGenericSend+0x64>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x72>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <xQueueGenericSend+0x76>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <xQueueGenericSend+0x78>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <xQueueGenericSend+0x94>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	623b      	str	r3, [r7, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eec:	f001 fb88 	bl	8006600 <xTaskGetSchedulerState>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <xQueueGenericSend+0xa4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <xQueueGenericSend+0xa8>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <xQueueGenericSend+0xaa>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <xQueueGenericSend+0xc6>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61fb      	str	r3, [r7, #28]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f1e:	f002 f9db 	bl	80072d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <xQueueGenericSend+0xdc>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d129      	bne.n	8004f88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f3a:	f000 fbb9 	bl	80056b0 <prvCopyDataToQueue>
 8004f3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	3324      	adds	r3, #36	@ 0x24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 f987 	bl	8006260 <xTaskRemoveFromEventList>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d013      	beq.n	8004f80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f58:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <xQueueGenericSend+0x200>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	e00a      	b.n	8004f80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f70:	4b39      	ldr	r3, [pc, #228]	@ (8005058 <xQueueGenericSend+0x200>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f80:	f002 f9dc 	bl	800733c <vPortExitCritical>
				return pdPASS;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e063      	b.n	8005050 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f8e:	f002 f9d5 	bl	800733c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e05c      	b.n	8005050 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 f9c1 	bl	8006328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004faa:	f002 f9c7 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fae:	f000 ff31 	bl	8005e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb2:	f002 f991 	bl	80072d8 <vPortEnterCritical>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fbc:	b25b      	sxtb	r3, r3
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d103      	bne.n	8004fcc <xQueueGenericSend+0x174>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d103      	bne.n	8004fe2 <xQueueGenericSend+0x18a>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe2:	f002 f9ab 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe6:	1d3a      	adds	r2, r7, #4
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f9b0 	bl	8006354 <xTaskCheckForTimeOut>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d124      	bne.n	8005044 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ffc:	f000 fc50 	bl	80058a0 <prvIsQueueFull>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d018      	beq.n	8005038 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	3310      	adds	r3, #16
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f001 f8d4 	bl	80061bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005016:	f000 fbdb 	bl	80057d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800501a:	f000 ff09 	bl	8005e30 <xTaskResumeAll>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f af7c 	bne.w	8004f1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005026:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <xQueueGenericSend+0x200>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	e772      	b.n	8004f1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800503a:	f000 fbc9 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800503e:	f000 fef7 	bl	8005e30 <xTaskResumeAll>
 8005042:	e76c      	b.n	8004f1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005046:	f000 fbc3 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800504a:	f000 fef1 	bl	8005e30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800504e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005050:	4618      	mov	r0, r3
 8005052:	3738      	adds	r7, #56	@ 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b090      	sub	sp, #64	@ 0x40
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <xQueueGenericSendFromISR+0x3e>
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <xQueueGenericSendFromISR+0x42>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueGenericSendFromISR+0x44>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSendFromISR+0x6e>
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSendFromISR+0x72>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSendFromISR+0x74>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ec:	f002 f9d4 	bl	8007498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050f0:	f3ef 8211 	mrs	r2, BASEPRI
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005108:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	429a      	cmp	r2, r3
 8005116:	d302      	bcc.n	800511e <xQueueGenericSendFromISR+0xc2>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d12f      	bne.n	800517e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005134:	f000 fabc 	bl	80056b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005138:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d112      	bne.n	8005168 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	3324      	adds	r3, #36	@ 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f886 	bl	8006260 <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005168:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800516c:	3301      	adds	r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	b25a      	sxtb	r2, r3
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800517c:	e001      	b.n	8005182 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517e:	2300      	movs	r3, #0
 8005180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005184:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005190:	4618      	mov	r0, r3
 8005192:	3740      	adds	r7, #64	@ 0x40
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	@ 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <xQueueReceive+0x32>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	623b      	str	r3, [r7, #32]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <xQueueReceive+0x40>
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <xQueueReceive+0x44>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <xQueueReceive+0x46>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <xQueueReceive+0x62>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61fb      	str	r3, [r7, #28]
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051fa:	f001 fa01 	bl	8006600 <xTaskGetSchedulerState>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <xQueueReceive+0x72>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueReceive+0x76>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueReceive+0x78>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <xQueueReceive+0x94>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800522c:	f002 f854 	bl	80072d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01f      	beq.n	800527c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005240:	f000 faa0 	bl	8005784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00f      	beq.n	8005274 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	3310      	adds	r3, #16
 8005258:	4618      	mov	r0, r3
 800525a:	f001 f801 	bl	8006260 <xTaskRemoveFromEventList>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005264:	4b3c      	ldr	r3, [pc, #240]	@ (8005358 <xQueueReceive+0x1c0>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005274:	f002 f862 	bl	800733c <vPortExitCritical>
				return pdPASS;
 8005278:	2301      	movs	r3, #1
 800527a:	e069      	b.n	8005350 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005282:	f002 f85b 	bl	800733c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005286:	2300      	movs	r3, #0
 8005288:	e062      	b.n	8005350 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005290:	f107 0310 	add.w	r3, r7, #16
 8005294:	4618      	mov	r0, r3
 8005296:	f001 f847 	bl	8006328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800529e:	f002 f84d 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052a2:	f000 fdb7 	bl	8005e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a6:	f002 f817 	bl	80072d8 <vPortEnterCritical>
 80052aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d103      	bne.n	80052c0 <xQueueReceive+0x128>
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d103      	bne.n	80052d6 <xQueueReceive+0x13e>
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052d6:	f002 f831 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052da:	1d3a      	adds	r2, r7, #4
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f836 	bl	8006354 <xTaskCheckForTimeOut>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d123      	bne.n	8005336 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f0:	f000 fac0 	bl	8005874 <prvIsQueueEmpty>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	3324      	adds	r3, #36	@ 0x24
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ff5a 	bl	80061bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800530a:	f000 fa61 	bl	80057d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800530e:	f000 fd8f 	bl	8005e30 <xTaskResumeAll>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d189      	bne.n	800522c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <xQueueReceive+0x1c0>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	e780      	b.n	800522c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800532a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532c:	f000 fa50 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005330:	f000 fd7e 	bl	8005e30 <xTaskResumeAll>
 8005334:	e77a      	b.n	800522c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005338:	f000 fa4a 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800533c:	f000 fd78 	bl	8005e30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005342:	f000 fa97 	bl	8005874 <prvIsQueueEmpty>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	f43f af6f 	beq.w	800522c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800534e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005350:	4618      	mov	r0, r3
 8005352:	3730      	adds	r7, #48	@ 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	@ 0x38
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	623b      	str	r3, [r7, #32]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61fb      	str	r3, [r7, #28]
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b0:	f001 f926 	bl	8006600 <xTaskGetSchedulerState>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <xQueueSemaphoreTake+0x64>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueSemaphoreTake+0x68>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueSemaphoreTake+0x6a>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	61bb      	str	r3, [r7, #24]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e2:	f001 ff79 	bl	80072d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d024      	beq.n	800543c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	1e5a      	subs	r2, r3, #1
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005402:	f001 fa77 	bl	80068f4 <pvTaskIncrementMutexHeldCount>
 8005406:	4602      	mov	r2, r0
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00f      	beq.n	8005434 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005416:	3310      	adds	r3, #16
 8005418:	4618      	mov	r0, r3
 800541a:	f000 ff21 	bl	8006260 <xTaskRemoveFromEventList>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005424:	4b54      	ldr	r3, [pc, #336]	@ (8005578 <xQueueSemaphoreTake+0x21c>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005434:	f001 ff82 	bl	800733c <vPortExitCritical>
				return pdPASS;
 8005438:	2301      	movs	r3, #1
 800543a:	e098      	b.n	800556e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d112      	bne.n	8005468 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	617b      	str	r3, [r7, #20]
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005460:	f001 ff6c 	bl	800733c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005464:	2300      	movs	r3, #0
 8005466:	e082      	b.n	800556e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ff58 	bl	8006328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547c:	f001 ff5e 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005480:	f000 fcc8 	bl	8005e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005484:	f001 ff28 	bl	80072d8 <vPortEnterCritical>
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800548e:	b25b      	sxtb	r3, r3
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d103      	bne.n	800549e <xQueueSemaphoreTake+0x142>
 8005496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d103      	bne.n	80054b4 <xQueueSemaphoreTake+0x158>
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054b4:	f001 ff42 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b8:	463a      	mov	r2, r7
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 ff47 	bl	8006354 <xTaskCheckForTimeOut>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d132      	bne.n	8005532 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054ce:	f000 f9d1 	bl	8005874 <prvIsQueueEmpty>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d026      	beq.n	8005526 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80054e0:	f001 fefa 	bl	80072d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f8a7 	bl	800663c <xTaskPriorityInherit>
 80054ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80054f0:	f001 ff24 	bl	800733c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f6:	3324      	adds	r3, #36	@ 0x24
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fe5d 	bl	80061bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005504:	f000 f964 	bl	80057d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005508:	f000 fc92 	bl	8005e30 <xTaskResumeAll>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	f47f af67 	bne.w	80053e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005514:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <xQueueSemaphoreTake+0x21c>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	e75d      	b.n	80053e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005528:	f000 f952 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800552c:	f000 fc80 	bl	8005e30 <xTaskResumeAll>
 8005530:	e757      	b.n	80053e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005532:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005534:	f000 f94c 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005538:	f000 fc7a 	bl	8005e30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800553c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800553e:	f000 f999 	bl	8005874 <prvIsQueueEmpty>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	f43f af4c 	beq.w	80053e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005550:	f001 fec2 	bl	80072d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005556:	f000 f893 	bl	8005680 <prvGetDisinheritPriorityAfterTimeout>
 800555a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f942 	bl	80067ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005568:	f001 fee8 	bl	800733c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800556c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800556e:	4618      	mov	r0, r3
 8005570:	3738      	adds	r7, #56	@ 0x38
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	@ 0x38
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	623b      	str	r3, [r7, #32]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d103      	bne.n	80055b8 <xQueueReceiveFromISR+0x3c>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <xQueueReceiveFromISR+0x40>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <xQueueReceiveFromISR+0x42>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61fb      	str	r3, [r7, #28]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055da:	f001 ff5d 	bl	8007498 <vPortValidateInterruptPriority>
	__asm volatile
 80055de:	f3ef 8211 	mrs	r2, BASEPRI
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61ba      	str	r2, [r7, #24]
 80055f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d02f      	beq.n	8005666 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800560c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005614:	f000 f8b6 	bl	8005784 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005620:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d112      	bne.n	8005650 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	3310      	adds	r3, #16
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fe12 	bl	8006260 <xTaskRemoveFromEventList>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e007      	b.n	8005660 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005654:	3301      	adds	r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	b25a      	sxtb	r2, r3
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005660:	2301      	movs	r3, #1
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
 8005664:	e001      	b.n	800566a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f383 8811 	msr	BASEPRI, r3
}
 8005674:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005678:	4618      	mov	r0, r3
 800567a:	3738      	adds	r7, #56	@ 0x38
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e001      	b.n	80056a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056a2:	68fb      	ldr	r3, [r7, #12]
	}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10d      	bne.n	80056ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d14d      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 f816 	bl	800670c <xTaskPriorityDisinherit>
 80056e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e043      	b.n	8005772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d119      	bne.n	8005724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6858      	ldr	r0, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	461a      	mov	r2, r3
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f002 fef9 	bl	80084f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d32b      	bcc.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	e026      	b.n	8005772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68d8      	ldr	r0, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	461a      	mov	r2, r3
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	f002 fedf 	bl	80084f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	425b      	negs	r3, r3
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d207      	bcs.n	8005760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	425b      	negs	r3, r3
 800575a:	441a      	add	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d105      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3b01      	subs	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	441a      	add	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d303      	bcc.n	80057b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68d9      	ldr	r1, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f002 fe95 	bl	80084f2 <memcpy>
	}
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d8:	f001 fd7e 	bl	80072d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e4:	e011      	b.n	800580a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d012      	beq.n	8005814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3324      	adds	r3, #36	@ 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd34 	bl	8006260 <xTaskRemoveFromEventList>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057fe:	f000 fe0d 	bl	800641c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3b01      	subs	r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	dce9      	bgt.n	80057e6 <prvUnlockQueue+0x16>
 8005812:	e000      	b.n	8005816 <prvUnlockQueue+0x46>
					break;
 8005814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	22ff      	movs	r2, #255	@ 0xff
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fd8d 	bl	800733c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005822:	f001 fd59 	bl	80072d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800582c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	e011      	b.n	8005854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3310      	adds	r3, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fd0f 	bl	8006260 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005848:	f000 fde8 	bl	800641c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	3b01      	subs	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dce9      	bgt.n	8005830 <prvUnlockQueue+0x60>
 800585c:	e000      	b.n	8005860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800585e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	22ff      	movs	r2, #255	@ 0xff
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005868:	f001 fd68 	bl	800733c <vPortExitCritical>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800587c:	f001 fd2c 	bl	80072d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e001      	b.n	8005892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005892:	f001 fd53 	bl	800733c <vPortExitCritical>

	return xReturn;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a8:	f001 fd16 	bl	80072d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d102      	bne.n	80058be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e001      	b.n	80058c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fd3b 	bl	800733c <vPortExitCritical>

	return xReturn;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e014      	b.n	800590a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058ec:	490c      	ldr	r1, [pc, #48]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005902:	e006      	b.n	8005912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b07      	cmp	r3, #7
 800590e:	d9e7      	bls.n	80058e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000968 	.word	0x20000968

08005924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005934:	f001 fcd0 	bl	80072d8 <vPortEnterCritical>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800593e:	b25b      	sxtb	r3, r3
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d103      	bne.n	800594e <vQueueWaitForMessageRestricted+0x2a>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005954:	b25b      	sxtb	r3, r3
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d103      	bne.n	8005964 <vQueueWaitForMessageRestricted+0x40>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005964:	f001 fcea 	bl	800733c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3324      	adds	r3, #36	@ 0x24
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fc45 	bl	8006208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff26 	bl	80057d0 <prvUnlockQueue>
	}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af04      	add	r7, sp, #16
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	61fb      	str	r3, [r7, #28]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d6:	235c      	movs	r3, #92	@ 0x5c
 80059d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80059de:	d00b      	beq.n	80059f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	61bb      	str	r3, [r7, #24]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01e      	beq.n	8005a3e <xTaskCreateStatic+0xb2>
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f850 	bl	8005ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a38:	f000 f8de 	bl	8005bf8 <prvAddNewTaskToReadyList>
 8005a3c:	e001      	b.n	8005a42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a42:	697b      	ldr	r3, [r7, #20]
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3728      	adds	r7, #40	@ 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	@ 0x30
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fd5b 	bl	800751c <pvPortMalloc>
 8005a66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a6e:	205c      	movs	r0, #92	@ 0x5c
 8005a70:	f001 fd54 	bl	800751c <pvPortMalloc>
 8005a74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a82:	e005      	b.n	8005a90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f001 fe17 	bl	80076b8 <vPortFree>
 8005a8a:	e001      	b.n	8005a90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9303      	str	r3, [sp, #12]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f80e 	bl	8005ad6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aba:	69f8      	ldr	r0, [r7, #28]
 8005abc:	f000 f89c 	bl	8005bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e002      	b.n	8005acc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005acc:	69bb      	ldr	r3, [r7, #24]
	}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	461a      	mov	r2, r3
 8005aee:	21a5      	movs	r1, #165	@ 0xa5
 8005af0:	f002 fc7f 	bl	80083f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005afe:	3b01      	subs	r3, #1
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f023 0307 	bic.w	r3, r3, #7
 8005b0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	617b      	str	r3, [r7, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01f      	beq.n	8005b76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e012      	b.n	8005b62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3334      	adds	r3, #52	@ 0x34
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d9e9      	bls.n	8005b3c <prvInitialiseNewTask+0x66>
 8005b68:	e000      	b.n	8005b6c <prvInitialiseNewTask+0x96>
			{
				break;
 8005b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b74:	e003      	b.n	8005b7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	2b37      	cmp	r3, #55	@ 0x37
 8005b82:	d901      	bls.n	8005b88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b84:	2337      	movs	r3, #55	@ 0x37
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	2200      	movs	r2, #0
 8005b98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fec8 	bl	8004934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fec3 	bl	8004934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	68f9      	ldr	r1, [r7, #12]
 8005bd6:	69b8      	ldr	r0, [r7, #24]
 8005bd8:	f001 fa4e 	bl	8007078 <pxPortInitialiseStack>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bee:	bf00      	nop
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c00:	f001 fb6a 	bl	80072d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c04:	4b2d      	ldr	r3, [pc, #180]	@ (8005cbc <prvAddNewTaskToReadyList+0xc4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <prvAddNewTaskToReadyList+0xc4>)
 8005c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <prvAddNewTaskToReadyList+0xc8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c16:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc0 <prvAddNewTaskToReadyList+0xc8>)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c1c:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <prvAddNewTaskToReadyList+0xc4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d110      	bne.n	8005c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c24:	f000 fc1e 	bl	8006464 <prvInitialiseTaskLists>
 8005c28:	e00d      	b.n	8005c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c2a:	4b26      	ldr	r3, [pc, #152]	@ (8005cc4 <prvAddNewTaskToReadyList+0xcc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c32:	4b23      	ldr	r3, [pc, #140]	@ (8005cc0 <prvAddNewTaskToReadyList+0xc8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d802      	bhi.n	8005c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c40:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc0 <prvAddNewTaskToReadyList+0xc8>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c46:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <prvAddNewTaskToReadyList+0xd0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc8 <prvAddNewTaskToReadyList+0xd0>)
 8005c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c50:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc8 <prvAddNewTaskToReadyList+0xd0>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <prvAddNewTaskToReadyList+0xd4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d903      	bls.n	8005c6c <prvAddNewTaskToReadyList+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <prvAddNewTaskToReadyList+0xd4>)
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4a15      	ldr	r2, [pc, #84]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd8>)
 8005c7a:	441a      	add	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fe fe63 	bl	800494e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c88:	f001 fb58 	bl	800733c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <prvAddNewTaskToReadyList+0xcc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c94:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc0 <prvAddNewTaskToReadyList+0xc8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d207      	bcs.n	8005cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <prvAddNewTaskToReadyList+0xdc>)
 8005ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000e7c 	.word	0x20000e7c
 8005cc0:	200009a8 	.word	0x200009a8
 8005cc4:	20000e88 	.word	0x20000e88
 8005cc8:	20000e98 	.word	0x20000e98
 8005ccc:	20000e84 	.word	0x20000e84
 8005cd0:	200009ac 	.word	0x200009ac
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d018      	beq.n	8005d1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cea:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <vTaskDelay+0x64>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <vTaskDelay+0x32>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60bb      	str	r3, [r7, #8]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d0a:	f000 f883 	bl	8005e14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fe03 	bl	800691c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d16:	f000 f88b 	bl	8005e30 <xTaskResumeAll>
 8005d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d107      	bne.n	8005d32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d22:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <vTaskDelay+0x68>)
 8005d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000ea4 	.word	0x20000ea4
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	@ 0x28
 8005d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d52:	463a      	mov	r2, r7
 8005d54:	1d39      	adds	r1, r7, #4
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fd96 	bl	800488c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	9202      	str	r2, [sp, #8]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	460a      	mov	r2, r1
 8005d72:	4922      	ldr	r1, [pc, #136]	@ (8005dfc <vTaskStartScheduler+0xb8>)
 8005d74:	4822      	ldr	r0, [pc, #136]	@ (8005e00 <vTaskStartScheduler+0xbc>)
 8005d76:	f7ff fe09 	bl	800598c <xTaskCreateStatic>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <vTaskStartScheduler+0xc0>)
 8005d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <vTaskStartScheduler+0xc0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e001      	b.n	8005d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d102      	bne.n	8005d9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d98:	f000 fe14 	bl	80069c4 <xTimerCreateTimerTask>
 8005d9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d116      	bne.n	8005dd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005db8:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <vTaskStartScheduler+0xc4>)
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <vTaskStartScheduler+0xc8>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dc6:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <vTaskStartScheduler+0xcc>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dcc:	f001 f9e0 	bl	8007190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dd0:	e00f      	b.n	8005df2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d10b      	bne.n	8005df2 <vTaskStartScheduler+0xae>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <vTaskStartScheduler+0xaa>
}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	0800a5dc 	.word	0x0800a5dc
 8005e00:	08006435 	.word	0x08006435
 8005e04:	20000ea0 	.word	0x20000ea0
 8005e08:	20000e9c 	.word	0x20000e9c
 8005e0c:	20000e88 	.word	0x20000e88
 8005e10:	20000e80 	.word	0x20000e80

08005e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e18:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <vTaskSuspendAll+0x18>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4a03      	ldr	r2, [pc, #12]	@ (8005e2c <vTaskSuspendAll+0x18>)
 8005e20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	20000ea4 	.word	0x20000ea4

08005e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e3e:	4b42      	ldr	r3, [pc, #264]	@ (8005f48 <xTaskResumeAll+0x118>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10b      	bne.n	8005e5e <xTaskResumeAll+0x2e>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	603b      	str	r3, [r7, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e5e:	f001 fa3b 	bl	80072d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e62:	4b39      	ldr	r3, [pc, #228]	@ (8005f48 <xTaskResumeAll+0x118>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4a37      	ldr	r2, [pc, #220]	@ (8005f48 <xTaskResumeAll+0x118>)
 8005e6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6c:	4b36      	ldr	r3, [pc, #216]	@ (8005f48 <xTaskResumeAll+0x118>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d162      	bne.n	8005f3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e74:	4b35      	ldr	r3, [pc, #212]	@ (8005f4c <xTaskResumeAll+0x11c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05e      	beq.n	8005f3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e7c:	e02f      	b.n	8005ede <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7e:	4b34      	ldr	r3, [pc, #208]	@ (8005f50 <xTaskResumeAll+0x120>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3318      	adds	r3, #24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fdbc 	bl	8004a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe fdb7 	bl	8004a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f54 <xTaskResumeAll+0x124>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d903      	bls.n	8005eae <xTaskResumeAll+0x7e>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8005f54 <xTaskResumeAll+0x124>)
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4a27      	ldr	r2, [pc, #156]	@ (8005f58 <xTaskResumeAll+0x128>)
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fe fd42 	bl	800494e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ece:	4b23      	ldr	r3, [pc, #140]	@ (8005f5c <xTaskResumeAll+0x12c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ed8:	4b21      	ldr	r3, [pc, #132]	@ (8005f60 <xTaskResumeAll+0x130>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ede:	4b1c      	ldr	r3, [pc, #112]	@ (8005f50 <xTaskResumeAll+0x120>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1cb      	bne.n	8005e7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eec:	f000 fb58 	bl	80065a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f64 <xTaskResumeAll+0x134>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005efc:	f000 f846 	bl	8005f8c <xTaskIncrementTick>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f06:	4b16      	ldr	r3, [pc, #88]	@ (8005f60 <xTaskResumeAll+0x130>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f1      	bne.n	8005efc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f18:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <xTaskResumeAll+0x134>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f1e:	4b10      	ldr	r3, [pc, #64]	@ (8005f60 <xTaskResumeAll+0x130>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f26:	2301      	movs	r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f68 <xTaskResumeAll+0x138>)
 8005f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f001 f9ff 	bl	800733c <vPortExitCritical>

	return xAlreadyYielded;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000ea4 	.word	0x20000ea4
 8005f4c:	20000e7c 	.word	0x20000e7c
 8005f50:	20000e3c 	.word	0x20000e3c
 8005f54:	20000e84 	.word	0x20000e84
 8005f58:	200009ac 	.word	0x200009ac
 8005f5c:	200009a8 	.word	0x200009a8
 8005f60:	20000e90 	.word	0x20000e90
 8005f64:	20000e8c 	.word	0x20000e8c
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f72:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <xTaskGetTickCount+0x1c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f78:	687b      	ldr	r3, [r7, #4]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000e80 	.word	0x20000e80

08005f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f96:	4b4f      	ldr	r3, [pc, #316]	@ (80060d4 <xTaskIncrementTick+0x148>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 8090 	bne.w	80060c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80060d8 <xTaskIncrementTick+0x14c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80060d8 <xTaskIncrementTick+0x14c>)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d121      	bne.n	8005ff8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fb4:	4b49      	ldr	r3, [pc, #292]	@ (80060dc <xTaskIncrementTick+0x150>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <xTaskIncrementTick+0x46>
 8005fd6:	4b41      	ldr	r3, [pc, #260]	@ (80060dc <xTaskIncrementTick+0x150>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	4b40      	ldr	r3, [pc, #256]	@ (80060e0 <xTaskIncrementTick+0x154>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80060dc <xTaskIncrementTick+0x150>)
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80060e0 <xTaskIncrementTick+0x154>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b3e      	ldr	r3, [pc, #248]	@ (80060e4 <xTaskIncrementTick+0x158>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80060e4 <xTaskIncrementTick+0x158>)
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	f000 fad4 	bl	80065a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80060e8 <xTaskIncrementTick+0x15c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d349      	bcc.n	8006096 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006002:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <xTaskIncrementTick+0x150>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600c:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <xTaskIncrementTick+0x15c>)
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	601a      	str	r2, [r3, #0]
					break;
 8006014:	e03f      	b.n	8006096 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006016:	4b31      	ldr	r3, [pc, #196]	@ (80060dc <xTaskIncrementTick+0x150>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d203      	bcs.n	8006036 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800602e:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <xTaskIncrementTick+0x15c>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006034:	e02f      	b.n	8006096 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3304      	adds	r3, #4
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fce4 	bl	8004a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	3318      	adds	r3, #24
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe fcdb 	bl	8004a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006056:	4b25      	ldr	r3, [pc, #148]	@ (80060ec <xTaskIncrementTick+0x160>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d903      	bls.n	8006066 <xTaskIncrementTick+0xda>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	4a22      	ldr	r2, [pc, #136]	@ (80060ec <xTaskIncrementTick+0x160>)
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4a1f      	ldr	r2, [pc, #124]	@ (80060f0 <xTaskIncrementTick+0x164>)
 8006074:	441a      	add	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f7fe fc66 	bl	800494e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006086:	4b1b      	ldr	r3, [pc, #108]	@ (80060f4 <xTaskIncrementTick+0x168>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d3b8      	bcc.n	8006002 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006094:	e7b5      	b.n	8006002 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006096:	4b17      	ldr	r3, [pc, #92]	@ (80060f4 <xTaskIncrementTick+0x168>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609c:	4914      	ldr	r1, [pc, #80]	@ (80060f0 <xTaskIncrementTick+0x164>)
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d901      	bls.n	80060b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060b2:	4b11      	ldr	r3, [pc, #68]	@ (80060f8 <xTaskIncrementTick+0x16c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e004      	b.n	80060ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060c0:	4b0e      	ldr	r3, [pc, #56]	@ (80060fc <xTaskIncrementTick+0x170>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	4a0d      	ldr	r2, [pc, #52]	@ (80060fc <xTaskIncrementTick+0x170>)
 80060c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060ca:	697b      	ldr	r3, [r7, #20]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000ea4 	.word	0x20000ea4
 80060d8:	20000e80 	.word	0x20000e80
 80060dc:	20000e34 	.word	0x20000e34
 80060e0:	20000e38 	.word	0x20000e38
 80060e4:	20000e94 	.word	0x20000e94
 80060e8:	20000e9c 	.word	0x20000e9c
 80060ec:	20000e84 	.word	0x20000e84
 80060f0:	200009ac 	.word	0x200009ac
 80060f4:	200009a8 	.word	0x200009a8
 80060f8:	20000e90 	.word	0x20000e90
 80060fc:	20000e8c 	.word	0x20000e8c

08006100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006106:	4b28      	ldr	r3, [pc, #160]	@ (80061a8 <vTaskSwitchContext+0xa8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800610e:	4b27      	ldr	r3, [pc, #156]	@ (80061ac <vTaskSwitchContext+0xac>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006114:	e042      	b.n	800619c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006116:	4b25      	ldr	r3, [pc, #148]	@ (80061ac <vTaskSwitchContext+0xac>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611c:	4b24      	ldr	r3, [pc, #144]	@ (80061b0 <vTaskSwitchContext+0xb0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e011      	b.n	8006148 <vTaskSwitchContext+0x48>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <vTaskSwitchContext+0x42>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <vTaskSwitchContext+0x3e>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b01      	subs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	491a      	ldr	r1, [pc, #104]	@ (80061b4 <vTaskSwitchContext+0xb4>)
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0e3      	beq.n	8006124 <vTaskSwitchContext+0x24>
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4a13      	ldr	r2, [pc, #76]	@ (80061b4 <vTaskSwitchContext+0xb4>)
 8006168:	4413      	add	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3308      	adds	r3, #8
 800617e:	429a      	cmp	r2, r3
 8006180:	d104      	bne.n	800618c <vTaskSwitchContext+0x8c>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	4a09      	ldr	r2, [pc, #36]	@ (80061b8 <vTaskSwitchContext+0xb8>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4a06      	ldr	r2, [pc, #24]	@ (80061b0 <vTaskSwitchContext+0xb0>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000ea4 	.word	0x20000ea4
 80061ac:	20000e90 	.word	0x20000e90
 80061b0:	20000e84 	.word	0x20000e84
 80061b4:	200009ac 	.word	0x200009ac
 80061b8:	200009a8 	.word	0x200009a8

080061bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061e4:	4b07      	ldr	r3, [pc, #28]	@ (8006204 <vTaskPlaceOnEventList+0x48>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3318      	adds	r3, #24
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe fbd2 	bl	8004996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061f2:	2101      	movs	r1, #1
 80061f4:	6838      	ldr	r0, [r7, #0]
 80061f6:	f000 fb91 	bl	800691c <prvAddCurrentTaskToDelayedList>
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200009a8 	.word	0x200009a8

08006208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	617b      	str	r3, [r7, #20]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006232:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <vTaskPlaceOnEventListRestricted+0x54>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3318      	adds	r3, #24
 8006238:	4619      	mov	r1, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7fe fb87 	bl	800494e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68b8      	ldr	r0, [r7, #8]
 8006250:	f000 fb64 	bl	800691c <prvAddCurrentTaskToDelayedList>
	}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200009a8 	.word	0x200009a8

08006260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60fb      	str	r3, [r7, #12]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3318      	adds	r3, #24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fbb8 	bl	8004a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b1d      	ldr	r3, [pc, #116]	@ (8006310 <xTaskRemoveFromEventList+0xb0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11d      	bne.n	80062dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fbaf 	bl	8004a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	4b19      	ldr	r3, [pc, #100]	@ (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d903      	bls.n	80062be <xTaskRemoveFromEventList+0x5e>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a13      	ldr	r2, [pc, #76]	@ (8006318 <xTaskRemoveFromEventList+0xb8>)
 80062cc:	441a      	add	r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fe fb3a 	bl	800494e <vListInsertEnd>
 80062da:	e005      	b.n	80062e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	3318      	adds	r3, #24
 80062e0:	4619      	mov	r1, r3
 80062e2:	480e      	ldr	r0, [pc, #56]	@ (800631c <xTaskRemoveFromEventList+0xbc>)
 80062e4:	f7fe fb33 	bl	800494e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <xTaskRemoveFromEventList+0xc0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d905      	bls.n	8006302 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <xTaskRemoveFromEventList+0xc4>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e001      	b.n	8006306 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006306:	697b      	ldr	r3, [r7, #20]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000ea4 	.word	0x20000ea4
 8006314:	20000e84 	.word	0x20000e84
 8006318:	200009ac 	.word	0x200009ac
 800631c:	20000e3c 	.word	0x20000e3c
 8006320:	200009a8 	.word	0x200009a8
 8006324:	20000e90 	.word	0x20000e90

08006328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006330:	4b06      	ldr	r3, [pc, #24]	@ (800634c <vTaskInternalSetTimeOutState+0x24>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <vTaskInternalSetTimeOutState+0x28>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000e94 	.word	0x20000e94
 8006350:	20000e80 	.word	0x20000e80

08006354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	613b      	str	r3, [r7, #16]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60fb      	str	r3, [r7, #12]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800639a:	f000 ff9d 	bl	80072d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800639e:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <xTaskCheckForTimeOut+0xc0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d102      	bne.n	80063be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e023      	b.n	8006406 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <xTaskCheckForTimeOut+0xc4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d007      	beq.n	80063da <xTaskCheckForTimeOut+0x86>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e015      	b.n	8006406 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d20b      	bcs.n	80063fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1ad2      	subs	r2, r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff99 	bl	8006328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	e004      	b.n	8006406 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006402:	2301      	movs	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006406:	f000 ff99 	bl	800733c <vPortExitCritical>

	return xReturn;
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000e80 	.word	0x20000e80
 8006418:	20000e94 	.word	0x20000e94

0800641c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006420:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <vTaskMissedYield+0x14>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000e90 	.word	0x20000e90

08006434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800643c:	f000 f852 	bl	80064e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006440:	4b06      	ldr	r3, [pc, #24]	@ (800645c <prvIdleTask+0x28>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d9f9      	bls.n	800643c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <prvIdleTask+0x2c>)
 800644a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006458:	e7f0      	b.n	800643c <prvIdleTask+0x8>
 800645a:	bf00      	nop
 800645c:	200009ac 	.word	0x200009ac
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	e00c      	b.n	800648a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a12      	ldr	r2, [pc, #72]	@ (80064c4 <prvInitialiseTaskLists+0x60>)
 800647c:	4413      	add	r3, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fa38 	bl	80048f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3301      	adds	r3, #1
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b37      	cmp	r3, #55	@ 0x37
 800648e:	d9ef      	bls.n	8006470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006490:	480d      	ldr	r0, [pc, #52]	@ (80064c8 <prvInitialiseTaskLists+0x64>)
 8006492:	f7fe fa2f 	bl	80048f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006496:	480d      	ldr	r0, [pc, #52]	@ (80064cc <prvInitialiseTaskLists+0x68>)
 8006498:	f7fe fa2c 	bl	80048f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800649c:	480c      	ldr	r0, [pc, #48]	@ (80064d0 <prvInitialiseTaskLists+0x6c>)
 800649e:	f7fe fa29 	bl	80048f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064a2:	480c      	ldr	r0, [pc, #48]	@ (80064d4 <prvInitialiseTaskLists+0x70>)
 80064a4:	f7fe fa26 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064a8:	480b      	ldr	r0, [pc, #44]	@ (80064d8 <prvInitialiseTaskLists+0x74>)
 80064aa:	f7fe fa23 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ae:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <prvInitialiseTaskLists+0x78>)
 80064b0:	4a05      	ldr	r2, [pc, #20]	@ (80064c8 <prvInitialiseTaskLists+0x64>)
 80064b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064b4:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <prvInitialiseTaskLists+0x7c>)
 80064b6:	4a05      	ldr	r2, [pc, #20]	@ (80064cc <prvInitialiseTaskLists+0x68>)
 80064b8:	601a      	str	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200009ac 	.word	0x200009ac
 80064c8:	20000e0c 	.word	0x20000e0c
 80064cc:	20000e20 	.word	0x20000e20
 80064d0:	20000e3c 	.word	0x20000e3c
 80064d4:	20000e50 	.word	0x20000e50
 80064d8:	20000e68 	.word	0x20000e68
 80064dc:	20000e34 	.word	0x20000e34
 80064e0:	20000e38 	.word	0x20000e38

080064e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ea:	e019      	b.n	8006520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064ec:	f000 fef4 	bl	80072d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <prvCheckTasksWaitingTermination+0x50>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fa83 	bl	8004a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <prvCheckTasksWaitingTermination+0x54>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3b01      	subs	r3, #1
 8006508:	4a0b      	ldr	r2, [pc, #44]	@ (8006538 <prvCheckTasksWaitingTermination+0x54>)
 800650a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <prvCheckTasksWaitingTermination+0x58>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3b01      	subs	r3, #1
 8006512:	4a0a      	ldr	r2, [pc, #40]	@ (800653c <prvCheckTasksWaitingTermination+0x58>)
 8006514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006516:	f000 ff11 	bl	800733c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f810 	bl	8006540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006520:	4b06      	ldr	r3, [pc, #24]	@ (800653c <prvCheckTasksWaitingTermination+0x58>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e1      	bne.n	80064ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000e50 	.word	0x20000e50
 8006538:	20000e7c 	.word	0x20000e7c
 800653c:	20000e64 	.word	0x20000e64

08006540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800654e:	2b00      	cmp	r3, #0
 8006550:	d108      	bne.n	8006564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f8ae 	bl	80076b8 <vPortFree>
				vPortFree( pxTCB );
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 f8ab 	bl	80076b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006562:	e019      	b.n	8006598 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800656a:	2b01      	cmp	r3, #1
 800656c:	d103      	bne.n	8006576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f8a2 	bl	80076b8 <vPortFree>
	}
 8006574:	e010      	b.n	8006598 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800657c:	2b02      	cmp	r3, #2
 800657e:	d00b      	beq.n	8006598 <prvDeleteTCB+0x58>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <prvDeleteTCB+0x54>
	}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a6:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <prvResetNextTaskUnblockTime+0x38>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065b0:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <prvResetNextTaskUnblockTime+0x3c>)
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065b8:	e008      	b.n	80065cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ba:	4b07      	ldr	r3, [pc, #28]	@ (80065d8 <prvResetNextTaskUnblockTime+0x38>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a04      	ldr	r2, [pc, #16]	@ (80065dc <prvResetNextTaskUnblockTime+0x3c>)
 80065ca:	6013      	str	r3, [r2, #0]
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000e34 	.word	0x20000e34
 80065dc:	20000e9c 	.word	0x20000e9c

080065e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <xTaskGetCurrentTaskHandle+0x1c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80065ec:	687b      	ldr	r3, [r7, #4]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200009a8 	.word	0x200009a8

08006600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006606:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <xTaskGetSchedulerState+0x34>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800660e:	2301      	movs	r3, #1
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	e008      	b.n	8006626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006614:	4b08      	ldr	r3, [pc, #32]	@ (8006638 <xTaskGetSchedulerState+0x38>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800661c:	2302      	movs	r3, #2
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	e001      	b.n	8006626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006626:	687b      	ldr	r3, [r7, #4]
	}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000e88 	.word	0x20000e88
 8006638:	20000ea4 	.word	0x20000ea4

0800663c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d051      	beq.n	80066f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006656:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <xTaskPriorityInherit+0xc4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665c:	429a      	cmp	r2, r3
 800665e:	d241      	bcs.n	80066e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	db06      	blt.n	8006676 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006668:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <xTaskPriorityInherit+0xc4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6959      	ldr	r1, [r3, #20]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <xTaskPriorityInherit+0xc8>)
 8006688:	4413      	add	r3, r2
 800668a:	4299      	cmp	r1, r3
 800668c:	d122      	bne.n	80066d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe f9b8 	bl	8004a08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006698:	4b19      	ldr	r3, [pc, #100]	@ (8006700 <xTaskPriorityInherit+0xc4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4b18      	ldr	r3, [pc, #96]	@ (8006708 <xTaskPriorityInherit+0xcc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <xTaskPriorityInherit+0x7a>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	4a15      	ldr	r2, [pc, #84]	@ (8006708 <xTaskPriorityInherit+0xcc>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a10      	ldr	r2, [pc, #64]	@ (8006704 <xTaskPriorityInherit+0xc8>)
 80066c4:	441a      	add	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7fe f93e 	bl	800494e <vListInsertEnd>
 80066d2:	e004      	b.n	80066de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <xTaskPriorityInherit+0xc4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e008      	b.n	80066f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <xTaskPriorityInherit+0xc4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d201      	bcs.n	80066f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066f6:	68fb      	ldr	r3, [r7, #12]
	}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200009a8 	.word	0x200009a8
 8006704:	200009ac 	.word	0x200009ac
 8006708:	20000e84 	.word	0x20000e84

0800670c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d058      	beq.n	80067d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006722:	4b2f      	ldr	r3, [pc, #188]	@ (80067e0 <xTaskPriorityDisinherit+0xd4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d00b      	beq.n	8006744 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60bb      	str	r3, [r7, #8]
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006768:	1e5a      	subs	r2, r3, #1
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006776:	429a      	cmp	r2, r3
 8006778:	d02c      	beq.n	80067d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677e:	2b00      	cmp	r3, #0
 8006780:	d128      	bne.n	80067d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe f93e 	bl	8004a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a4:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <xTaskPriorityDisinherit+0xd8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d903      	bls.n	80067b4 <xTaskPriorityDisinherit+0xa8>
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <xTaskPriorityDisinherit+0xd8>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <xTaskPriorityDisinherit+0xdc>)
 80067c2:	441a      	add	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7fe f8bf 	bl	800494e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067d4:	697b      	ldr	r3, [r7, #20]
	}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200009a8 	.word	0x200009a8
 80067e4:	20000e84 	.word	0x20000e84
 80067e8:	200009ac 	.word	0x200009ac

080067ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067fa:	2301      	movs	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d06c      	beq.n	80068de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60fb      	str	r3, [r7, #12]
}
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d902      	bls.n	8006834 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	e002      	b.n	800683a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006838:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	429a      	cmp	r2, r3
 8006842:	d04c      	beq.n	80068de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d147      	bne.n	80068de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800684e:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	429a      	cmp	r2, r3
 8006856:	d10b      	bne.n	8006870 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60bb      	str	r3, [r7, #8]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db04      	blt.n	800688e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	6959      	ldr	r1, [r3, #20]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a13      	ldr	r2, [pc, #76]	@ (80068ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800689e:	4413      	add	r3, r2
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d11c      	bne.n	80068de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe f8ad 	bl	8004a08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b2:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d903      	bls.n	80068c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	4a0c      	ldr	r2, [pc, #48]	@ (80068f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4a07      	ldr	r2, [pc, #28]	@ (80068ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80068d0:	441a      	add	r2, r3
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f7fe f838 	bl	800494e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068de:	bf00      	nop
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200009a8 	.word	0x200009a8
 80068ec:	200009ac 	.word	0x200009ac
 80068f0:	20000e84 	.word	0x20000e84

080068f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <pvTaskIncrementMutexHeldCount+0x24>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <pvTaskIncrementMutexHeldCount+0x24>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006906:	3201      	adds	r2, #1
 8006908:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800690a:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <pvTaskIncrementMutexHeldCount+0x24>)
 800690c:	681b      	ldr	r3, [r3, #0]
	}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200009a8 	.word	0x200009a8

0800691c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006926:	4b21      	ldr	r3, [pc, #132]	@ (80069ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692c:	4b20      	ldr	r3, [pc, #128]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe f868 	bl	8004a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d10a      	bne.n	8006956 <prvAddCurrentTaskToDelayedList+0x3a>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006946:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4819      	ldr	r0, [pc, #100]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006950:	f7fd fffd 	bl	800494e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006954:	e026      	b.n	80069a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800695e:	4b14      	ldr	r3, [pc, #80]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d209      	bcs.n	8006982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696e:	4b12      	ldr	r3, [pc, #72]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7fe f80b 	bl	8004996 <vListInsert>
}
 8006980:	e010      	b.n	80069a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006982:	4b0e      	ldr	r3, [pc, #56]	@ (80069bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fe f801 	bl	8004996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006994:	4b0a      	ldr	r3, [pc, #40]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	d202      	bcs.n	80069a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800699e:	4a08      	ldr	r2, [pc, #32]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6013      	str	r3, [r2, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000e80 	.word	0x20000e80
 80069b0:	200009a8 	.word	0x200009a8
 80069b4:	20000e68 	.word	0x20000e68
 80069b8:	20000e38 	.word	0x20000e38
 80069bc:	20000e34 	.word	0x20000e34
 80069c0:	20000e9c 	.word	0x20000e9c

080069c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	@ 0x28
 80069c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069ce:	f000 fb13 	bl	8006ff8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a48 <xTimerCreateTimerTask+0x84>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d021      	beq.n	8006a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069e2:	1d3a      	adds	r2, r7, #4
 80069e4:	f107 0108 	add.w	r1, r7, #8
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fd ff67 	bl	80048c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	9202      	str	r2, [sp, #8]
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	2302      	movs	r3, #2
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	460a      	mov	r2, r1
 8006a04:	4911      	ldr	r1, [pc, #68]	@ (8006a4c <xTimerCreateTimerTask+0x88>)
 8006a06:	4812      	ldr	r0, [pc, #72]	@ (8006a50 <xTimerCreateTimerTask+0x8c>)
 8006a08:	f7fe ffc0 	bl	800598c <xTaskCreateStatic>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4a11      	ldr	r2, [pc, #68]	@ (8006a54 <xTimerCreateTimerTask+0x90>)
 8006a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a12:	4b10      	ldr	r3, [pc, #64]	@ (8006a54 <xTimerCreateTimerTask+0x90>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	613b      	str	r3, [r7, #16]
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a3c:	697b      	ldr	r3, [r7, #20]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000ed8 	.word	0x20000ed8
 8006a4c:	0800a5e4 	.word	0x0800a5e4
 8006a50:	08006b91 	.word	0x08006b91
 8006a54:	20000edc 	.word	0x20000edc

08006a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	623b      	str	r3, [r7, #32]
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a88:	4b19      	ldr	r3, [pc, #100]	@ (8006af0 <xTimerGenericCommand+0x98>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02a      	beq.n	8006ae6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	dc18      	bgt.n	8006ad4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aa2:	f7ff fdad 	bl	8006600 <xTaskGetSchedulerState>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d109      	bne.n	8006ac0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006aac:	4b10      	ldr	r3, [pc, #64]	@ (8006af0 <xTimerGenericCommand+0x98>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	f107 0110 	add.w	r1, r7, #16
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab8:	f7fe f9ce 	bl	8004e58 <xQueueGenericSend>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006abe:	e012      	b.n	8006ae6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <xTimerGenericCommand+0x98>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f107 0110 	add.w	r1, r7, #16
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2200      	movs	r2, #0
 8006acc:	f7fe f9c4 	bl	8004e58 <xQueueGenericSend>
 8006ad0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ad2:	e008      	b.n	8006ae6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ad4:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <xTimerGenericCommand+0x98>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	f107 0110 	add.w	r1, r7, #16
 8006adc:	2300      	movs	r3, #0
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	f7fe fabc 	bl	800505c <xQueueGenericSendFromISR>
 8006ae4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3728      	adds	r7, #40	@ 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000ed8 	.word	0x20000ed8

08006af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afe:	4b23      	ldr	r3, [pc, #140]	@ (8006b8c <prvProcessExpiredTimer+0x98>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd ff7b 	bl	8004a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d023      	beq.n	8006b68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	18d1      	adds	r1, r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	f000 f8d5 	bl	8006cdc <prvInsertTimerInActiveList>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d020      	beq.n	8006b7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	2100      	movs	r1, #0
 8006b42:	6978      	ldr	r0, [r7, #20]
 8006b44:	f7ff ff88 	bl	8006a58 <xTimerGenericCommand>
 8006b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d114      	bne.n	8006b7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60fb      	str	r3, [r7, #12]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	6978      	ldr	r0, [r7, #20]
 8006b80:	4798      	blx	r3
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000ed0 	.word	0x20000ed0

08006b90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f859 	bl	8006c54 <prvGetNextExpireTime>
 8006ba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f805 	bl	8006bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bae:	f000 f8d7 	bl	8006d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bb2:	bf00      	nop
 8006bb4:	e7f0      	b.n	8006b98 <prvTimerTask+0x8>
	...

08006bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bc2:	f7ff f927 	bl	8005e14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f866 	bl	8006c9c <prvSampleTimeNow>
 8006bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d130      	bne.n	8006c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <prvProcessTimerOrBlockTask+0x3c>
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d806      	bhi.n	8006bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006be6:	f7ff f923 	bl	8005e30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff81 	bl	8006af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bf2:	e024      	b.n	8006c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bfa:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <prvProcessTimerOrBlockTask+0x90>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <prvProcessTimerOrBlockTask+0x50>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <prvProcessTimerOrBlockTask+0x52>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c4c <prvProcessTimerOrBlockTask+0x94>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f7fe fe83 	bl	8005924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c1e:	f7ff f907 	bl	8005e30 <xTaskResumeAll>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c28:	4b09      	ldr	r3, [pc, #36]	@ (8006c50 <prvProcessTimerOrBlockTask+0x98>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
}
 8006c38:	e001      	b.n	8006c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c3a:	f7ff f8f9 	bl	8005e30 <xTaskResumeAll>
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000ed4 	.word	0x20000ed4
 8006c4c:	20000ed8 	.word	0x20000ed8
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c98 <prvGetNextExpireTime+0x44>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <prvGetNextExpireTime+0x16>
 8006c66:	2201      	movs	r2, #1
 8006c68:	e000      	b.n	8006c6c <prvGetNextExpireTime+0x18>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d105      	bne.n	8006c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c78:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <prvGetNextExpireTime+0x44>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	e001      	b.n	8006c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20000ed0 	.word	0x20000ed0

08006c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ca4:	f7ff f962 	bl	8005f6c <xTaskGetTickCount>
 8006ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006caa:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <prvSampleTimeNow+0x3c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d205      	bcs.n	8006cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cb4:	f000 f93a 	bl	8006f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e002      	b.n	8006cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cc6:	4a04      	ldr	r2, [pc, #16]	@ (8006cd8 <prvSampleTimeNow+0x3c>)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000ee0 	.word	0x20000ee0

08006cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d812      	bhi.n	8006d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e01b      	b.n	8006d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d16:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <prvInsertTimerInActiveList+0x7c>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7fd fe38 	bl	8004996 <vListInsert>
 8006d26:	e012      	b.n	8006d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d206      	bcs.n	8006d3e <prvInsertTimerInActiveList+0x62>
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d302      	bcc.n	8006d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e007      	b.n	8006d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d3e:	4b07      	ldr	r3, [pc, #28]	@ (8006d5c <prvInsertTimerInActiveList+0x80>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7fd fe24 	bl	8004996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d4e:	697b      	ldr	r3, [r7, #20]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000ed4 	.word	0x20000ed4
 8006d5c:	20000ed0 	.word	0x20000ed0

08006d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	@ 0x38
 8006d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d66:	e0ce      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da19      	bge.n	8006da2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d6e:	1d3b      	adds	r3, r7, #4
 8006d70:	3304      	adds	r3, #4
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	61fb      	str	r3, [r7, #28]
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d98:	6850      	ldr	r0, [r2, #4]
 8006d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f2c0 80ae 	blt.w	8006f06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	3304      	adds	r3, #4
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fd fe24 	bl	8004a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ff6a 	bl	8006c9c <prvSampleTimeNow>
 8006dc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	f200 8097 	bhi.w	8006f00 <prvProcessReceivedCommands+0x1a0>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <prvProcessReceivedCommands+0x78>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e77 	.word	0x08006e77
 8006de8:	08006e8b 	.word	0x08006e8b
 8006dec:	08006ed7 	.word	0x08006ed7
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e01 	.word	0x08006e01
 8006df8:	08006e77 	.word	0x08006e77
 8006dfc:	08006e8b 	.word	0x08006e8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	18d1      	adds	r1, r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e20:	f7ff ff5c 	bl	8006cdc <prvInsertTimerInActiveList>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d06c      	beq.n	8006f04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d061      	beq.n	8006f04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	441a      	add	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e52:	f7ff fe01 	bl	8006a58 <xTimerGenericCommand>
 8006e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d152      	bne.n	8006f04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	61bb      	str	r3, [r7, #24]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e88:	e03d      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	617b      	str	r3, [r7, #20]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	18d1      	adds	r1, r2, r3
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed0:	f7ff ff04 	bl	8006cdc <prvInsertTimerInActiveList>
					break;
 8006ed4:	e017      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ee6:	f000 fbe7 	bl	80076b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006eea:	e00c      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006efe:	e002      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <prvProcessReceivedCommands+0x1a6>
					break;
 8006f04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <prvProcessReceivedCommands+0x1c8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1d39      	adds	r1, r7, #4
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe f942 	bl	8005198 <xQueueReceive>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f47f af26 	bne.w	8006d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3730      	adds	r7, #48	@ 0x30
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000ed8 	.word	0x20000ed8

08006f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f32:	e049      	b.n	8006fc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f34:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fd5b 	bl	8004a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d02f      	beq.n	8006fc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d90e      	bls.n	8006f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7fd fd00 	bl	8004996 <vListInsert>
 8006f96:	e017      	b.n	8006fc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff fd58 	bl	8006a58 <xTimerGenericCommand>
 8006fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	603b      	str	r3, [r7, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fc8:	4b09      	ldr	r3, [pc, #36]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1b0      	bne.n	8006f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fd2:	4b07      	ldr	r3, [pc, #28]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <prvSwitchTimerLists+0xc8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a04      	ldr	r2, [pc, #16]	@ (8006ff0 <prvSwitchTimerLists+0xc4>)
 8006fde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fe0:	4a04      	ldr	r2, [pc, #16]	@ (8006ff4 <prvSwitchTimerLists+0xc8>)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6013      	str	r3, [r2, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000ed0 	.word	0x20000ed0
 8006ff4:	20000ed4 	.word	0x20000ed4

08006ff8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ffe:	f000 f96b 	bl	80072d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007002:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d120      	bne.n	800704c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800700a:	4814      	ldr	r0, [pc, #80]	@ (800705c <prvCheckForValidListAndQueue+0x64>)
 800700c:	f7fd fc72 	bl	80048f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007010:	4813      	ldr	r0, [pc, #76]	@ (8007060 <prvCheckForValidListAndQueue+0x68>)
 8007012:	f7fd fc6f 	bl	80048f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007016:	4b13      	ldr	r3, [pc, #76]	@ (8007064 <prvCheckForValidListAndQueue+0x6c>)
 8007018:	4a10      	ldr	r2, [pc, #64]	@ (800705c <prvCheckForValidListAndQueue+0x64>)
 800701a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800701c:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <prvCheckForValidListAndQueue+0x70>)
 800701e:	4a10      	ldr	r2, [pc, #64]	@ (8007060 <prvCheckForValidListAndQueue+0x68>)
 8007020:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007022:	2300      	movs	r3, #0
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	4b11      	ldr	r3, [pc, #68]	@ (800706c <prvCheckForValidListAndQueue+0x74>)
 8007028:	4a11      	ldr	r2, [pc, #68]	@ (8007070 <prvCheckForValidListAndQueue+0x78>)
 800702a:	2110      	movs	r1, #16
 800702c:	200a      	movs	r0, #10
 800702e:	f7fd fd7f 	bl	8004b30 <xQueueGenericCreateStatic>
 8007032:	4603      	mov	r3, r0
 8007034:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007036:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007038:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <prvCheckForValidListAndQueue+0x60>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007040:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <prvCheckForValidListAndQueue+0x60>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	490b      	ldr	r1, [pc, #44]	@ (8007074 <prvCheckForValidListAndQueue+0x7c>)
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fc42 	bl	80058d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800704c:	f000 f976 	bl	800733c <vPortExitCritical>
}
 8007050:	bf00      	nop
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000ed8 	.word	0x20000ed8
 800705c:	20000ea8 	.word	0x20000ea8
 8007060:	20000ebc 	.word	0x20000ebc
 8007064:	20000ed0 	.word	0x20000ed0
 8007068:	20000ed4 	.word	0x20000ed4
 800706c:	20000f84 	.word	0x20000f84
 8007070:	20000ee4 	.word	0x20000ee4
 8007074:	0800a5ec 	.word	0x0800a5ec

08007078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b04      	subs	r3, #4
 8007088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3b04      	subs	r3, #4
 8007096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3b04      	subs	r3, #4
 80070a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070a8:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <pxPortInitialiseStack+0x64>)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3b14      	subs	r3, #20
 80070b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b04      	subs	r3, #4
 80070be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f06f 0202 	mvn.w	r2, #2
 80070c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3b20      	subs	r3, #32
 80070cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	080070e1 	.word	0x080070e1

080070e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070ea:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <prvTaskExitError+0x58>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d00b      	beq.n	800710c <prvTaskExitError+0x2c>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	e7fd      	b.n	8007108 <prvTaskExitError+0x28>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60bb      	str	r3, [r7, #8]
}
 800711e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007120:	bf00      	nop
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0fc      	beq.n	8007122 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c
 800713c:	00000000 	.word	0x00000000

08007140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	@ (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007168:	4808      	ldr	r0, [pc, #32]	@ (800718c <prvPortStartFirstTask+0x24>)
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f380 8808 	msr	MSP, r0
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8814 	msr	CONTROL, r0
 800717a:	b662      	cpsie	i
 800717c:	b661      	cpsie	f
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	df00      	svc	0
 8007188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800718a:	bf00      	nop
 800718c:	e000ed08 	.word	0xe000ed08

08007190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007196:	4b47      	ldr	r3, [pc, #284]	@ (80072b4 <xPortStartScheduler+0x124>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a47      	ldr	r2, [pc, #284]	@ (80072b8 <xPortStartScheduler+0x128>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d10b      	bne.n	80071b8 <xPortStartScheduler+0x28>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60fb      	str	r3, [r7, #12]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071b8:	4b3e      	ldr	r3, [pc, #248]	@ (80072b4 <xPortStartScheduler+0x124>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a3f      	ldr	r2, [pc, #252]	@ (80072bc <xPortStartScheduler+0x12c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10b      	bne.n	80071da <xPortStartScheduler+0x4a>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	613b      	str	r3, [r7, #16]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071da:	4b39      	ldr	r3, [pc, #228]	@ (80072c0 <xPortStartScheduler+0x130>)
 80071dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	22ff      	movs	r2, #255	@ 0xff
 80071ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b31      	ldr	r3, [pc, #196]	@ (80072c4 <xPortStartScheduler+0x134>)
 8007200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007202:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007204:	2207      	movs	r2, #7
 8007206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007208:	e009      	b.n	800721e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800720a:	4b2f      	ldr	r3, [pc, #188]	@ (80072c8 <xPortStartScheduler+0x138>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	4a2d      	ldr	r2, [pc, #180]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d0ef      	beq.n	800720a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800722a:	4b27      	ldr	r3, [pc, #156]	@ (80072c8 <xPortStartScheduler+0x138>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1c3 0307 	rsb	r3, r3, #7
 8007232:	2b04      	cmp	r3, #4
 8007234:	d00b      	beq.n	800724e <xPortStartScheduler+0xbe>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800724e:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007258:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <xPortStartScheduler+0x138>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007260:	4a19      	ldr	r2, [pc, #100]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800726c:	4b17      	ldr	r3, [pc, #92]	@ (80072cc <xPortStartScheduler+0x13c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <xPortStartScheduler+0x13c>)
 8007272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007278:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <xPortStartScheduler+0x13c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a13      	ldr	r2, [pc, #76]	@ (80072cc <xPortStartScheduler+0x13c>)
 800727e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007284:	f000 f8da 	bl	800743c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007288:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <xPortStartScheduler+0x140>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800728e:	f000 f8f9 	bl	8007484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <xPortStartScheduler+0x144>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a0f      	ldr	r2, [pc, #60]	@ (80072d4 <xPortStartScheduler+0x144>)
 8007298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800729c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800729e:	f7ff ff63 	bl	8007168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072a2:	f7fe ff2d 	bl	8006100 <vTaskSwitchContext>
	prvTaskExitError();
 80072a6:	f7ff ff1b 	bl	80070e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	410fc271 	.word	0x410fc271
 80072bc:	410fc270 	.word	0x410fc270
 80072c0:	e000e400 	.word	0xe000e400
 80072c4:	20000fd4 	.word	0x20000fd4
 80072c8:	20000fd8 	.word	0x20000fd8
 80072cc:	e000ed20 	.word	0xe000ed20
 80072d0:	2000000c 	.word	0x2000000c
 80072d4:	e000ef34 	.word	0xe000ef34

080072d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d110      	bne.n	8007326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007304:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <vPortEnterCritical+0x60>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <vPortEnterCritical+0x4e>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	603b      	str	r3, [r7, #0]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vPortEnterCritical+0x4a>
	}
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007342:	4b12      	ldr	r3, [pc, #72]	@ (800738c <vPortExitCritical+0x50>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <vPortExitCritical+0x26>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007362:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3b01      	subs	r3, #1
 8007368:	4a08      	ldr	r2, [pc, #32]	@ (800738c <vPortExitCritical+0x50>)
 800736a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800736c:	4b07      	ldr	r3, [pc, #28]	@ (800738c <vPortExitCritical+0x50>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <vPortExitCritical+0x44>
 8007374:	2300      	movs	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	2000000c 	.word	0x2000000c

08007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007390:	f3ef 8009 	mrs	r0, PSP
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <pxCurrentTCBConst>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	f01e 0f10 	tst.w	lr, #16
 80073a0:	bf08      	it	eq
 80073a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	6010      	str	r0, [r2, #0]
 80073ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073b4:	f380 8811 	msr	BASEPRI, r0
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f7fe fe9e 	bl	8006100 <vTaskSwitchContext>
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f380 8811 	msr	BASEPRI, r0
 80073cc:	bc09      	pop	{r0, r3}
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	6808      	ldr	r0, [r1, #0]
 80073d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d6:	f01e 0f10 	tst.w	lr, #16
 80073da:	bf08      	it	eq
 80073dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073e0:	f380 8809 	msr	PSP, r0
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst>:
 80073f0:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
}
 8007410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007412:	f7fe fdbb 	bl	8005f8c <xTaskIncrementTick>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800741c:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <xPortSysTickHandler+0x40>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f383 8811 	msr	BASEPRI, r3
}
 800742e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <vPortSetupTimerInterrupt+0x34>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <vPortSetupTimerInterrupt+0x38>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800744c:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <vPortSetupTimerInterrupt+0x3c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0a      	ldr	r2, [pc, #40]	@ (800747c <vPortSetupTimerInterrupt+0x40>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	099b      	lsrs	r3, r3, #6
 8007458:	4a09      	ldr	r2, [pc, #36]	@ (8007480 <vPortSetupTimerInterrupt+0x44>)
 800745a:	3b01      	subs	r3, #1
 800745c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800745e:	4b04      	ldr	r3, [pc, #16]	@ (8007470 <vPortSetupTimerInterrupt+0x34>)
 8007460:	2207      	movs	r2, #7
 8007462:	601a      	str	r2, [r3, #0]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	e000e010 	.word	0xe000e010
 8007474:	e000e018 	.word	0xe000e018
 8007478:	20000000 	.word	0x20000000
 800747c:	10624dd3 	.word	0x10624dd3
 8007480:	e000e014 	.word	0xe000e014

08007484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007494 <vPortEnableVFP+0x10>
 8007488:	6801      	ldr	r1, [r0, #0]
 800748a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800748e:	6001      	str	r1, [r0, #0]
 8007490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007492:	bf00      	nop
 8007494:	e000ed88 	.word	0xe000ed88

08007498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800749e:	f3ef 8305 	mrs	r3, IPSR
 80074a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b0f      	cmp	r3, #15
 80074a8:	d915      	bls.n	80074d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <vPortValidateInterruptPriority+0x74>)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074b4:	4b16      	ldr	r3, [pc, #88]	@ (8007510 <vPortValidateInterruptPriority+0x78>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	7afa      	ldrb	r2, [r7, #11]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d20b      	bcs.n	80074d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <vPortValidateInterruptPriority+0x7c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074de:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <vPortValidateInterruptPriority+0x80>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90b      	bls.n	80074fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <vPortValidateInterruptPriority+0x62>
	}
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	e000e3f0 	.word	0xe000e3f0
 8007510:	20000fd4 	.word	0x20000fd4
 8007514:	e000ed0c 	.word	0xe000ed0c
 8007518:	20000fd8 	.word	0x20000fd8

0800751c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007528:	f7fe fc74 	bl	8005e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800752c:	4b5c      	ldr	r3, [pc, #368]	@ (80076a0 <pvPortMalloc+0x184>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007534:	f000 f924 	bl	8007780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007538:	4b5a      	ldr	r3, [pc, #360]	@ (80076a4 <pvPortMalloc+0x188>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8095 	bne.w	8007670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01e      	beq.n	800758a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800754c:	2208      	movs	r2, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f023 0307 	bic.w	r3, r3, #7
 8007564:	3308      	adds	r3, #8
 8007566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <pvPortMalloc+0x6e>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	617b      	str	r3, [r7, #20]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d06f      	beq.n	8007670 <pvPortMalloc+0x154>
 8007590:	4b45      	ldr	r3, [pc, #276]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d86a      	bhi.n	8007670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800759a:	4b44      	ldr	r3, [pc, #272]	@ (80076ac <pvPortMalloc+0x190>)
 800759c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800759e:	4b43      	ldr	r3, [pc, #268]	@ (80076ac <pvPortMalloc+0x190>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a4:	e004      	b.n	80075b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d903      	bls.n	80075c2 <pvPortMalloc+0xa6>
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f1      	bne.n	80075a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075c2:	4b37      	ldr	r3, [pc, #220]	@ (80076a0 <pvPortMalloc+0x184>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d051      	beq.n	8007670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2208      	movs	r2, #8
 80075d2:	4413      	add	r3, r2
 80075d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	1ad2      	subs	r2, r2, r3
 80075e6:	2308      	movs	r3, #8
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d920      	bls.n	8007630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <pvPortMalloc+0xfc>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800762a:	69b8      	ldr	r0, [r7, #24]
 800762c:	f000 f90a 	bl	8007844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007630:	4b1d      	ldr	r3, [pc, #116]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <pvPortMalloc+0x18c>)
 800763c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800763e:	4b1a      	ldr	r3, [pc, #104]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <pvPortMalloc+0x194>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d203      	bcs.n	8007652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <pvPortMalloc+0x18c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <pvPortMalloc+0x194>)
 8007650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4b13      	ldr	r3, [pc, #76]	@ (80076a4 <pvPortMalloc+0x188>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	431a      	orrs	r2, r3
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <pvPortMalloc+0x198>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <pvPortMalloc+0x198>)
 800766e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007670:	f7fe fbde 	bl	8005e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <pvPortMalloc+0x17a>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <pvPortMalloc+0x176>
	return pvReturn;
 8007696:	69fb      	ldr	r3, [r7, #28]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3728      	adds	r7, #40	@ 0x28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20004be4 	.word	0x20004be4
 80076a4:	20004bf8 	.word	0x20004bf8
 80076a8:	20004be8 	.word	0x20004be8
 80076ac:	20004bdc 	.word	0x20004bdc
 80076b0:	20004bec 	.word	0x20004bec
 80076b4:	20004bf0 	.word	0x20004bf0

080076b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04f      	beq.n	800776a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ca:	2308      	movs	r3, #8
 80076cc:	425b      	negs	r3, r3
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <vPortFree+0xbc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4013      	ands	r3, r2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10b      	bne.n	80076fe <vPortFree+0x46>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <vPortFree+0x66>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	4b14      	ldr	r3, [pc, #80]	@ (8007774 <vPortFree+0xbc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4013      	ands	r3, r2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11a      	bne.n	800776a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b0e      	ldr	r3, [pc, #56]	@ (8007774 <vPortFree+0xbc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	43db      	mvns	r3, r3
 800773e:	401a      	ands	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007744:	f7fe fb66 	bl	8005e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <vPortFree+0xc0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4413      	add	r3, r2
 8007752:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <vPortFree+0xc0>)
 8007754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f000 f874 	bl	8007844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800775c:	4b07      	ldr	r3, [pc, #28]	@ (800777c <vPortFree+0xc4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a06      	ldr	r2, [pc, #24]	@ (800777c <vPortFree+0xc4>)
 8007764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007766:	f7fe fb63 	bl	8005e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800776a:	bf00      	nop
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20004bf8 	.word	0x20004bf8
 8007778:	20004be8 	.word	0x20004be8
 800777c:	20004bf4 	.word	0x20004bf4

08007780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800778a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800778c:	4b27      	ldr	r3, [pc, #156]	@ (800782c <prvHeapInit+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00c      	beq.n	80077b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3307      	adds	r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <prvHeapInit+0xac>)
 80077b0:	4413      	add	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007830 <prvHeapInit+0xb0>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077be:	4b1c      	ldr	r3, [pc, #112]	@ (8007830 <prvHeapInit+0xb0>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077cc:	2208      	movs	r2, #8
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a15      	ldr	r2, [pc, #84]	@ (8007834 <prvHeapInit+0xb4>)
 80077e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077e2:	4b14      	ldr	r3, [pc, #80]	@ (8007834 <prvHeapInit+0xb4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <prvHeapInit+0xb4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007800:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <prvHeapInit+0xb4>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4a0a      	ldr	r2, [pc, #40]	@ (8007838 <prvHeapInit+0xb8>)
 800780e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4a09      	ldr	r2, [pc, #36]	@ (800783c <prvHeapInit+0xbc>)
 8007816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007818:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <prvHeapInit+0xc0>)
 800781a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800781e:	601a      	str	r2, [r3, #0]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000fdc 	.word	0x20000fdc
 8007830:	20004bdc 	.word	0x20004bdc
 8007834:	20004be4 	.word	0x20004be4
 8007838:	20004bec 	.word	0x20004bec
 800783c:	20004be8 	.word	0x20004be8
 8007840:	20004bf8 	.word	0x20004bf8

08007844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800784c:	4b28      	ldr	r3, [pc, #160]	@ (80078f0 <prvInsertBlockIntoFreeList+0xac>)
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e002      	b.n	8007858 <prvInsertBlockIntoFreeList+0x14>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	429a      	cmp	r2, r3
 8007860:	d8f7      	bhi.n	8007852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d108      	bne.n	8007886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d118      	bne.n	80078cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <prvInsertBlockIntoFreeList+0xb0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d00d      	beq.n	80078c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e008      	b.n	80078d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <prvInsertBlockIntoFreeList+0xb0>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e003      	b.n	80078d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d002      	beq.n	80078e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20004bdc 	.word	0x20004bdc
 80078f4:	20004be4 	.word	0x20004be4

080078f8 <__cvt>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	ec57 6b10 	vmov	r6, r7, d0
 8007900:	2f00      	cmp	r7, #0
 8007902:	460c      	mov	r4, r1
 8007904:	4619      	mov	r1, r3
 8007906:	463b      	mov	r3, r7
 8007908:	bfbb      	ittet	lt
 800790a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800790e:	461f      	movlt	r7, r3
 8007910:	2300      	movge	r3, #0
 8007912:	232d      	movlt	r3, #45	@ 0x2d
 8007914:	700b      	strb	r3, [r1, #0]
 8007916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800791c:	4691      	mov	r9, r2
 800791e:	f023 0820 	bic.w	r8, r3, #32
 8007922:	bfbc      	itt	lt
 8007924:	4632      	movlt	r2, r6
 8007926:	4616      	movlt	r6, r2
 8007928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800792c:	d005      	beq.n	800793a <__cvt+0x42>
 800792e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007932:	d100      	bne.n	8007936 <__cvt+0x3e>
 8007934:	3401      	adds	r4, #1
 8007936:	2102      	movs	r1, #2
 8007938:	e000      	b.n	800793c <__cvt+0x44>
 800793a:	2103      	movs	r1, #3
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	ab02      	add	r3, sp, #8
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	ec47 6b10 	vmov	d0, r6, r7
 8007948:	4653      	mov	r3, sl
 800794a:	4622      	mov	r2, r4
 800794c:	f000 fe68 	bl	8008620 <_dtoa_r>
 8007950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007954:	4605      	mov	r5, r0
 8007956:	d119      	bne.n	800798c <__cvt+0x94>
 8007958:	f019 0f01 	tst.w	r9, #1
 800795c:	d00e      	beq.n	800797c <__cvt+0x84>
 800795e:	eb00 0904 	add.w	r9, r0, r4
 8007962:	2200      	movs	r2, #0
 8007964:	2300      	movs	r3, #0
 8007966:	4630      	mov	r0, r6
 8007968:	4639      	mov	r1, r7
 800796a:	f7f9 f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800796e:	b108      	cbz	r0, 8007974 <__cvt+0x7c>
 8007970:	f8cd 900c 	str.w	r9, [sp, #12]
 8007974:	2230      	movs	r2, #48	@ 0x30
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	454b      	cmp	r3, r9
 800797a:	d31e      	bcc.n	80079ba <__cvt+0xc2>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007980:	1b5b      	subs	r3, r3, r5
 8007982:	4628      	mov	r0, r5
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	b004      	add	sp, #16
 8007988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007990:	eb00 0904 	add.w	r9, r0, r4
 8007994:	d1e5      	bne.n	8007962 <__cvt+0x6a>
 8007996:	7803      	ldrb	r3, [r0, #0]
 8007998:	2b30      	cmp	r3, #48	@ 0x30
 800799a:	d10a      	bne.n	80079b2 <__cvt+0xba>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f9 f898 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a8:	b918      	cbnz	r0, 80079b2 <__cvt+0xba>
 80079aa:	f1c4 0401 	rsb	r4, r4, #1
 80079ae:	f8ca 4000 	str.w	r4, [sl]
 80079b2:	f8da 3000 	ldr.w	r3, [sl]
 80079b6:	4499      	add	r9, r3
 80079b8:	e7d3      	b.n	8007962 <__cvt+0x6a>
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	9103      	str	r1, [sp, #12]
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	e7d9      	b.n	8007976 <__cvt+0x7e>

080079c2 <__exponent>:
 80079c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c4:	2900      	cmp	r1, #0
 80079c6:	bfba      	itte	lt
 80079c8:	4249      	neglt	r1, r1
 80079ca:	232d      	movlt	r3, #45	@ 0x2d
 80079cc:	232b      	movge	r3, #43	@ 0x2b
 80079ce:	2909      	cmp	r1, #9
 80079d0:	7002      	strb	r2, [r0, #0]
 80079d2:	7043      	strb	r3, [r0, #1]
 80079d4:	dd29      	ble.n	8007a2a <__exponent+0x68>
 80079d6:	f10d 0307 	add.w	r3, sp, #7
 80079da:	461d      	mov	r5, r3
 80079dc:	270a      	movs	r7, #10
 80079de:	461a      	mov	r2, r3
 80079e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80079e4:	fb07 1416 	mls	r4, r7, r6, r1
 80079e8:	3430      	adds	r4, #48	@ 0x30
 80079ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079ee:	460c      	mov	r4, r1
 80079f0:	2c63      	cmp	r4, #99	@ 0x63
 80079f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80079f6:	4631      	mov	r1, r6
 80079f8:	dcf1      	bgt.n	80079de <__exponent+0x1c>
 80079fa:	3130      	adds	r1, #48	@ 0x30
 80079fc:	1e94      	subs	r4, r2, #2
 80079fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a02:	1c41      	adds	r1, r0, #1
 8007a04:	4623      	mov	r3, r4
 8007a06:	42ab      	cmp	r3, r5
 8007a08:	d30a      	bcc.n	8007a20 <__exponent+0x5e>
 8007a0a:	f10d 0309 	add.w	r3, sp, #9
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	42ac      	cmp	r4, r5
 8007a12:	bf88      	it	hi
 8007a14:	2300      	movhi	r3, #0
 8007a16:	3302      	adds	r3, #2
 8007a18:	4403      	add	r3, r0
 8007a1a:	1a18      	subs	r0, r3, r0
 8007a1c:	b003      	add	sp, #12
 8007a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a28:	e7ed      	b.n	8007a06 <__exponent+0x44>
 8007a2a:	2330      	movs	r3, #48	@ 0x30
 8007a2c:	3130      	adds	r1, #48	@ 0x30
 8007a2e:	7083      	strb	r3, [r0, #2]
 8007a30:	70c1      	strb	r1, [r0, #3]
 8007a32:	1d03      	adds	r3, r0, #4
 8007a34:	e7f1      	b.n	8007a1a <__exponent+0x58>
	...

08007a38 <_printf_float>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	b08d      	sub	sp, #52	@ 0x34
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a44:	4616      	mov	r6, r2
 8007a46:	461f      	mov	r7, r3
 8007a48:	4605      	mov	r5, r0
 8007a4a:	f000 fcdb 	bl	8008404 <_localeconv_r>
 8007a4e:	6803      	ldr	r3, [r0, #0]
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7f8 fc14 	bl	8000280 <strlen>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a60:	9005      	str	r0, [sp, #20]
 8007a62:	3307      	adds	r3, #7
 8007a64:	f023 0307 	bic.w	r3, r3, #7
 8007a68:	f103 0208 	add.w	r2, r3, #8
 8007a6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a70:	f8d4 b000 	ldr.w	fp, [r4]
 8007a74:	f8c8 2000 	str.w	r2, [r8]
 8007a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a80:	9307      	str	r3, [sp, #28]
 8007a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8007d00 <_printf_float+0x2c8>)
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295
 8007a94:	f7f9 f852 	bl	8000b3c <__aeabi_dcmpun>
 8007a98:	bb70      	cbnz	r0, 8007af8 <_printf_float+0xc0>
 8007a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a9e:	4b98      	ldr	r3, [pc, #608]	@ (8007d00 <_printf_float+0x2c8>)
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	f7f9 f82c 	bl	8000b00 <__aeabi_dcmple>
 8007aa8:	bb30      	cbnz	r0, 8007af8 <_printf_float+0xc0>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2300      	movs	r3, #0
 8007aae:	4640      	mov	r0, r8
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	f7f9 f81b 	bl	8000aec <__aeabi_dcmplt>
 8007ab6:	b110      	cbz	r0, 8007abe <_printf_float+0x86>
 8007ab8:	232d      	movs	r3, #45	@ 0x2d
 8007aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007abe:	4a91      	ldr	r2, [pc, #580]	@ (8007d04 <_printf_float+0x2cc>)
 8007ac0:	4b91      	ldr	r3, [pc, #580]	@ (8007d08 <_printf_float+0x2d0>)
 8007ac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ac6:	bf8c      	ite	hi
 8007ac8:	4690      	movhi	r8, r2
 8007aca:	4698      	movls	r8, r3
 8007acc:	2303      	movs	r3, #3
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	f02b 0304 	bic.w	r3, fp, #4
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	f04f 0900 	mov.w	r9, #0
 8007ada:	9700      	str	r7, [sp, #0]
 8007adc:	4633      	mov	r3, r6
 8007ade:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 f9d2 	bl	8007e8c <_printf_common>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f040 808d 	bne.w	8007c08 <_printf_float+0x1d0>
 8007aee:	f04f 30ff 	mov.w	r0, #4294967295
 8007af2:	b00d      	add	sp, #52	@ 0x34
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	4640      	mov	r0, r8
 8007afe:	4649      	mov	r1, r9
 8007b00:	f7f9 f81c 	bl	8000b3c <__aeabi_dcmpun>
 8007b04:	b140      	cbz	r0, 8007b18 <_printf_float+0xe0>
 8007b06:	464b      	mov	r3, r9
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfbc      	itt	lt
 8007b0c:	232d      	movlt	r3, #45	@ 0x2d
 8007b0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b12:	4a7e      	ldr	r2, [pc, #504]	@ (8007d0c <_printf_float+0x2d4>)
 8007b14:	4b7e      	ldr	r3, [pc, #504]	@ (8007d10 <_printf_float+0x2d8>)
 8007b16:	e7d4      	b.n	8007ac2 <_printf_float+0x8a>
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b1e:	9206      	str	r2, [sp, #24]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	d13b      	bne.n	8007b9c <_printf_float+0x164>
 8007b24:	2306      	movs	r3, #6
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b38:	ab09      	add	r3, sp, #36	@ 0x24
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	6861      	ldr	r1, [r4, #4]
 8007b3e:	ec49 8b10 	vmov	d0, r8, r9
 8007b42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7ff fed6 	bl	80078f8 <__cvt>
 8007b4c:	9b06      	ldr	r3, [sp, #24]
 8007b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b50:	2b47      	cmp	r3, #71	@ 0x47
 8007b52:	4680      	mov	r8, r0
 8007b54:	d129      	bne.n	8007baa <_printf_float+0x172>
 8007b56:	1cc8      	adds	r0, r1, #3
 8007b58:	db02      	blt.n	8007b60 <_printf_float+0x128>
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	dd41      	ble.n	8007be4 <_printf_float+0x1ac>
 8007b60:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b64:	fa5f fa8a 	uxtb.w	sl, sl
 8007b68:	3901      	subs	r1, #1
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b70:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b72:	f7ff ff26 	bl	80079c2 <__exponent>
 8007b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b78:	1813      	adds	r3, r2, r0
 8007b7a:	2a01      	cmp	r2, #1
 8007b7c:	4681      	mov	r9, r0
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	dc02      	bgt.n	8007b88 <_printf_float+0x150>
 8007b82:	6822      	ldr	r2, [r4, #0]
 8007b84:	07d2      	lsls	r2, r2, #31
 8007b86:	d501      	bpl.n	8007b8c <_printf_float+0x154>
 8007b88:	3301      	adds	r3, #1
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0a2      	beq.n	8007ada <_printf_float+0xa2>
 8007b94:	232d      	movs	r3, #45	@ 0x2d
 8007b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b9a:	e79e      	b.n	8007ada <_printf_float+0xa2>
 8007b9c:	9a06      	ldr	r2, [sp, #24]
 8007b9e:	2a47      	cmp	r2, #71	@ 0x47
 8007ba0:	d1c2      	bne.n	8007b28 <_printf_float+0xf0>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1c0      	bne.n	8007b28 <_printf_float+0xf0>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e7bd      	b.n	8007b26 <_printf_float+0xee>
 8007baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bae:	d9db      	bls.n	8007b68 <_printf_float+0x130>
 8007bb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007bb4:	d118      	bne.n	8007be8 <_printf_float+0x1b0>
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	dd0b      	ble.n	8007bd4 <_printf_float+0x19c>
 8007bbc:	6121      	str	r1, [r4, #16]
 8007bbe:	b913      	cbnz	r3, 8007bc6 <_printf_float+0x18e>
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	07d0      	lsls	r0, r2, #31
 8007bc4:	d502      	bpl.n	8007bcc <_printf_float+0x194>
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	440b      	add	r3, r1
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bce:	f04f 0900 	mov.w	r9, #0
 8007bd2:	e7db      	b.n	8007b8c <_printf_float+0x154>
 8007bd4:	b913      	cbnz	r3, 8007bdc <_printf_float+0x1a4>
 8007bd6:	6822      	ldr	r2, [r4, #0]
 8007bd8:	07d2      	lsls	r2, r2, #31
 8007bda:	d501      	bpl.n	8007be0 <_printf_float+0x1a8>
 8007bdc:	3302      	adds	r3, #2
 8007bde:	e7f4      	b.n	8007bca <_printf_float+0x192>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7f2      	b.n	8007bca <_printf_float+0x192>
 8007be4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bea:	4299      	cmp	r1, r3
 8007bec:	db05      	blt.n	8007bfa <_printf_float+0x1c2>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	6121      	str	r1, [r4, #16]
 8007bf2:	07d8      	lsls	r0, r3, #31
 8007bf4:	d5ea      	bpl.n	8007bcc <_printf_float+0x194>
 8007bf6:	1c4b      	adds	r3, r1, #1
 8007bf8:	e7e7      	b.n	8007bca <_printf_float+0x192>
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	bfd4      	ite	le
 8007bfe:	f1c1 0202 	rsble	r2, r1, #2
 8007c02:	2201      	movgt	r2, #1
 8007c04:	4413      	add	r3, r2
 8007c06:	e7e0      	b.n	8007bca <_printf_float+0x192>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	055a      	lsls	r2, r3, #21
 8007c0c:	d407      	bmi.n	8007c1e <_printf_float+0x1e6>
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	4642      	mov	r2, r8
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d12b      	bne.n	8007c74 <_printf_float+0x23c>
 8007c1c:	e767      	b.n	8007aee <_printf_float+0xb6>
 8007c1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c22:	f240 80dd 	bls.w	8007de0 <_printf_float+0x3a8>
 8007c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f7f8 ff53 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d033      	beq.n	8007c9e <_printf_float+0x266>
 8007c36:	4a37      	ldr	r2, [pc, #220]	@ (8007d14 <_printf_float+0x2dc>)
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	f43f af54 	beq.w	8007aee <_printf_float+0xb6>
 8007c46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c4a:	4543      	cmp	r3, r8
 8007c4c:	db02      	blt.n	8007c54 <_printf_float+0x21c>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	07d8      	lsls	r0, r3, #31
 8007c52:	d50f      	bpl.n	8007c74 <_printf_float+0x23c>
 8007c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f af45 	beq.w	8007aee <_printf_float+0xb6>
 8007c64:	f04f 0900 	mov.w	r9, #0
 8007c68:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c6c:	f104 0a1a 	add.w	sl, r4, #26
 8007c70:	45c8      	cmp	r8, r9
 8007c72:	dc09      	bgt.n	8007c88 <_printf_float+0x250>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	079b      	lsls	r3, r3, #30
 8007c78:	f100 8103 	bmi.w	8007e82 <_printf_float+0x44a>
 8007c7c:	68e0      	ldr	r0, [r4, #12]
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c80:	4298      	cmp	r0, r3
 8007c82:	bfb8      	it	lt
 8007c84:	4618      	movlt	r0, r3
 8007c86:	e734      	b.n	8007af2 <_printf_float+0xba>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f af2b 	beq.w	8007aee <_printf_float+0xb6>
 8007c98:	f109 0901 	add.w	r9, r9, #1
 8007c9c:	e7e8      	b.n	8007c70 <_printf_float+0x238>
 8007c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	dc39      	bgt.n	8007d18 <_printf_float+0x2e0>
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d14 <_printf_float+0x2dc>)
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4628      	mov	r0, r5
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	f43f af1d 	beq.w	8007aee <_printf_float+0xb6>
 8007cb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007cb8:	ea59 0303 	orrs.w	r3, r9, r3
 8007cbc:	d102      	bne.n	8007cc4 <_printf_float+0x28c>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	07d9      	lsls	r1, r3, #31
 8007cc2:	d5d7      	bpl.n	8007c74 <_printf_float+0x23c>
 8007cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f af0d 	beq.w	8007aee <_printf_float+0xb6>
 8007cd4:	f04f 0a00 	mov.w	sl, #0
 8007cd8:	f104 0b1a 	add.w	fp, r4, #26
 8007cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cde:	425b      	negs	r3, r3
 8007ce0:	4553      	cmp	r3, sl
 8007ce2:	dc01      	bgt.n	8007ce8 <_printf_float+0x2b0>
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	e793      	b.n	8007c10 <_printf_float+0x1d8>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	465a      	mov	r2, fp
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f aefb 	beq.w	8007aee <_printf_float+0xb6>
 8007cf8:	f10a 0a01 	add.w	sl, sl, #1
 8007cfc:	e7ee      	b.n	8007cdc <_printf_float+0x2a4>
 8007cfe:	bf00      	nop
 8007d00:	7fefffff 	.word	0x7fefffff
 8007d04:	0800a634 	.word	0x0800a634
 8007d08:	0800a630 	.word	0x0800a630
 8007d0c:	0800a63c 	.word	0x0800a63c
 8007d10:	0800a638 	.word	0x0800a638
 8007d14:	0800a640 	.word	0x0800a640
 8007d18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d1e:	4553      	cmp	r3, sl
 8007d20:	bfa8      	it	ge
 8007d22:	4653      	movge	r3, sl
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	4699      	mov	r9, r3
 8007d28:	dc36      	bgt.n	8007d98 <_printf_float+0x360>
 8007d2a:	f04f 0b00 	mov.w	fp, #0
 8007d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d32:	f104 021a 	add.w	r2, r4, #26
 8007d36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d38:	9306      	str	r3, [sp, #24]
 8007d3a:	eba3 0309 	sub.w	r3, r3, r9
 8007d3e:	455b      	cmp	r3, fp
 8007d40:	dc31      	bgt.n	8007da6 <_printf_float+0x36e>
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	459a      	cmp	sl, r3
 8007d46:	dc3a      	bgt.n	8007dbe <_printf_float+0x386>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	07da      	lsls	r2, r3, #31
 8007d4c:	d437      	bmi.n	8007dbe <_printf_float+0x386>
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	ebaa 0903 	sub.w	r9, sl, r3
 8007d54:	9b06      	ldr	r3, [sp, #24]
 8007d56:	ebaa 0303 	sub.w	r3, sl, r3
 8007d5a:	4599      	cmp	r9, r3
 8007d5c:	bfa8      	it	ge
 8007d5e:	4699      	movge	r9, r3
 8007d60:	f1b9 0f00 	cmp.w	r9, #0
 8007d64:	dc33      	bgt.n	8007dce <_printf_float+0x396>
 8007d66:	f04f 0800 	mov.w	r8, #0
 8007d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d6e:	f104 0b1a 	add.w	fp, r4, #26
 8007d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d74:	ebaa 0303 	sub.w	r3, sl, r3
 8007d78:	eba3 0309 	sub.w	r3, r3, r9
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	f77f af79 	ble.w	8007c74 <_printf_float+0x23c>
 8007d82:	2301      	movs	r3, #1
 8007d84:	465a      	mov	r2, fp
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f43f aeae 	beq.w	8007aee <_printf_float+0xb6>
 8007d92:	f108 0801 	add.w	r8, r8, #1
 8007d96:	e7ec      	b.n	8007d72 <_printf_float+0x33a>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	d1c2      	bne.n	8007d2a <_printf_float+0x2f2>
 8007da4:	e6a3      	b.n	8007aee <_printf_float+0xb6>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4631      	mov	r1, r6
 8007daa:	4628      	mov	r0, r5
 8007dac:	9206      	str	r2, [sp, #24]
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	f43f ae9c 	beq.w	8007aee <_printf_float+0xb6>
 8007db6:	9a06      	ldr	r2, [sp, #24]
 8007db8:	f10b 0b01 	add.w	fp, fp, #1
 8007dbc:	e7bb      	b.n	8007d36 <_printf_float+0x2fe>
 8007dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d1c0      	bne.n	8007d4e <_printf_float+0x316>
 8007dcc:	e68f      	b.n	8007aee <_printf_float+0xb6>
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	4442      	add	r2, r8
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d1c3      	bne.n	8007d66 <_printf_float+0x32e>
 8007dde:	e686      	b.n	8007aee <_printf_float+0xb6>
 8007de0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007de4:	f1ba 0f01 	cmp.w	sl, #1
 8007de8:	dc01      	bgt.n	8007dee <_printf_float+0x3b6>
 8007dea:	07db      	lsls	r3, r3, #31
 8007dec:	d536      	bpl.n	8007e5c <_printf_float+0x424>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4642      	mov	r2, r8
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f43f ae78 	beq.w	8007aee <_printf_float+0xb6>
 8007dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f43f ae70 	beq.w	8007aee <_printf_float+0xb6>
 8007e0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e12:	2200      	movs	r2, #0
 8007e14:	2300      	movs	r3, #0
 8007e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e1a:	f7f8 fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e1e:	b9c0      	cbnz	r0, 8007e52 <_printf_float+0x41a>
 8007e20:	4653      	mov	r3, sl
 8007e22:	f108 0201 	add.w	r2, r8, #1
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d10c      	bne.n	8007e4a <_printf_float+0x412>
 8007e30:	e65d      	b.n	8007aee <_printf_float+0xb6>
 8007e32:	2301      	movs	r3, #1
 8007e34:	465a      	mov	r2, fp
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f ae56 	beq.w	8007aee <_printf_float+0xb6>
 8007e42:	f108 0801 	add.w	r8, r8, #1
 8007e46:	45d0      	cmp	r8, sl
 8007e48:	dbf3      	blt.n	8007e32 <_printf_float+0x3fa>
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e50:	e6df      	b.n	8007c12 <_printf_float+0x1da>
 8007e52:	f04f 0800 	mov.w	r8, #0
 8007e56:	f104 0b1a 	add.w	fp, r4, #26
 8007e5a:	e7f4      	b.n	8007e46 <_printf_float+0x40e>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4642      	mov	r2, r8
 8007e60:	e7e1      	b.n	8007e26 <_printf_float+0x3ee>
 8007e62:	2301      	movs	r3, #1
 8007e64:	464a      	mov	r2, r9
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	f43f ae3e 	beq.w	8007aee <_printf_float+0xb6>
 8007e72:	f108 0801 	add.w	r8, r8, #1
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	4543      	cmp	r3, r8
 8007e7e:	dcf0      	bgt.n	8007e62 <_printf_float+0x42a>
 8007e80:	e6fc      	b.n	8007c7c <_printf_float+0x244>
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	f104 0919 	add.w	r9, r4, #25
 8007e8a:	e7f4      	b.n	8007e76 <_printf_float+0x43e>

08007e8c <_printf_common>:
 8007e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	4616      	mov	r6, r2
 8007e92:	4698      	mov	r8, r3
 8007e94:	688a      	ldr	r2, [r1, #8]
 8007e96:	690b      	ldr	r3, [r1, #16]
 8007e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	bfb8      	it	lt
 8007ea0:	4613      	movlt	r3, r2
 8007ea2:	6033      	str	r3, [r6, #0]
 8007ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	b10a      	cbz	r2, 8007eb2 <_printf_common+0x26>
 8007eae:	3301      	adds	r3, #1
 8007eb0:	6033      	str	r3, [r6, #0]
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	0699      	lsls	r1, r3, #26
 8007eb6:	bf42      	ittt	mi
 8007eb8:	6833      	ldrmi	r3, [r6, #0]
 8007eba:	3302      	addmi	r3, #2
 8007ebc:	6033      	strmi	r3, [r6, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	f015 0506 	ands.w	r5, r5, #6
 8007ec4:	d106      	bne.n	8007ed4 <_printf_common+0x48>
 8007ec6:	f104 0a19 	add.w	sl, r4, #25
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	6832      	ldr	r2, [r6, #0]
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dc26      	bgt.n	8007f22 <_printf_common+0x96>
 8007ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	3b00      	subs	r3, #0
 8007edc:	bf18      	it	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	0692      	lsls	r2, r2, #26
 8007ee2:	d42b      	bmi.n	8007f3c <_printf_common+0xb0>
 8007ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ee8:	4641      	mov	r1, r8
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c8      	blx	r9
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d01e      	beq.n	8007f30 <_printf_common+0xa4>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	6922      	ldr	r2, [r4, #16]
 8007ef6:	f003 0306 	and.w	r3, r3, #6
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	bf02      	ittt	eq
 8007efe:	68e5      	ldreq	r5, [r4, #12]
 8007f00:	6833      	ldreq	r3, [r6, #0]
 8007f02:	1aed      	subeq	r5, r5, r3
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	bf0c      	ite	eq
 8007f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f0c:	2500      	movne	r5, #0
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bfc4      	itt	gt
 8007f12:	1a9b      	subgt	r3, r3, r2
 8007f14:	18ed      	addgt	r5, r5, r3
 8007f16:	2600      	movs	r6, #0
 8007f18:	341a      	adds	r4, #26
 8007f1a:	42b5      	cmp	r5, r6
 8007f1c:	d11a      	bne.n	8007f54 <_printf_common+0xc8>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	e008      	b.n	8007f34 <_printf_common+0xa8>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4652      	mov	r2, sl
 8007f26:	4641      	mov	r1, r8
 8007f28:	4638      	mov	r0, r7
 8007f2a:	47c8      	blx	r9
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d103      	bne.n	8007f38 <_printf_common+0xac>
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	3501      	adds	r5, #1
 8007f3a:	e7c6      	b.n	8007eca <_printf_common+0x3e>
 8007f3c:	18e1      	adds	r1, r4, r3
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	2030      	movs	r0, #48	@ 0x30
 8007f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f46:	4422      	add	r2, r4
 8007f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f50:	3302      	adds	r3, #2
 8007f52:	e7c7      	b.n	8007ee4 <_printf_common+0x58>
 8007f54:	2301      	movs	r3, #1
 8007f56:	4622      	mov	r2, r4
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	47c8      	blx	r9
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d0e6      	beq.n	8007f30 <_printf_common+0xa4>
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7d9      	b.n	8007f1a <_printf_common+0x8e>
	...

08007f68 <_printf_i>:
 8007f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	7e0f      	ldrb	r7, [r1, #24]
 8007f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f70:	2f78      	cmp	r7, #120	@ 0x78
 8007f72:	4691      	mov	r9, r2
 8007f74:	4680      	mov	r8, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	469a      	mov	sl, r3
 8007f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f7e:	d807      	bhi.n	8007f90 <_printf_i+0x28>
 8007f80:	2f62      	cmp	r7, #98	@ 0x62
 8007f82:	d80a      	bhi.n	8007f9a <_printf_i+0x32>
 8007f84:	2f00      	cmp	r7, #0
 8007f86:	f000 80d1 	beq.w	800812c <_printf_i+0x1c4>
 8007f8a:	2f58      	cmp	r7, #88	@ 0x58
 8007f8c:	f000 80b8 	beq.w	8008100 <_printf_i+0x198>
 8007f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f98:	e03a      	b.n	8008010 <_printf_i+0xa8>
 8007f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f9e:	2b15      	cmp	r3, #21
 8007fa0:	d8f6      	bhi.n	8007f90 <_printf_i+0x28>
 8007fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8007fa8 <_printf_i+0x40>)
 8007fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fa8:	08008001 	.word	0x08008001
 8007fac:	08008015 	.word	0x08008015
 8007fb0:	08007f91 	.word	0x08007f91
 8007fb4:	08007f91 	.word	0x08007f91
 8007fb8:	08007f91 	.word	0x08007f91
 8007fbc:	08007f91 	.word	0x08007f91
 8007fc0:	08008015 	.word	0x08008015
 8007fc4:	08007f91 	.word	0x08007f91
 8007fc8:	08007f91 	.word	0x08007f91
 8007fcc:	08007f91 	.word	0x08007f91
 8007fd0:	08007f91 	.word	0x08007f91
 8007fd4:	08008113 	.word	0x08008113
 8007fd8:	0800803f 	.word	0x0800803f
 8007fdc:	080080cd 	.word	0x080080cd
 8007fe0:	08007f91 	.word	0x08007f91
 8007fe4:	08007f91 	.word	0x08007f91
 8007fe8:	08008135 	.word	0x08008135
 8007fec:	08007f91 	.word	0x08007f91
 8007ff0:	0800803f 	.word	0x0800803f
 8007ff4:	08007f91 	.word	0x08007f91
 8007ff8:	08007f91 	.word	0x08007f91
 8007ffc:	080080d5 	.word	0x080080d5
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	1d1a      	adds	r2, r3, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6032      	str	r2, [r6, #0]
 8008008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800800c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008010:	2301      	movs	r3, #1
 8008012:	e09c      	b.n	800814e <_printf_i+0x1e6>
 8008014:	6833      	ldr	r3, [r6, #0]
 8008016:	6820      	ldr	r0, [r4, #0]
 8008018:	1d19      	adds	r1, r3, #4
 800801a:	6031      	str	r1, [r6, #0]
 800801c:	0606      	lsls	r6, r0, #24
 800801e:	d501      	bpl.n	8008024 <_printf_i+0xbc>
 8008020:	681d      	ldr	r5, [r3, #0]
 8008022:	e003      	b.n	800802c <_printf_i+0xc4>
 8008024:	0645      	lsls	r5, r0, #25
 8008026:	d5fb      	bpl.n	8008020 <_printf_i+0xb8>
 8008028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800802c:	2d00      	cmp	r5, #0
 800802e:	da03      	bge.n	8008038 <_printf_i+0xd0>
 8008030:	232d      	movs	r3, #45	@ 0x2d
 8008032:	426d      	negs	r5, r5
 8008034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008038:	4858      	ldr	r0, [pc, #352]	@ (800819c <_printf_i+0x234>)
 800803a:	230a      	movs	r3, #10
 800803c:	e011      	b.n	8008062 <_printf_i+0xfa>
 800803e:	6821      	ldr	r1, [r4, #0]
 8008040:	6833      	ldr	r3, [r6, #0]
 8008042:	0608      	lsls	r0, r1, #24
 8008044:	f853 5b04 	ldr.w	r5, [r3], #4
 8008048:	d402      	bmi.n	8008050 <_printf_i+0xe8>
 800804a:	0649      	lsls	r1, r1, #25
 800804c:	bf48      	it	mi
 800804e:	b2ad      	uxthmi	r5, r5
 8008050:	2f6f      	cmp	r7, #111	@ 0x6f
 8008052:	4852      	ldr	r0, [pc, #328]	@ (800819c <_printf_i+0x234>)
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	bf14      	ite	ne
 8008058:	230a      	movne	r3, #10
 800805a:	2308      	moveq	r3, #8
 800805c:	2100      	movs	r1, #0
 800805e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008062:	6866      	ldr	r6, [r4, #4]
 8008064:	60a6      	str	r6, [r4, #8]
 8008066:	2e00      	cmp	r6, #0
 8008068:	db05      	blt.n	8008076 <_printf_i+0x10e>
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	432e      	orrs	r6, r5
 800806e:	f021 0104 	bic.w	r1, r1, #4
 8008072:	6021      	str	r1, [r4, #0]
 8008074:	d04b      	beq.n	800810e <_printf_i+0x1a6>
 8008076:	4616      	mov	r6, r2
 8008078:	fbb5 f1f3 	udiv	r1, r5, r3
 800807c:	fb03 5711 	mls	r7, r3, r1, r5
 8008080:	5dc7      	ldrb	r7, [r0, r7]
 8008082:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008086:	462f      	mov	r7, r5
 8008088:	42bb      	cmp	r3, r7
 800808a:	460d      	mov	r5, r1
 800808c:	d9f4      	bls.n	8008078 <_printf_i+0x110>
 800808e:	2b08      	cmp	r3, #8
 8008090:	d10b      	bne.n	80080aa <_printf_i+0x142>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	07df      	lsls	r7, r3, #31
 8008096:	d508      	bpl.n	80080aa <_printf_i+0x142>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	6861      	ldr	r1, [r4, #4]
 800809c:	4299      	cmp	r1, r3
 800809e:	bfde      	ittt	le
 80080a0:	2330      	movle	r3, #48	@ 0x30
 80080a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080aa:	1b92      	subs	r2, r2, r6
 80080ac:	6122      	str	r2, [r4, #16]
 80080ae:	f8cd a000 	str.w	sl, [sp]
 80080b2:	464b      	mov	r3, r9
 80080b4:	aa03      	add	r2, sp, #12
 80080b6:	4621      	mov	r1, r4
 80080b8:	4640      	mov	r0, r8
 80080ba:	f7ff fee7 	bl	8007e8c <_printf_common>
 80080be:	3001      	adds	r0, #1
 80080c0:	d14a      	bne.n	8008158 <_printf_i+0x1f0>
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	b004      	add	sp, #16
 80080c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	f043 0320 	orr.w	r3, r3, #32
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	4832      	ldr	r0, [pc, #200]	@ (80081a0 <_printf_i+0x238>)
 80080d6:	2778      	movs	r7, #120	@ 0x78
 80080d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	6831      	ldr	r1, [r6, #0]
 80080e0:	061f      	lsls	r7, r3, #24
 80080e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80080e6:	d402      	bmi.n	80080ee <_printf_i+0x186>
 80080e8:	065f      	lsls	r7, r3, #25
 80080ea:	bf48      	it	mi
 80080ec:	b2ad      	uxthmi	r5, r5
 80080ee:	6031      	str	r1, [r6, #0]
 80080f0:	07d9      	lsls	r1, r3, #31
 80080f2:	bf44      	itt	mi
 80080f4:	f043 0320 	orrmi.w	r3, r3, #32
 80080f8:	6023      	strmi	r3, [r4, #0]
 80080fa:	b11d      	cbz	r5, 8008104 <_printf_i+0x19c>
 80080fc:	2310      	movs	r3, #16
 80080fe:	e7ad      	b.n	800805c <_printf_i+0xf4>
 8008100:	4826      	ldr	r0, [pc, #152]	@ (800819c <_printf_i+0x234>)
 8008102:	e7e9      	b.n	80080d8 <_printf_i+0x170>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	f023 0320 	bic.w	r3, r3, #32
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	e7f6      	b.n	80080fc <_printf_i+0x194>
 800810e:	4616      	mov	r6, r2
 8008110:	e7bd      	b.n	800808e <_printf_i+0x126>
 8008112:	6833      	ldr	r3, [r6, #0]
 8008114:	6825      	ldr	r5, [r4, #0]
 8008116:	6961      	ldr	r1, [r4, #20]
 8008118:	1d18      	adds	r0, r3, #4
 800811a:	6030      	str	r0, [r6, #0]
 800811c:	062e      	lsls	r6, r5, #24
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	d501      	bpl.n	8008126 <_printf_i+0x1be>
 8008122:	6019      	str	r1, [r3, #0]
 8008124:	e002      	b.n	800812c <_printf_i+0x1c4>
 8008126:	0668      	lsls	r0, r5, #25
 8008128:	d5fb      	bpl.n	8008122 <_printf_i+0x1ba>
 800812a:	8019      	strh	r1, [r3, #0]
 800812c:	2300      	movs	r3, #0
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	4616      	mov	r6, r2
 8008132:	e7bc      	b.n	80080ae <_printf_i+0x146>
 8008134:	6833      	ldr	r3, [r6, #0]
 8008136:	1d1a      	adds	r2, r3, #4
 8008138:	6032      	str	r2, [r6, #0]
 800813a:	681e      	ldr	r6, [r3, #0]
 800813c:	6862      	ldr	r2, [r4, #4]
 800813e:	2100      	movs	r1, #0
 8008140:	4630      	mov	r0, r6
 8008142:	f7f8 f84d 	bl	80001e0 <memchr>
 8008146:	b108      	cbz	r0, 800814c <_printf_i+0x1e4>
 8008148:	1b80      	subs	r0, r0, r6
 800814a:	6060      	str	r0, [r4, #4]
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	2300      	movs	r3, #0
 8008152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008156:	e7aa      	b.n	80080ae <_printf_i+0x146>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	4632      	mov	r2, r6
 800815c:	4649      	mov	r1, r9
 800815e:	4640      	mov	r0, r8
 8008160:	47d0      	blx	sl
 8008162:	3001      	adds	r0, #1
 8008164:	d0ad      	beq.n	80080c2 <_printf_i+0x15a>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	079b      	lsls	r3, r3, #30
 800816a:	d413      	bmi.n	8008194 <_printf_i+0x22c>
 800816c:	68e0      	ldr	r0, [r4, #12]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	4298      	cmp	r0, r3
 8008172:	bfb8      	it	lt
 8008174:	4618      	movlt	r0, r3
 8008176:	e7a6      	b.n	80080c6 <_printf_i+0x15e>
 8008178:	2301      	movs	r3, #1
 800817a:	4632      	mov	r2, r6
 800817c:	4649      	mov	r1, r9
 800817e:	4640      	mov	r0, r8
 8008180:	47d0      	blx	sl
 8008182:	3001      	adds	r0, #1
 8008184:	d09d      	beq.n	80080c2 <_printf_i+0x15a>
 8008186:	3501      	adds	r5, #1
 8008188:	68e3      	ldr	r3, [r4, #12]
 800818a:	9903      	ldr	r1, [sp, #12]
 800818c:	1a5b      	subs	r3, r3, r1
 800818e:	42ab      	cmp	r3, r5
 8008190:	dcf2      	bgt.n	8008178 <_printf_i+0x210>
 8008192:	e7eb      	b.n	800816c <_printf_i+0x204>
 8008194:	2500      	movs	r5, #0
 8008196:	f104 0619 	add.w	r6, r4, #25
 800819a:	e7f5      	b.n	8008188 <_printf_i+0x220>
 800819c:	0800a642 	.word	0x0800a642
 80081a0:	0800a653 	.word	0x0800a653

080081a4 <std>:
 80081a4:	2300      	movs	r3, #0
 80081a6:	b510      	push	{r4, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	e9c0 3300 	strd	r3, r3, [r0]
 80081ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b2:	6083      	str	r3, [r0, #8]
 80081b4:	8181      	strh	r1, [r0, #12]
 80081b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80081b8:	81c2      	strh	r2, [r0, #14]
 80081ba:	6183      	str	r3, [r0, #24]
 80081bc:	4619      	mov	r1, r3
 80081be:	2208      	movs	r2, #8
 80081c0:	305c      	adds	r0, #92	@ 0x5c
 80081c2:	f000 f916 	bl	80083f2 <memset>
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <std+0x58>)
 80081c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80081ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <std+0x5c>)
 80081cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <std+0x60>)
 80081d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008208 <std+0x64>)
 80081d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80081d6:	4b0d      	ldr	r3, [pc, #52]	@ (800820c <std+0x68>)
 80081d8:	6224      	str	r4, [r4, #32]
 80081da:	429c      	cmp	r4, r3
 80081dc:	d006      	beq.n	80081ec <std+0x48>
 80081de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081e2:	4294      	cmp	r4, r2
 80081e4:	d002      	beq.n	80081ec <std+0x48>
 80081e6:	33d0      	adds	r3, #208	@ 0xd0
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d105      	bne.n	80081f8 <std+0x54>
 80081ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f4:	f000 b97a 	b.w	80084ec <__retarget_lock_init_recursive>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	bf00      	nop
 80081fc:	0800836d 	.word	0x0800836d
 8008200:	0800838f 	.word	0x0800838f
 8008204:	080083c7 	.word	0x080083c7
 8008208:	080083eb 	.word	0x080083eb
 800820c:	20004bfc 	.word	0x20004bfc

08008210 <stdio_exit_handler>:
 8008210:	4a02      	ldr	r2, [pc, #8]	@ (800821c <stdio_exit_handler+0xc>)
 8008212:	4903      	ldr	r1, [pc, #12]	@ (8008220 <stdio_exit_handler+0x10>)
 8008214:	4803      	ldr	r0, [pc, #12]	@ (8008224 <stdio_exit_handler+0x14>)
 8008216:	f000 b869 	b.w	80082ec <_fwalk_sglue>
 800821a:	bf00      	nop
 800821c:	20000010 	.word	0x20000010
 8008220:	08009e6d 	.word	0x08009e6d
 8008224:	20000020 	.word	0x20000020

08008228 <cleanup_stdio>:
 8008228:	6841      	ldr	r1, [r0, #4]
 800822a:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <cleanup_stdio+0x34>)
 800822c:	4299      	cmp	r1, r3
 800822e:	b510      	push	{r4, lr}
 8008230:	4604      	mov	r4, r0
 8008232:	d001      	beq.n	8008238 <cleanup_stdio+0x10>
 8008234:	f001 fe1a 	bl	8009e6c <_fflush_r>
 8008238:	68a1      	ldr	r1, [r4, #8]
 800823a:	4b09      	ldr	r3, [pc, #36]	@ (8008260 <cleanup_stdio+0x38>)
 800823c:	4299      	cmp	r1, r3
 800823e:	d002      	beq.n	8008246 <cleanup_stdio+0x1e>
 8008240:	4620      	mov	r0, r4
 8008242:	f001 fe13 	bl	8009e6c <_fflush_r>
 8008246:	68e1      	ldr	r1, [r4, #12]
 8008248:	4b06      	ldr	r3, [pc, #24]	@ (8008264 <cleanup_stdio+0x3c>)
 800824a:	4299      	cmp	r1, r3
 800824c:	d004      	beq.n	8008258 <cleanup_stdio+0x30>
 800824e:	4620      	mov	r0, r4
 8008250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008254:	f001 be0a 	b.w	8009e6c <_fflush_r>
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	20004bfc 	.word	0x20004bfc
 8008260:	20004c64 	.word	0x20004c64
 8008264:	20004ccc 	.word	0x20004ccc

08008268 <global_stdio_init.part.0>:
 8008268:	b510      	push	{r4, lr}
 800826a:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <global_stdio_init.part.0+0x30>)
 800826c:	4c0b      	ldr	r4, [pc, #44]	@ (800829c <global_stdio_init.part.0+0x34>)
 800826e:	4a0c      	ldr	r2, [pc, #48]	@ (80082a0 <global_stdio_init.part.0+0x38>)
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	4620      	mov	r0, r4
 8008274:	2200      	movs	r2, #0
 8008276:	2104      	movs	r1, #4
 8008278:	f7ff ff94 	bl	80081a4 <std>
 800827c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008280:	2201      	movs	r2, #1
 8008282:	2109      	movs	r1, #9
 8008284:	f7ff ff8e 	bl	80081a4 <std>
 8008288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800828c:	2202      	movs	r2, #2
 800828e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008292:	2112      	movs	r1, #18
 8008294:	f7ff bf86 	b.w	80081a4 <std>
 8008298:	20004d34 	.word	0x20004d34
 800829c:	20004bfc 	.word	0x20004bfc
 80082a0:	08008211 	.word	0x08008211

080082a4 <__sfp_lock_acquire>:
 80082a4:	4801      	ldr	r0, [pc, #4]	@ (80082ac <__sfp_lock_acquire+0x8>)
 80082a6:	f000 b922 	b.w	80084ee <__retarget_lock_acquire_recursive>
 80082aa:	bf00      	nop
 80082ac:	20004d3d 	.word	0x20004d3d

080082b0 <__sfp_lock_release>:
 80082b0:	4801      	ldr	r0, [pc, #4]	@ (80082b8 <__sfp_lock_release+0x8>)
 80082b2:	f000 b91d 	b.w	80084f0 <__retarget_lock_release_recursive>
 80082b6:	bf00      	nop
 80082b8:	20004d3d 	.word	0x20004d3d

080082bc <__sinit>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	f7ff fff0 	bl	80082a4 <__sfp_lock_acquire>
 80082c4:	6a23      	ldr	r3, [r4, #32]
 80082c6:	b11b      	cbz	r3, 80082d0 <__sinit+0x14>
 80082c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082cc:	f7ff bff0 	b.w	80082b0 <__sfp_lock_release>
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <__sinit+0x28>)
 80082d2:	6223      	str	r3, [r4, #32]
 80082d4:	4b04      	ldr	r3, [pc, #16]	@ (80082e8 <__sinit+0x2c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f5      	bne.n	80082c8 <__sinit+0xc>
 80082dc:	f7ff ffc4 	bl	8008268 <global_stdio_init.part.0>
 80082e0:	e7f2      	b.n	80082c8 <__sinit+0xc>
 80082e2:	bf00      	nop
 80082e4:	08008229 	.word	0x08008229
 80082e8:	20004d34 	.word	0x20004d34

080082ec <_fwalk_sglue>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4607      	mov	r7, r0
 80082f2:	4688      	mov	r8, r1
 80082f4:	4614      	mov	r4, r2
 80082f6:	2600      	movs	r6, #0
 80082f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008300:	d505      	bpl.n	800830e <_fwalk_sglue+0x22>
 8008302:	6824      	ldr	r4, [r4, #0]
 8008304:	2c00      	cmp	r4, #0
 8008306:	d1f7      	bne.n	80082f8 <_fwalk_sglue+0xc>
 8008308:	4630      	mov	r0, r6
 800830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d907      	bls.n	8008324 <_fwalk_sglue+0x38>
 8008314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008318:	3301      	adds	r3, #1
 800831a:	d003      	beq.n	8008324 <_fwalk_sglue+0x38>
 800831c:	4629      	mov	r1, r5
 800831e:	4638      	mov	r0, r7
 8008320:	47c0      	blx	r8
 8008322:	4306      	orrs	r6, r0
 8008324:	3568      	adds	r5, #104	@ 0x68
 8008326:	e7e9      	b.n	80082fc <_fwalk_sglue+0x10>

08008328 <siprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b510      	push	{r4, lr}
 800832c:	b09d      	sub	sp, #116	@ 0x74
 800832e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008330:	9002      	str	r0, [sp, #8]
 8008332:	9006      	str	r0, [sp, #24]
 8008334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008338:	480a      	ldr	r0, [pc, #40]	@ (8008364 <siprintf+0x3c>)
 800833a:	9107      	str	r1, [sp, #28]
 800833c:	9104      	str	r1, [sp, #16]
 800833e:	490a      	ldr	r1, [pc, #40]	@ (8008368 <siprintf+0x40>)
 8008340:	f853 2b04 	ldr.w	r2, [r3], #4
 8008344:	9105      	str	r1, [sp, #20]
 8008346:	2400      	movs	r4, #0
 8008348:	a902      	add	r1, sp, #8
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008350:	f001 fc0c 	bl	8009b6c <_svfiprintf_r>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	701c      	strb	r4, [r3, #0]
 8008358:	b01d      	add	sp, #116	@ 0x74
 800835a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835e:	b003      	add	sp, #12
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000001c 	.word	0x2000001c
 8008368:	ffff0208 	.word	0xffff0208

0800836c <__sread>:
 800836c:	b510      	push	{r4, lr}
 800836e:	460c      	mov	r4, r1
 8008370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008374:	f000 f86c 	bl	8008450 <_read_r>
 8008378:	2800      	cmp	r0, #0
 800837a:	bfab      	itete	ge
 800837c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800837e:	89a3      	ldrhlt	r3, [r4, #12]
 8008380:	181b      	addge	r3, r3, r0
 8008382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008386:	bfac      	ite	ge
 8008388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800838a:	81a3      	strhlt	r3, [r4, #12]
 800838c:	bd10      	pop	{r4, pc}

0800838e <__swrite>:
 800838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008392:	461f      	mov	r7, r3
 8008394:	898b      	ldrh	r3, [r1, #12]
 8008396:	05db      	lsls	r3, r3, #23
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4616      	mov	r6, r2
 800839e:	d505      	bpl.n	80083ac <__swrite+0x1e>
 80083a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a4:	2302      	movs	r3, #2
 80083a6:	2200      	movs	r2, #0
 80083a8:	f000 f840 	bl	800842c <_lseek_r>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c2:	f000 b857 	b.w	8008474 <_write_r>

080083c6 <__sseek>:
 80083c6:	b510      	push	{r4, lr}
 80083c8:	460c      	mov	r4, r1
 80083ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ce:	f000 f82d 	bl	800842c <_lseek_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	bf15      	itete	ne
 80083d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083e2:	81a3      	strheq	r3, [r4, #12]
 80083e4:	bf18      	it	ne
 80083e6:	81a3      	strhne	r3, [r4, #12]
 80083e8:	bd10      	pop	{r4, pc}

080083ea <__sclose>:
 80083ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ee:	f000 b80d 	b.w	800840c <_close_r>

080083f2 <memset>:
 80083f2:	4402      	add	r2, r0
 80083f4:	4603      	mov	r3, r0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d100      	bne.n	80083fc <memset+0xa>
 80083fa:	4770      	bx	lr
 80083fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008400:	e7f9      	b.n	80083f6 <memset+0x4>
	...

08008404 <_localeconv_r>:
 8008404:	4800      	ldr	r0, [pc, #0]	@ (8008408 <_localeconv_r+0x4>)
 8008406:	4770      	bx	lr
 8008408:	2000015c 	.word	0x2000015c

0800840c <_close_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	@ (8008428 <_close_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7f9 f9ae 	bl	8001778 <_close>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_close_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_close_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20004d38 	.word	0x20004d38

0800842c <_lseek_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	@ (800844c <_lseek_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7f9 f9c3 	bl	80017c6 <_lseek>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_lseek_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_lseek_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20004d38 	.word	0x20004d38

08008450 <_read_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	@ (8008470 <_read_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f9 f951 	bl	8001706 <_read>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_read_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_read_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20004d38 	.word	0x20004d38

08008474 <_write_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	@ (8008494 <_write_r+0x20>)
 8008478:	4604      	mov	r4, r0
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	2200      	movs	r2, #0
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f9 f95c 	bl	8001740 <_write>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_write_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_write_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20004d38 	.word	0x20004d38

08008498 <__errno>:
 8008498:	4b01      	ldr	r3, [pc, #4]	@ (80084a0 <__errno+0x8>)
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	2000001c 	.word	0x2000001c

080084a4 <__libc_init_array>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4d0d      	ldr	r5, [pc, #52]	@ (80084dc <__libc_init_array+0x38>)
 80084a8:	4c0d      	ldr	r4, [pc, #52]	@ (80084e0 <__libc_init_array+0x3c>)
 80084aa:	1b64      	subs	r4, r4, r5
 80084ac:	10a4      	asrs	r4, r4, #2
 80084ae:	2600      	movs	r6, #0
 80084b0:	42a6      	cmp	r6, r4
 80084b2:	d109      	bne.n	80084c8 <__libc_init_array+0x24>
 80084b4:	4d0b      	ldr	r5, [pc, #44]	@ (80084e4 <__libc_init_array+0x40>)
 80084b6:	4c0c      	ldr	r4, [pc, #48]	@ (80084e8 <__libc_init_array+0x44>)
 80084b8:	f002 f868 	bl	800a58c <_init>
 80084bc:	1b64      	subs	r4, r4, r5
 80084be:	10a4      	asrs	r4, r4, #2
 80084c0:	2600      	movs	r6, #0
 80084c2:	42a6      	cmp	r6, r4
 80084c4:	d105      	bne.n	80084d2 <__libc_init_array+0x2e>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084cc:	4798      	blx	r3
 80084ce:	3601      	adds	r6, #1
 80084d0:	e7ee      	b.n	80084b0 <__libc_init_array+0xc>
 80084d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d6:	4798      	blx	r3
 80084d8:	3601      	adds	r6, #1
 80084da:	e7f2      	b.n	80084c2 <__libc_init_array+0x1e>
 80084dc:	0800a9ac 	.word	0x0800a9ac
 80084e0:	0800a9ac 	.word	0x0800a9ac
 80084e4:	0800a9ac 	.word	0x0800a9ac
 80084e8:	0800a9b0 	.word	0x0800a9b0

080084ec <__retarget_lock_init_recursive>:
 80084ec:	4770      	bx	lr

080084ee <__retarget_lock_acquire_recursive>:
 80084ee:	4770      	bx	lr

080084f0 <__retarget_lock_release_recursive>:
 80084f0:	4770      	bx	lr

080084f2 <memcpy>:
 80084f2:	440a      	add	r2, r1
 80084f4:	4291      	cmp	r1, r2
 80084f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fa:	d100      	bne.n	80084fe <memcpy+0xc>
 80084fc:	4770      	bx	lr
 80084fe:	b510      	push	{r4, lr}
 8008500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008508:	4291      	cmp	r1, r2
 800850a:	d1f9      	bne.n	8008500 <memcpy+0xe>
 800850c:	bd10      	pop	{r4, pc}

0800850e <quorem>:
 800850e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008512:	6903      	ldr	r3, [r0, #16]
 8008514:	690c      	ldr	r4, [r1, #16]
 8008516:	42a3      	cmp	r3, r4
 8008518:	4607      	mov	r7, r0
 800851a:	db7e      	blt.n	800861a <quorem+0x10c>
 800851c:	3c01      	subs	r4, #1
 800851e:	f101 0814 	add.w	r8, r1, #20
 8008522:	00a3      	lsls	r3, r4, #2
 8008524:	f100 0514 	add.w	r5, r0, #20
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008534:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008538:	3301      	adds	r3, #1
 800853a:	429a      	cmp	r2, r3
 800853c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008540:	fbb2 f6f3 	udiv	r6, r2, r3
 8008544:	d32e      	bcc.n	80085a4 <quorem+0x96>
 8008546:	f04f 0a00 	mov.w	sl, #0
 800854a:	46c4      	mov	ip, r8
 800854c:	46ae      	mov	lr, r5
 800854e:	46d3      	mov	fp, sl
 8008550:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008554:	b298      	uxth	r0, r3
 8008556:	fb06 a000 	mla	r0, r6, r0, sl
 800855a:	0c02      	lsrs	r2, r0, #16
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	fb06 2303 	mla	r3, r6, r3, r2
 8008562:	f8de 2000 	ldr.w	r2, [lr]
 8008566:	b280      	uxth	r0, r0
 8008568:	b292      	uxth	r2, r2
 800856a:	1a12      	subs	r2, r2, r0
 800856c:	445a      	add	r2, fp
 800856e:	f8de 0000 	ldr.w	r0, [lr]
 8008572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008576:	b29b      	uxth	r3, r3
 8008578:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800857c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008580:	b292      	uxth	r2, r2
 8008582:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008586:	45e1      	cmp	r9, ip
 8008588:	f84e 2b04 	str.w	r2, [lr], #4
 800858c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008590:	d2de      	bcs.n	8008550 <quorem+0x42>
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	58eb      	ldr	r3, [r5, r3]
 8008596:	b92b      	cbnz	r3, 80085a4 <quorem+0x96>
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	3b04      	subs	r3, #4
 800859c:	429d      	cmp	r5, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	d32f      	bcc.n	8008602 <quorem+0xf4>
 80085a2:	613c      	str	r4, [r7, #16]
 80085a4:	4638      	mov	r0, r7
 80085a6:	f001 f97d 	bl	80098a4 <__mcmp>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	db25      	blt.n	80085fa <quorem+0xec>
 80085ae:	4629      	mov	r1, r5
 80085b0:	2000      	movs	r0, #0
 80085b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80085b6:	f8d1 c000 	ldr.w	ip, [r1]
 80085ba:	fa1f fe82 	uxth.w	lr, r2
 80085be:	fa1f f38c 	uxth.w	r3, ip
 80085c2:	eba3 030e 	sub.w	r3, r3, lr
 80085c6:	4403      	add	r3, r0
 80085c8:	0c12      	lsrs	r2, r2, #16
 80085ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085d8:	45c1      	cmp	r9, r8
 80085da:	f841 3b04 	str.w	r3, [r1], #4
 80085de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085e2:	d2e6      	bcs.n	80085b2 <quorem+0xa4>
 80085e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ec:	b922      	cbnz	r2, 80085f8 <quorem+0xea>
 80085ee:	3b04      	subs	r3, #4
 80085f0:	429d      	cmp	r5, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	d30b      	bcc.n	800860e <quorem+0x100>
 80085f6:	613c      	str	r4, [r7, #16]
 80085f8:	3601      	adds	r6, #1
 80085fa:	4630      	mov	r0, r6
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	3b04      	subs	r3, #4
 8008606:	2a00      	cmp	r2, #0
 8008608:	d1cb      	bne.n	80085a2 <quorem+0x94>
 800860a:	3c01      	subs	r4, #1
 800860c:	e7c6      	b.n	800859c <quorem+0x8e>
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	3b04      	subs	r3, #4
 8008612:	2a00      	cmp	r2, #0
 8008614:	d1ef      	bne.n	80085f6 <quorem+0xe8>
 8008616:	3c01      	subs	r4, #1
 8008618:	e7ea      	b.n	80085f0 <quorem+0xe2>
 800861a:	2000      	movs	r0, #0
 800861c:	e7ee      	b.n	80085fc <quorem+0xee>
	...

08008620 <_dtoa_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	69c7      	ldr	r7, [r0, #28]
 8008626:	b097      	sub	sp, #92	@ 0x5c
 8008628:	ed8d 0b04 	vstr	d0, [sp, #16]
 800862c:	ec55 4b10 	vmov	r4, r5, d0
 8008630:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008632:	9107      	str	r1, [sp, #28]
 8008634:	4681      	mov	r9, r0
 8008636:	920c      	str	r2, [sp, #48]	@ 0x30
 8008638:	9311      	str	r3, [sp, #68]	@ 0x44
 800863a:	b97f      	cbnz	r7, 800865c <_dtoa_r+0x3c>
 800863c:	2010      	movs	r0, #16
 800863e:	f000 fe09 	bl	8009254 <malloc>
 8008642:	4602      	mov	r2, r0
 8008644:	f8c9 001c 	str.w	r0, [r9, #28]
 8008648:	b920      	cbnz	r0, 8008654 <_dtoa_r+0x34>
 800864a:	4ba9      	ldr	r3, [pc, #676]	@ (80088f0 <_dtoa_r+0x2d0>)
 800864c:	21ef      	movs	r1, #239	@ 0xef
 800864e:	48a9      	ldr	r0, [pc, #676]	@ (80088f4 <_dtoa_r+0x2d4>)
 8008650:	f001 fc5e 	bl	8009f10 <__assert_func>
 8008654:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008658:	6007      	str	r7, [r0, #0]
 800865a:	60c7      	str	r7, [r0, #12]
 800865c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008660:	6819      	ldr	r1, [r3, #0]
 8008662:	b159      	cbz	r1, 800867c <_dtoa_r+0x5c>
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	604a      	str	r2, [r1, #4]
 8008668:	2301      	movs	r3, #1
 800866a:	4093      	lsls	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
 800866e:	4648      	mov	r0, r9
 8008670:	f000 fee6 	bl	8009440 <_Bfree>
 8008674:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	1e2b      	subs	r3, r5, #0
 800867e:	bfb9      	ittee	lt
 8008680:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008684:	9305      	strlt	r3, [sp, #20]
 8008686:	2300      	movge	r3, #0
 8008688:	6033      	strge	r3, [r6, #0]
 800868a:	9f05      	ldr	r7, [sp, #20]
 800868c:	4b9a      	ldr	r3, [pc, #616]	@ (80088f8 <_dtoa_r+0x2d8>)
 800868e:	bfbc      	itt	lt
 8008690:	2201      	movlt	r2, #1
 8008692:	6032      	strlt	r2, [r6, #0]
 8008694:	43bb      	bics	r3, r7
 8008696:	d112      	bne.n	80086be <_dtoa_r+0x9e>
 8008698:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800869a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086a4:	4323      	orrs	r3, r4
 80086a6:	f000 855a 	beq.w	800915e <_dtoa_r+0xb3e>
 80086aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800890c <_dtoa_r+0x2ec>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 855c 	beq.w	800916e <_dtoa_r+0xb4e>
 80086b6:	f10a 0303 	add.w	r3, sl, #3
 80086ba:	f000 bd56 	b.w	800916a <_dtoa_r+0xb4a>
 80086be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80086c2:	2200      	movs	r2, #0
 80086c4:	ec51 0b17 	vmov	r0, r1, d7
 80086c8:	2300      	movs	r3, #0
 80086ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80086ce:	f7f8 fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80086d2:	4680      	mov	r8, r0
 80086d4:	b158      	cbz	r0, 80086ee <_dtoa_r+0xce>
 80086d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80086d8:	2301      	movs	r3, #1
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086de:	b113      	cbz	r3, 80086e6 <_dtoa_r+0xc6>
 80086e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086e2:	4b86      	ldr	r3, [pc, #536]	@ (80088fc <_dtoa_r+0x2dc>)
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008910 <_dtoa_r+0x2f0>
 80086ea:	f000 bd40 	b.w	800916e <_dtoa_r+0xb4e>
 80086ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80086f2:	aa14      	add	r2, sp, #80	@ 0x50
 80086f4:	a915      	add	r1, sp, #84	@ 0x54
 80086f6:	4648      	mov	r0, r9
 80086f8:	f001 f984 	bl	8009a04 <__d2b>
 80086fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008700:	9002      	str	r0, [sp, #8]
 8008702:	2e00      	cmp	r6, #0
 8008704:	d078      	beq.n	80087f8 <_dtoa_r+0x1d8>
 8008706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008708:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800870c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008710:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008714:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008718:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800871c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008720:	4619      	mov	r1, r3
 8008722:	2200      	movs	r2, #0
 8008724:	4b76      	ldr	r3, [pc, #472]	@ (8008900 <_dtoa_r+0x2e0>)
 8008726:	f7f7 fdb7 	bl	8000298 <__aeabi_dsub>
 800872a:	a36b      	add	r3, pc, #428	@ (adr r3, 80088d8 <_dtoa_r+0x2b8>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 ff6a 	bl	8000608 <__aeabi_dmul>
 8008734:	a36a      	add	r3, pc, #424	@ (adr r3, 80088e0 <_dtoa_r+0x2c0>)
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f7f7 fdaf 	bl	800029c <__adddf3>
 800873e:	4604      	mov	r4, r0
 8008740:	4630      	mov	r0, r6
 8008742:	460d      	mov	r5, r1
 8008744:	f7f7 fef6 	bl	8000534 <__aeabi_i2d>
 8008748:	a367      	add	r3, pc, #412	@ (adr r3, 80088e8 <_dtoa_r+0x2c8>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 ff5b 	bl	8000608 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 fd9f 	bl	800029c <__adddf3>
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	f7f8 fa01 	bl	8000b68 <__aeabi_d2iz>
 8008766:	2200      	movs	r2, #0
 8008768:	4607      	mov	r7, r0
 800876a:	2300      	movs	r3, #0
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f8 f9bc 	bl	8000aec <__aeabi_dcmplt>
 8008774:	b140      	cbz	r0, 8008788 <_dtoa_r+0x168>
 8008776:	4638      	mov	r0, r7
 8008778:	f7f7 fedc 	bl	8000534 <__aeabi_i2d>
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	f7f8 f9aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008784:	b900      	cbnz	r0, 8008788 <_dtoa_r+0x168>
 8008786:	3f01      	subs	r7, #1
 8008788:	2f16      	cmp	r7, #22
 800878a:	d852      	bhi.n	8008832 <_dtoa_r+0x212>
 800878c:	4b5d      	ldr	r3, [pc, #372]	@ (8008904 <_dtoa_r+0x2e4>)
 800878e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800879a:	f7f8 f9a7 	bl	8000aec <__aeabi_dcmplt>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d049      	beq.n	8008836 <_dtoa_r+0x216>
 80087a2:	3f01      	subs	r7, #1
 80087a4:	2300      	movs	r3, #0
 80087a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80087a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087aa:	1b9b      	subs	r3, r3, r6
 80087ac:	1e5a      	subs	r2, r3, #1
 80087ae:	bf45      	ittet	mi
 80087b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80087b4:	9300      	strmi	r3, [sp, #0]
 80087b6:	2300      	movpl	r3, #0
 80087b8:	2300      	movmi	r3, #0
 80087ba:	9206      	str	r2, [sp, #24]
 80087bc:	bf54      	ite	pl
 80087be:	9300      	strpl	r3, [sp, #0]
 80087c0:	9306      	strmi	r3, [sp, #24]
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	db39      	blt.n	800883a <_dtoa_r+0x21a>
 80087c6:	9b06      	ldr	r3, [sp, #24]
 80087c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80087ca:	443b      	add	r3, r7
 80087cc:	9306      	str	r3, [sp, #24]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d863      	bhi.n	80088a0 <_dtoa_r+0x280>
 80087d8:	2b05      	cmp	r3, #5
 80087da:	bfc4      	itt	gt
 80087dc:	3b04      	subgt	r3, #4
 80087de:	9307      	strgt	r3, [sp, #28]
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	f1a3 0302 	sub.w	r3, r3, #2
 80087e6:	bfcc      	ite	gt
 80087e8:	2400      	movgt	r4, #0
 80087ea:	2401      	movle	r4, #1
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d863      	bhi.n	80088b8 <_dtoa_r+0x298>
 80087f0:	e8df f003 	tbb	[pc, r3]
 80087f4:	2b375452 	.word	0x2b375452
 80087f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80087fc:	441e      	add	r6, r3
 80087fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008802:	2b20      	cmp	r3, #32
 8008804:	bfc1      	itttt	gt
 8008806:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800880a:	409f      	lslgt	r7, r3
 800880c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008810:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008814:	bfd6      	itet	le
 8008816:	f1c3 0320 	rsble	r3, r3, #32
 800881a:	ea47 0003 	orrgt.w	r0, r7, r3
 800881e:	fa04 f003 	lslle.w	r0, r4, r3
 8008822:	f7f7 fe77 	bl	8000514 <__aeabi_ui2d>
 8008826:	2201      	movs	r2, #1
 8008828:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800882c:	3e01      	subs	r6, #1
 800882e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008830:	e776      	b.n	8008720 <_dtoa_r+0x100>
 8008832:	2301      	movs	r3, #1
 8008834:	e7b7      	b.n	80087a6 <_dtoa_r+0x186>
 8008836:	9010      	str	r0, [sp, #64]	@ 0x40
 8008838:	e7b6      	b.n	80087a8 <_dtoa_r+0x188>
 800883a:	9b00      	ldr	r3, [sp, #0]
 800883c:	1bdb      	subs	r3, r3, r7
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	427b      	negs	r3, r7
 8008842:	9308      	str	r3, [sp, #32]
 8008844:	2300      	movs	r3, #0
 8008846:	930d      	str	r3, [sp, #52]	@ 0x34
 8008848:	e7c3      	b.n	80087d2 <_dtoa_r+0x1b2>
 800884a:	2301      	movs	r3, #1
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008850:	eb07 0b03 	add.w	fp, r7, r3
 8008854:	f10b 0301 	add.w	r3, fp, #1
 8008858:	2b01      	cmp	r3, #1
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	bfb8      	it	lt
 800885e:	2301      	movlt	r3, #1
 8008860:	e006      	b.n	8008870 <_dtoa_r+0x250>
 8008862:	2301      	movs	r3, #1
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
 8008866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	dd28      	ble.n	80088be <_dtoa_r+0x29e>
 800886c:	469b      	mov	fp, r3
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008874:	2100      	movs	r1, #0
 8008876:	2204      	movs	r2, #4
 8008878:	f102 0514 	add.w	r5, r2, #20
 800887c:	429d      	cmp	r5, r3
 800887e:	d926      	bls.n	80088ce <_dtoa_r+0x2ae>
 8008880:	6041      	str	r1, [r0, #4]
 8008882:	4648      	mov	r0, r9
 8008884:	f000 fd9c 	bl	80093c0 <_Balloc>
 8008888:	4682      	mov	sl, r0
 800888a:	2800      	cmp	r0, #0
 800888c:	d142      	bne.n	8008914 <_dtoa_r+0x2f4>
 800888e:	4b1e      	ldr	r3, [pc, #120]	@ (8008908 <_dtoa_r+0x2e8>)
 8008890:	4602      	mov	r2, r0
 8008892:	f240 11af 	movw	r1, #431	@ 0x1af
 8008896:	e6da      	b.n	800864e <_dtoa_r+0x2e>
 8008898:	2300      	movs	r3, #0
 800889a:	e7e3      	b.n	8008864 <_dtoa_r+0x244>
 800889c:	2300      	movs	r3, #0
 800889e:	e7d5      	b.n	800884c <_dtoa_r+0x22c>
 80088a0:	2401      	movs	r4, #1
 80088a2:	2300      	movs	r3, #0
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80088a8:	f04f 3bff 	mov.w	fp, #4294967295
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80088b2:	2312      	movs	r3, #18
 80088b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80088b6:	e7db      	b.n	8008870 <_dtoa_r+0x250>
 80088b8:	2301      	movs	r3, #1
 80088ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80088bc:	e7f4      	b.n	80088a8 <_dtoa_r+0x288>
 80088be:	f04f 0b01 	mov.w	fp, #1
 80088c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80088c6:	465b      	mov	r3, fp
 80088c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80088cc:	e7d0      	b.n	8008870 <_dtoa_r+0x250>
 80088ce:	3101      	adds	r1, #1
 80088d0:	0052      	lsls	r2, r2, #1
 80088d2:	e7d1      	b.n	8008878 <_dtoa_r+0x258>
 80088d4:	f3af 8000 	nop.w
 80088d8:	636f4361 	.word	0x636f4361
 80088dc:	3fd287a7 	.word	0x3fd287a7
 80088e0:	8b60c8b3 	.word	0x8b60c8b3
 80088e4:	3fc68a28 	.word	0x3fc68a28
 80088e8:	509f79fb 	.word	0x509f79fb
 80088ec:	3fd34413 	.word	0x3fd34413
 80088f0:	0800a671 	.word	0x0800a671
 80088f4:	0800a688 	.word	0x0800a688
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800a641 	.word	0x0800a641
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	0800a7d8 	.word	0x0800a7d8
 8008908:	0800a6e0 	.word	0x0800a6e0
 800890c:	0800a66d 	.word	0x0800a66d
 8008910:	0800a640 	.word	0x0800a640
 8008914:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008918:	6018      	str	r0, [r3, #0]
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	2b0e      	cmp	r3, #14
 800891e:	f200 80a1 	bhi.w	8008a64 <_dtoa_r+0x444>
 8008922:	2c00      	cmp	r4, #0
 8008924:	f000 809e 	beq.w	8008a64 <_dtoa_r+0x444>
 8008928:	2f00      	cmp	r7, #0
 800892a:	dd33      	ble.n	8008994 <_dtoa_r+0x374>
 800892c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ba0 <_dtoa_r+0x580>)
 800892e:	f007 020f 	and.w	r2, r7, #15
 8008932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008936:	ed93 7b00 	vldr	d7, [r3]
 800893a:	05f8      	lsls	r0, r7, #23
 800893c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008940:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008944:	d516      	bpl.n	8008974 <_dtoa_r+0x354>
 8008946:	4b97      	ldr	r3, [pc, #604]	@ (8008ba4 <_dtoa_r+0x584>)
 8008948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800894c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008950:	f7f7 ff84 	bl	800085c <__aeabi_ddiv>
 8008954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008958:	f004 040f 	and.w	r4, r4, #15
 800895c:	2603      	movs	r6, #3
 800895e:	4d91      	ldr	r5, [pc, #580]	@ (8008ba4 <_dtoa_r+0x584>)
 8008960:	b954      	cbnz	r4, 8008978 <_dtoa_r+0x358>
 8008962:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800896a:	f7f7 ff77 	bl	800085c <__aeabi_ddiv>
 800896e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008972:	e028      	b.n	80089c6 <_dtoa_r+0x3a6>
 8008974:	2602      	movs	r6, #2
 8008976:	e7f2      	b.n	800895e <_dtoa_r+0x33e>
 8008978:	07e1      	lsls	r1, r4, #31
 800897a:	d508      	bpl.n	800898e <_dtoa_r+0x36e>
 800897c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800898c:	3601      	adds	r6, #1
 800898e:	1064      	asrs	r4, r4, #1
 8008990:	3508      	adds	r5, #8
 8008992:	e7e5      	b.n	8008960 <_dtoa_r+0x340>
 8008994:	f000 80af 	beq.w	8008af6 <_dtoa_r+0x4d6>
 8008998:	427c      	negs	r4, r7
 800899a:	4b81      	ldr	r3, [pc, #516]	@ (8008ba0 <_dtoa_r+0x580>)
 800899c:	4d81      	ldr	r5, [pc, #516]	@ (8008ba4 <_dtoa_r+0x584>)
 800899e:	f004 020f 	and.w	r2, r4, #15
 80089a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089ae:	f7f7 fe2b 	bl	8000608 <__aeabi_dmul>
 80089b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089b6:	1124      	asrs	r4, r4, #4
 80089b8:	2300      	movs	r3, #0
 80089ba:	2602      	movs	r6, #2
 80089bc:	2c00      	cmp	r4, #0
 80089be:	f040 808f 	bne.w	8008ae0 <_dtoa_r+0x4c0>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1d3      	bne.n	800896e <_dtoa_r+0x34e>
 80089c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8094 	beq.w	8008afa <_dtoa_r+0x4da>
 80089d2:	4b75      	ldr	r3, [pc, #468]	@ (8008ba8 <_dtoa_r+0x588>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f8 f887 	bl	8000aec <__aeabi_dcmplt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	f000 808b 	beq.w	8008afa <_dtoa_r+0x4da>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8087 	beq.w	8008afa <_dtoa_r+0x4da>
 80089ec:	f1bb 0f00 	cmp.w	fp, #0
 80089f0:	dd34      	ble.n	8008a5c <_dtoa_r+0x43c>
 80089f2:	4620      	mov	r0, r4
 80089f4:	4b6d      	ldr	r3, [pc, #436]	@ (8008bac <_dtoa_r+0x58c>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a02:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a06:	3601      	adds	r6, #1
 8008a08:	465c      	mov	r4, fp
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7f7 fd92 	bl	8000534 <__aeabi_i2d>
 8008a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a14:	f7f7 fdf8 	bl	8000608 <__aeabi_dmul>
 8008a18:	4b65      	ldr	r3, [pc, #404]	@ (8008bb0 <_dtoa_r+0x590>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7f7 fc3e 	bl	800029c <__adddf3>
 8008a20:	4605      	mov	r5, r0
 8008a22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d16a      	bne.n	8008b00 <_dtoa_r+0x4e0>
 8008a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a2e:	4b61      	ldr	r3, [pc, #388]	@ (8008bb4 <_dtoa_r+0x594>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	f7f7 fc31 	bl	8000298 <__aeabi_dsub>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a3e:	462a      	mov	r2, r5
 8008a40:	4633      	mov	r3, r6
 8008a42:	f7f8 f871 	bl	8000b28 <__aeabi_dcmpgt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f040 8298 	bne.w	8008f7c <_dtoa_r+0x95c>
 8008a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a50:	462a      	mov	r2, r5
 8008a52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a56:	f7f8 f849 	bl	8000aec <__aeabi_dcmplt>
 8008a5a:	bb38      	cbnz	r0, 8008aac <_dtoa_r+0x48c>
 8008a5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008a60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f2c0 8157 	blt.w	8008d1a <_dtoa_r+0x6fa>
 8008a6c:	2f0e      	cmp	r7, #14
 8008a6e:	f300 8154 	bgt.w	8008d1a <_dtoa_r+0x6fa>
 8008a72:	4b4b      	ldr	r3, [pc, #300]	@ (8008ba0 <_dtoa_r+0x580>)
 8008a74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a78:	ed93 7b00 	vldr	d7, [r3]
 8008a7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	ed8d 7b00 	vstr	d7, [sp]
 8008a84:	f280 80e5 	bge.w	8008c52 <_dtoa_r+0x632>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f300 80e1 	bgt.w	8008c52 <_dtoa_r+0x632>
 8008a90:	d10c      	bne.n	8008aac <_dtoa_r+0x48c>
 8008a92:	4b48      	ldr	r3, [pc, #288]	@ (8008bb4 <_dtoa_r+0x594>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	ec51 0b17 	vmov	r0, r1, d7
 8008a9a:	f7f7 fdb5 	bl	8000608 <__aeabi_dmul>
 8008a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa2:	f7f8 f837 	bl	8000b14 <__aeabi_dcmpge>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f000 8266 	beq.w	8008f78 <_dtoa_r+0x958>
 8008aac:	2400      	movs	r4, #0
 8008aae:	4625      	mov	r5, r4
 8008ab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ab2:	4656      	mov	r6, sl
 8008ab4:	ea6f 0803 	mvn.w	r8, r3
 8008ab8:	2700      	movs	r7, #0
 8008aba:	4621      	mov	r1, r4
 8008abc:	4648      	mov	r0, r9
 8008abe:	f000 fcbf 	bl	8009440 <_Bfree>
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	f000 80bd 	beq.w	8008c42 <_dtoa_r+0x622>
 8008ac8:	b12f      	cbz	r7, 8008ad6 <_dtoa_r+0x4b6>
 8008aca:	42af      	cmp	r7, r5
 8008acc:	d003      	beq.n	8008ad6 <_dtoa_r+0x4b6>
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4648      	mov	r0, r9
 8008ad2:	f000 fcb5 	bl	8009440 <_Bfree>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f000 fcb1 	bl	8009440 <_Bfree>
 8008ade:	e0b0      	b.n	8008c42 <_dtoa_r+0x622>
 8008ae0:	07e2      	lsls	r2, r4, #31
 8008ae2:	d505      	bpl.n	8008af0 <_dtoa_r+0x4d0>
 8008ae4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ae8:	f7f7 fd8e 	bl	8000608 <__aeabi_dmul>
 8008aec:	3601      	adds	r6, #1
 8008aee:	2301      	movs	r3, #1
 8008af0:	1064      	asrs	r4, r4, #1
 8008af2:	3508      	adds	r5, #8
 8008af4:	e762      	b.n	80089bc <_dtoa_r+0x39c>
 8008af6:	2602      	movs	r6, #2
 8008af8:	e765      	b.n	80089c6 <_dtoa_r+0x3a6>
 8008afa:	9c03      	ldr	r4, [sp, #12]
 8008afc:	46b8      	mov	r8, r7
 8008afe:	e784      	b.n	8008a0a <_dtoa_r+0x3ea>
 8008b00:	4b27      	ldr	r3, [pc, #156]	@ (8008ba0 <_dtoa_r+0x580>)
 8008b02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b0c:	4454      	add	r4, sl
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d054      	beq.n	8008bbc <_dtoa_r+0x59c>
 8008b12:	4929      	ldr	r1, [pc, #164]	@ (8008bb8 <_dtoa_r+0x598>)
 8008b14:	2000      	movs	r0, #0
 8008b16:	f7f7 fea1 	bl	800085c <__aeabi_ddiv>
 8008b1a:	4633      	mov	r3, r6
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b26:	4656      	mov	r6, sl
 8008b28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b2c:	f7f8 f81c 	bl	8000b68 <__aeabi_d2iz>
 8008b30:	4605      	mov	r5, r0
 8008b32:	f7f7 fcff 	bl	8000534 <__aeabi_i2d>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b3e:	f7f7 fbab 	bl	8000298 <__aeabi_dsub>
 8008b42:	3530      	adds	r5, #48	@ 0x30
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b4c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b54:	f7f7 ffca 	bl	8000aec <__aeabi_dcmplt>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d172      	bne.n	8008c42 <_dtoa_r+0x622>
 8008b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b60:	4911      	ldr	r1, [pc, #68]	@ (8008ba8 <_dtoa_r+0x588>)
 8008b62:	2000      	movs	r0, #0
 8008b64:	f7f7 fb98 	bl	8000298 <__aeabi_dsub>
 8008b68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b6c:	f7f7 ffbe 	bl	8000aec <__aeabi_dcmplt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f040 80b4 	bne.w	8008cde <_dtoa_r+0x6be>
 8008b76:	42a6      	cmp	r6, r4
 8008b78:	f43f af70 	beq.w	8008a5c <_dtoa_r+0x43c>
 8008b7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b80:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <_dtoa_r+0x58c>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7f7 fd40 	bl	8000608 <__aeabi_dmul>
 8008b88:	4b08      	ldr	r3, [pc, #32]	@ (8008bac <_dtoa_r+0x58c>)
 8008b8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b8e:	2200      	movs	r2, #0
 8008b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b9c:	e7c4      	b.n	8008b28 <_dtoa_r+0x508>
 8008b9e:	bf00      	nop
 8008ba0:	0800a7d8 	.word	0x0800a7d8
 8008ba4:	0800a7b0 	.word	0x0800a7b0
 8008ba8:	3ff00000 	.word	0x3ff00000
 8008bac:	40240000 	.word	0x40240000
 8008bb0:	401c0000 	.word	0x401c0000
 8008bb4:	40140000 	.word	0x40140000
 8008bb8:	3fe00000 	.word	0x3fe00000
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f7f7 fd22 	bl	8000608 <__aeabi_dmul>
 8008bc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008bc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008bca:	4656      	mov	r6, sl
 8008bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bd0:	f7f7 ffca 	bl	8000b68 <__aeabi_d2iz>
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	f7f7 fcad 	bl	8000534 <__aeabi_i2d>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008be2:	f7f7 fb59 	bl	8000298 <__aeabi_dsub>
 8008be6:	3530      	adds	r5, #48	@ 0x30
 8008be8:	f806 5b01 	strb.w	r5, [r6], #1
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	42a6      	cmp	r6, r4
 8008bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	d124      	bne.n	8008c46 <_dtoa_r+0x626>
 8008bfc:	4baf      	ldr	r3, [pc, #700]	@ (8008ebc <_dtoa_r+0x89c>)
 8008bfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c02:	f7f7 fb4b 	bl	800029c <__adddf3>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c0e:	f7f7 ff8b 	bl	8000b28 <__aeabi_dcmpgt>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d163      	bne.n	8008cde <_dtoa_r+0x6be>
 8008c16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c1a:	49a8      	ldr	r1, [pc, #672]	@ (8008ebc <_dtoa_r+0x89c>)
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f7f7 fb3b 	bl	8000298 <__aeabi_dsub>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c2a:	f7f7 ff5f 	bl	8000aec <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f43f af14 	beq.w	8008a5c <_dtoa_r+0x43c>
 8008c34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008c36:	1e73      	subs	r3, r6, #1
 8008c38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c3e:	2b30      	cmp	r3, #48	@ 0x30
 8008c40:	d0f8      	beq.n	8008c34 <_dtoa_r+0x614>
 8008c42:	4647      	mov	r7, r8
 8008c44:	e03b      	b.n	8008cbe <_dtoa_r+0x69e>
 8008c46:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec0 <_dtoa_r+0x8a0>)
 8008c48:	f7f7 fcde 	bl	8000608 <__aeabi_dmul>
 8008c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c50:	e7bc      	b.n	8008bcc <_dtoa_r+0x5ac>
 8008c52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008c56:	4656      	mov	r6, sl
 8008c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 fdfc 	bl	800085c <__aeabi_ddiv>
 8008c64:	f7f7 ff80 	bl	8000b68 <__aeabi_d2iz>
 8008c68:	4680      	mov	r8, r0
 8008c6a:	f7f7 fc63 	bl	8000534 <__aeabi_i2d>
 8008c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c82:	f7f7 fb09 	bl	8000298 <__aeabi_dsub>
 8008c86:	f806 4b01 	strb.w	r4, [r6], #1
 8008c8a:	9d03      	ldr	r5, [sp, #12]
 8008c8c:	eba6 040a 	sub.w	r4, r6, sl
 8008c90:	42a5      	cmp	r5, r4
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	d133      	bne.n	8008d00 <_dtoa_r+0x6e0>
 8008c98:	f7f7 fb00 	bl	800029c <__adddf3>
 8008c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	f7f7 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 8008ca8:	b9c0      	cbnz	r0, 8008cdc <_dtoa_r+0x6bc>
 8008caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 ff11 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cb6:	b110      	cbz	r0, 8008cbe <_dtoa_r+0x69e>
 8008cb8:	f018 0f01 	tst.w	r8, #1
 8008cbc:	d10e      	bne.n	8008cdc <_dtoa_r+0x6bc>
 8008cbe:	9902      	ldr	r1, [sp, #8]
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f000 fbbd 	bl	8009440 <_Bfree>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	7033      	strb	r3, [r6, #0]
 8008cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ccc:	3701      	adds	r7, #1
 8008cce:	601f      	str	r7, [r3, #0]
 8008cd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 824b 	beq.w	800916e <_dtoa_r+0xb4e>
 8008cd8:	601e      	str	r6, [r3, #0]
 8008cda:	e248      	b.n	800916e <_dtoa_r+0xb4e>
 8008cdc:	46b8      	mov	r8, r7
 8008cde:	4633      	mov	r3, r6
 8008ce0:	461e      	mov	r6, r3
 8008ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ce6:	2a39      	cmp	r2, #57	@ 0x39
 8008ce8:	d106      	bne.n	8008cf8 <_dtoa_r+0x6d8>
 8008cea:	459a      	cmp	sl, r3
 8008cec:	d1f8      	bne.n	8008ce0 <_dtoa_r+0x6c0>
 8008cee:	2230      	movs	r2, #48	@ 0x30
 8008cf0:	f108 0801 	add.w	r8, r8, #1
 8008cf4:	f88a 2000 	strb.w	r2, [sl]
 8008cf8:	781a      	ldrb	r2, [r3, #0]
 8008cfa:	3201      	adds	r2, #1
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	e7a0      	b.n	8008c42 <_dtoa_r+0x622>
 8008d00:	4b6f      	ldr	r3, [pc, #444]	@ (8008ec0 <_dtoa_r+0x8a0>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	f7f7 fc80 	bl	8000608 <__aeabi_dmul>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	f7f7 fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d09f      	beq.n	8008c58 <_dtoa_r+0x638>
 8008d18:	e7d1      	b.n	8008cbe <_dtoa_r+0x69e>
 8008d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	f000 80ea 	beq.w	8008ef6 <_dtoa_r+0x8d6>
 8008d22:	9a07      	ldr	r2, [sp, #28]
 8008d24:	2a01      	cmp	r2, #1
 8008d26:	f300 80cd 	bgt.w	8008ec4 <_dtoa_r+0x8a4>
 8008d2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d2c:	2a00      	cmp	r2, #0
 8008d2e:	f000 80c1 	beq.w	8008eb4 <_dtoa_r+0x894>
 8008d32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d36:	9c08      	ldr	r4, [sp, #32]
 8008d38:	9e00      	ldr	r6, [sp, #0]
 8008d3a:	9a00      	ldr	r2, [sp, #0]
 8008d3c:	441a      	add	r2, r3
 8008d3e:	9200      	str	r2, [sp, #0]
 8008d40:	9a06      	ldr	r2, [sp, #24]
 8008d42:	2101      	movs	r1, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	4648      	mov	r0, r9
 8008d48:	9206      	str	r2, [sp, #24]
 8008d4a:	f000 fc2d 	bl	80095a8 <__i2b>
 8008d4e:	4605      	mov	r5, r0
 8008d50:	b166      	cbz	r6, 8008d6c <_dtoa_r+0x74c>
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd09      	ble.n	8008d6c <_dtoa_r+0x74c>
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	9a00      	ldr	r2, [sp, #0]
 8008d5c:	bfa8      	it	ge
 8008d5e:	4633      	movge	r3, r6
 8008d60:	1ad2      	subs	r2, r2, r3
 8008d62:	9200      	str	r2, [sp, #0]
 8008d64:	9a06      	ldr	r2, [sp, #24]
 8008d66:	1af6      	subs	r6, r6, r3
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	9306      	str	r3, [sp, #24]
 8008d6c:	9b08      	ldr	r3, [sp, #32]
 8008d6e:	b30b      	cbz	r3, 8008db4 <_dtoa_r+0x794>
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80c6 	beq.w	8008f04 <_dtoa_r+0x8e4>
 8008d78:	2c00      	cmp	r4, #0
 8008d7a:	f000 80c0 	beq.w	8008efe <_dtoa_r+0x8de>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4622      	mov	r2, r4
 8008d82:	4648      	mov	r0, r9
 8008d84:	f000 fcc8 	bl	8009718 <__pow5mult>
 8008d88:	9a02      	ldr	r2, [sp, #8]
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	4648      	mov	r0, r9
 8008d90:	f000 fc20 	bl	80095d4 <__multiply>
 8008d94:	9902      	ldr	r1, [sp, #8]
 8008d96:	4680      	mov	r8, r0
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f000 fb51 	bl	8009440 <_Bfree>
 8008d9e:	9b08      	ldr	r3, [sp, #32]
 8008da0:	1b1b      	subs	r3, r3, r4
 8008da2:	9308      	str	r3, [sp, #32]
 8008da4:	f000 80b1 	beq.w	8008f0a <_dtoa_r+0x8ea>
 8008da8:	9a08      	ldr	r2, [sp, #32]
 8008daa:	4641      	mov	r1, r8
 8008dac:	4648      	mov	r0, r9
 8008dae:	f000 fcb3 	bl	8009718 <__pow5mult>
 8008db2:	9002      	str	r0, [sp, #8]
 8008db4:	2101      	movs	r1, #1
 8008db6:	4648      	mov	r0, r9
 8008db8:	f000 fbf6 	bl	80095a8 <__i2b>
 8008dbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 81d8 	beq.w	8009176 <_dtoa_r+0xb56>
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4648      	mov	r0, r9
 8008dcc:	f000 fca4 	bl	8009718 <__pow5mult>
 8008dd0:	9b07      	ldr	r3, [sp, #28]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	f300 809f 	bgt.w	8008f18 <_dtoa_r+0x8f8>
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 8097 	bne.w	8008f10 <_dtoa_r+0x8f0>
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 8093 	bne.w	8008f14 <_dtoa_r+0x8f4>
 8008dee:	9b05      	ldr	r3, [sp, #20]
 8008df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008df4:	0d1b      	lsrs	r3, r3, #20
 8008df6:	051b      	lsls	r3, r3, #20
 8008df8:	b133      	cbz	r3, 8008e08 <_dtoa_r+0x7e8>
 8008dfa:	9b00      	ldr	r3, [sp, #0]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	3301      	adds	r3, #1
 8008e04:	9306      	str	r3, [sp, #24]
 8008e06:	2301      	movs	r3, #1
 8008e08:	9308      	str	r3, [sp, #32]
 8008e0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 81b8 	beq.w	8009182 <_dtoa_r+0xb62>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e18:	6918      	ldr	r0, [r3, #16]
 8008e1a:	f000 fb79 	bl	8009510 <__hi0bits>
 8008e1e:	f1c0 0020 	rsb	r0, r0, #32
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	4418      	add	r0, r3
 8008e26:	f010 001f 	ands.w	r0, r0, #31
 8008e2a:	f000 8082 	beq.w	8008f32 <_dtoa_r+0x912>
 8008e2e:	f1c0 0320 	rsb	r3, r0, #32
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	dd73      	ble.n	8008f1e <_dtoa_r+0x8fe>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	f1c0 001c 	rsb	r0, r0, #28
 8008e3c:	4403      	add	r3, r0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	4403      	add	r3, r0
 8008e44:	4406      	add	r6, r0
 8008e46:	9306      	str	r3, [sp, #24]
 8008e48:	9b00      	ldr	r3, [sp, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dd05      	ble.n	8008e5a <_dtoa_r+0x83a>
 8008e4e:	9902      	ldr	r1, [sp, #8]
 8008e50:	461a      	mov	r2, r3
 8008e52:	4648      	mov	r0, r9
 8008e54:	f000 fcba 	bl	80097cc <__lshift>
 8008e58:	9002      	str	r0, [sp, #8]
 8008e5a:	9b06      	ldr	r3, [sp, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dd05      	ble.n	8008e6c <_dtoa_r+0x84c>
 8008e60:	4621      	mov	r1, r4
 8008e62:	461a      	mov	r2, r3
 8008e64:	4648      	mov	r0, r9
 8008e66:	f000 fcb1 	bl	80097cc <__lshift>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d061      	beq.n	8008f36 <_dtoa_r+0x916>
 8008e72:	9802      	ldr	r0, [sp, #8]
 8008e74:	4621      	mov	r1, r4
 8008e76:	f000 fd15 	bl	80098a4 <__mcmp>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	da5b      	bge.n	8008f36 <_dtoa_r+0x916>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9902      	ldr	r1, [sp, #8]
 8008e82:	220a      	movs	r2, #10
 8008e84:	4648      	mov	r0, r9
 8008e86:	f000 fafd 	bl	8009484 <__multadd>
 8008e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8177 	beq.w	8009186 <_dtoa_r+0xb66>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	220a      	movs	r2, #10
 8008e9e:	4648      	mov	r0, r9
 8008ea0:	f000 faf0 	bl	8009484 <__multadd>
 8008ea4:	f1bb 0f00 	cmp.w	fp, #0
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	dc6f      	bgt.n	8008f8c <_dtoa_r+0x96c>
 8008eac:	9b07      	ldr	r3, [sp, #28]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	dc49      	bgt.n	8008f46 <_dtoa_r+0x926>
 8008eb2:	e06b      	b.n	8008f8c <_dtoa_r+0x96c>
 8008eb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008eb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008eba:	e73c      	b.n	8008d36 <_dtoa_r+0x716>
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	1e5c      	subs	r4, r3, #1
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	db09      	blt.n	8008ee2 <_dtoa_r+0x8c2>
 8008ece:	1b1c      	subs	r4, r3, r4
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f6bf af30 	bge.w	8008d38 <_dtoa_r+0x718>
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	9a03      	ldr	r2, [sp, #12]
 8008edc:	1a9e      	subs	r6, r3, r2
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e72b      	b.n	8008d3a <_dtoa_r+0x71a>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ee6:	9408      	str	r4, [sp, #32]
 8008ee8:	1ae3      	subs	r3, r4, r3
 8008eea:	441a      	add	r2, r3
 8008eec:	9e00      	ldr	r6, [sp, #0]
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	e721      	b.n	8008d3a <_dtoa_r+0x71a>
 8008ef6:	9c08      	ldr	r4, [sp, #32]
 8008ef8:	9e00      	ldr	r6, [sp, #0]
 8008efa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008efc:	e728      	b.n	8008d50 <_dtoa_r+0x730>
 8008efe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f02:	e751      	b.n	8008da8 <_dtoa_r+0x788>
 8008f04:	9a08      	ldr	r2, [sp, #32]
 8008f06:	9902      	ldr	r1, [sp, #8]
 8008f08:	e750      	b.n	8008dac <_dtoa_r+0x78c>
 8008f0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008f0e:	e751      	b.n	8008db4 <_dtoa_r+0x794>
 8008f10:	2300      	movs	r3, #0
 8008f12:	e779      	b.n	8008e08 <_dtoa_r+0x7e8>
 8008f14:	9b04      	ldr	r3, [sp, #16]
 8008f16:	e777      	b.n	8008e08 <_dtoa_r+0x7e8>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	e779      	b.n	8008e12 <_dtoa_r+0x7f2>
 8008f1e:	d093      	beq.n	8008e48 <_dtoa_r+0x828>
 8008f20:	9a00      	ldr	r2, [sp, #0]
 8008f22:	331c      	adds	r3, #28
 8008f24:	441a      	add	r2, r3
 8008f26:	9200      	str	r2, [sp, #0]
 8008f28:	9a06      	ldr	r2, [sp, #24]
 8008f2a:	441a      	add	r2, r3
 8008f2c:	441e      	add	r6, r3
 8008f2e:	9206      	str	r2, [sp, #24]
 8008f30:	e78a      	b.n	8008e48 <_dtoa_r+0x828>
 8008f32:	4603      	mov	r3, r0
 8008f34:	e7f4      	b.n	8008f20 <_dtoa_r+0x900>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	46b8      	mov	r8, r7
 8008f3c:	dc20      	bgt.n	8008f80 <_dtoa_r+0x960>
 8008f3e:	469b      	mov	fp, r3
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	dd1e      	ble.n	8008f84 <_dtoa_r+0x964>
 8008f46:	f1bb 0f00 	cmp.w	fp, #0
 8008f4a:	f47f adb1 	bne.w	8008ab0 <_dtoa_r+0x490>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	465b      	mov	r3, fp
 8008f52:	2205      	movs	r2, #5
 8008f54:	4648      	mov	r0, r9
 8008f56:	f000 fa95 	bl	8009484 <__multadd>
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	9802      	ldr	r0, [sp, #8]
 8008f60:	f000 fca0 	bl	80098a4 <__mcmp>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f77f ada3 	ble.w	8008ab0 <_dtoa_r+0x490>
 8008f6a:	4656      	mov	r6, sl
 8008f6c:	2331      	movs	r3, #49	@ 0x31
 8008f6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	e59f      	b.n	8008ab8 <_dtoa_r+0x498>
 8008f78:	9c03      	ldr	r4, [sp, #12]
 8008f7a:	46b8      	mov	r8, r7
 8008f7c:	4625      	mov	r5, r4
 8008f7e:	e7f4      	b.n	8008f6a <_dtoa_r+0x94a>
 8008f80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8101 	beq.w	800918e <_dtoa_r+0xb6e>
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	dd05      	ble.n	8008f9c <_dtoa_r+0x97c>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4632      	mov	r2, r6
 8008f94:	4648      	mov	r0, r9
 8008f96:	f000 fc19 	bl	80097cc <__lshift>
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d05c      	beq.n	800905c <_dtoa_r+0xa3c>
 8008fa2:	6869      	ldr	r1, [r5, #4]
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f000 fa0b 	bl	80093c0 <_Balloc>
 8008faa:	4606      	mov	r6, r0
 8008fac:	b928      	cbnz	r0, 8008fba <_dtoa_r+0x99a>
 8008fae:	4b82      	ldr	r3, [pc, #520]	@ (80091b8 <_dtoa_r+0xb98>)
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fb6:	f7ff bb4a 	b.w	800864e <_dtoa_r+0x2e>
 8008fba:	692a      	ldr	r2, [r5, #16]
 8008fbc:	3202      	adds	r2, #2
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	f105 010c 	add.w	r1, r5, #12
 8008fc4:	300c      	adds	r0, #12
 8008fc6:	f7ff fa94 	bl	80084f2 <memcpy>
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4648      	mov	r0, r9
 8008fd0:	f000 fbfc 	bl	80097cc <__lshift>
 8008fd4:	f10a 0301 	add.w	r3, sl, #1
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	eb0a 030b 	add.w	r3, sl, fp
 8008fde:	9308      	str	r3, [sp, #32]
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	462f      	mov	r7, r5
 8008fe8:	9306      	str	r3, [sp, #24]
 8008fea:	4605      	mov	r5, r0
 8008fec:	9b00      	ldr	r3, [sp, #0]
 8008fee:	9802      	ldr	r0, [sp, #8]
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ff6:	f7ff fa8a 	bl	800850e <quorem>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	3330      	adds	r3, #48	@ 0x30
 8008ffe:	9003      	str	r0, [sp, #12]
 8009000:	4639      	mov	r1, r7
 8009002:	9802      	ldr	r0, [sp, #8]
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	f000 fc4d 	bl	80098a4 <__mcmp>
 800900a:	462a      	mov	r2, r5
 800900c:	9004      	str	r0, [sp, #16]
 800900e:	4621      	mov	r1, r4
 8009010:	4648      	mov	r0, r9
 8009012:	f000 fc63 	bl	80098dc <__mdiff>
 8009016:	68c2      	ldr	r2, [r0, #12]
 8009018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901a:	4606      	mov	r6, r0
 800901c:	bb02      	cbnz	r2, 8009060 <_dtoa_r+0xa40>
 800901e:	4601      	mov	r1, r0
 8009020:	9802      	ldr	r0, [sp, #8]
 8009022:	f000 fc3f 	bl	80098a4 <__mcmp>
 8009026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009028:	4602      	mov	r2, r0
 800902a:	4631      	mov	r1, r6
 800902c:	4648      	mov	r0, r9
 800902e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009030:	9309      	str	r3, [sp, #36]	@ 0x24
 8009032:	f000 fa05 	bl	8009440 <_Bfree>
 8009036:	9b07      	ldr	r3, [sp, #28]
 8009038:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800903a:	9e00      	ldr	r6, [sp, #0]
 800903c:	ea42 0103 	orr.w	r1, r2, r3
 8009040:	9b06      	ldr	r3, [sp, #24]
 8009042:	4319      	orrs	r1, r3
 8009044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009046:	d10d      	bne.n	8009064 <_dtoa_r+0xa44>
 8009048:	2b39      	cmp	r3, #57	@ 0x39
 800904a:	d027      	beq.n	800909c <_dtoa_r+0xa7c>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	2a00      	cmp	r2, #0
 8009050:	dd01      	ble.n	8009056 <_dtoa_r+0xa36>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	3331      	adds	r3, #49	@ 0x31
 8009056:	f88b 3000 	strb.w	r3, [fp]
 800905a:	e52e      	b.n	8008aba <_dtoa_r+0x49a>
 800905c:	4628      	mov	r0, r5
 800905e:	e7b9      	b.n	8008fd4 <_dtoa_r+0x9b4>
 8009060:	2201      	movs	r2, #1
 8009062:	e7e2      	b.n	800902a <_dtoa_r+0xa0a>
 8009064:	9904      	ldr	r1, [sp, #16]
 8009066:	2900      	cmp	r1, #0
 8009068:	db04      	blt.n	8009074 <_dtoa_r+0xa54>
 800906a:	9807      	ldr	r0, [sp, #28]
 800906c:	4301      	orrs	r1, r0
 800906e:	9806      	ldr	r0, [sp, #24]
 8009070:	4301      	orrs	r1, r0
 8009072:	d120      	bne.n	80090b6 <_dtoa_r+0xa96>
 8009074:	2a00      	cmp	r2, #0
 8009076:	ddee      	ble.n	8009056 <_dtoa_r+0xa36>
 8009078:	9902      	ldr	r1, [sp, #8]
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2201      	movs	r2, #1
 800907e:	4648      	mov	r0, r9
 8009080:	f000 fba4 	bl	80097cc <__lshift>
 8009084:	4621      	mov	r1, r4
 8009086:	9002      	str	r0, [sp, #8]
 8009088:	f000 fc0c 	bl	80098a4 <__mcmp>
 800908c:	2800      	cmp	r0, #0
 800908e:	9b00      	ldr	r3, [sp, #0]
 8009090:	dc02      	bgt.n	8009098 <_dtoa_r+0xa78>
 8009092:	d1e0      	bne.n	8009056 <_dtoa_r+0xa36>
 8009094:	07da      	lsls	r2, r3, #31
 8009096:	d5de      	bpl.n	8009056 <_dtoa_r+0xa36>
 8009098:	2b39      	cmp	r3, #57	@ 0x39
 800909a:	d1da      	bne.n	8009052 <_dtoa_r+0xa32>
 800909c:	2339      	movs	r3, #57	@ 0x39
 800909e:	f88b 3000 	strb.w	r3, [fp]
 80090a2:	4633      	mov	r3, r6
 80090a4:	461e      	mov	r6, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090ac:	2a39      	cmp	r2, #57	@ 0x39
 80090ae:	d04e      	beq.n	800914e <_dtoa_r+0xb2e>
 80090b0:	3201      	adds	r2, #1
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	e501      	b.n	8008aba <_dtoa_r+0x49a>
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	dd03      	ble.n	80090c2 <_dtoa_r+0xaa2>
 80090ba:	2b39      	cmp	r3, #57	@ 0x39
 80090bc:	d0ee      	beq.n	800909c <_dtoa_r+0xa7c>
 80090be:	3301      	adds	r3, #1
 80090c0:	e7c9      	b.n	8009056 <_dtoa_r+0xa36>
 80090c2:	9a00      	ldr	r2, [sp, #0]
 80090c4:	9908      	ldr	r1, [sp, #32]
 80090c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090ca:	428a      	cmp	r2, r1
 80090cc:	d028      	beq.n	8009120 <_dtoa_r+0xb00>
 80090ce:	9902      	ldr	r1, [sp, #8]
 80090d0:	2300      	movs	r3, #0
 80090d2:	220a      	movs	r2, #10
 80090d4:	4648      	mov	r0, r9
 80090d6:	f000 f9d5 	bl	8009484 <__multadd>
 80090da:	42af      	cmp	r7, r5
 80090dc:	9002      	str	r0, [sp, #8]
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	f04f 020a 	mov.w	r2, #10
 80090e6:	4639      	mov	r1, r7
 80090e8:	4648      	mov	r0, r9
 80090ea:	d107      	bne.n	80090fc <_dtoa_r+0xadc>
 80090ec:	f000 f9ca 	bl	8009484 <__multadd>
 80090f0:	4607      	mov	r7, r0
 80090f2:	4605      	mov	r5, r0
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	e777      	b.n	8008fec <_dtoa_r+0x9cc>
 80090fc:	f000 f9c2 	bl	8009484 <__multadd>
 8009100:	4629      	mov	r1, r5
 8009102:	4607      	mov	r7, r0
 8009104:	2300      	movs	r3, #0
 8009106:	220a      	movs	r2, #10
 8009108:	4648      	mov	r0, r9
 800910a:	f000 f9bb 	bl	8009484 <__multadd>
 800910e:	4605      	mov	r5, r0
 8009110:	e7f0      	b.n	80090f4 <_dtoa_r+0xad4>
 8009112:	f1bb 0f00 	cmp.w	fp, #0
 8009116:	bfcc      	ite	gt
 8009118:	465e      	movgt	r6, fp
 800911a:	2601      	movle	r6, #1
 800911c:	4456      	add	r6, sl
 800911e:	2700      	movs	r7, #0
 8009120:	9902      	ldr	r1, [sp, #8]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2201      	movs	r2, #1
 8009126:	4648      	mov	r0, r9
 8009128:	f000 fb50 	bl	80097cc <__lshift>
 800912c:	4621      	mov	r1, r4
 800912e:	9002      	str	r0, [sp, #8]
 8009130:	f000 fbb8 	bl	80098a4 <__mcmp>
 8009134:	2800      	cmp	r0, #0
 8009136:	dcb4      	bgt.n	80090a2 <_dtoa_r+0xa82>
 8009138:	d102      	bne.n	8009140 <_dtoa_r+0xb20>
 800913a:	9b00      	ldr	r3, [sp, #0]
 800913c:	07db      	lsls	r3, r3, #31
 800913e:	d4b0      	bmi.n	80090a2 <_dtoa_r+0xa82>
 8009140:	4633      	mov	r3, r6
 8009142:	461e      	mov	r6, r3
 8009144:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009148:	2a30      	cmp	r2, #48	@ 0x30
 800914a:	d0fa      	beq.n	8009142 <_dtoa_r+0xb22>
 800914c:	e4b5      	b.n	8008aba <_dtoa_r+0x49a>
 800914e:	459a      	cmp	sl, r3
 8009150:	d1a8      	bne.n	80090a4 <_dtoa_r+0xa84>
 8009152:	2331      	movs	r3, #49	@ 0x31
 8009154:	f108 0801 	add.w	r8, r8, #1
 8009158:	f88a 3000 	strb.w	r3, [sl]
 800915c:	e4ad      	b.n	8008aba <_dtoa_r+0x49a>
 800915e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009160:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80091bc <_dtoa_r+0xb9c>
 8009164:	b11b      	cbz	r3, 800916e <_dtoa_r+0xb4e>
 8009166:	f10a 0308 	add.w	r3, sl, #8
 800916a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	4650      	mov	r0, sl
 8009170:	b017      	add	sp, #92	@ 0x5c
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	2b01      	cmp	r3, #1
 800917a:	f77f ae2e 	ble.w	8008dda <_dtoa_r+0x7ba>
 800917e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009180:	9308      	str	r3, [sp, #32]
 8009182:	2001      	movs	r0, #1
 8009184:	e64d      	b.n	8008e22 <_dtoa_r+0x802>
 8009186:	f1bb 0f00 	cmp.w	fp, #0
 800918a:	f77f aed9 	ble.w	8008f40 <_dtoa_r+0x920>
 800918e:	4656      	mov	r6, sl
 8009190:	9802      	ldr	r0, [sp, #8]
 8009192:	4621      	mov	r1, r4
 8009194:	f7ff f9bb 	bl	800850e <quorem>
 8009198:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800919c:	f806 3b01 	strb.w	r3, [r6], #1
 80091a0:	eba6 020a 	sub.w	r2, r6, sl
 80091a4:	4593      	cmp	fp, r2
 80091a6:	ddb4      	ble.n	8009112 <_dtoa_r+0xaf2>
 80091a8:	9902      	ldr	r1, [sp, #8]
 80091aa:	2300      	movs	r3, #0
 80091ac:	220a      	movs	r2, #10
 80091ae:	4648      	mov	r0, r9
 80091b0:	f000 f968 	bl	8009484 <__multadd>
 80091b4:	9002      	str	r0, [sp, #8]
 80091b6:	e7eb      	b.n	8009190 <_dtoa_r+0xb70>
 80091b8:	0800a6e0 	.word	0x0800a6e0
 80091bc:	0800a664 	.word	0x0800a664

080091c0 <_free_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4605      	mov	r5, r0
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d041      	beq.n	800924c <_free_r+0x8c>
 80091c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091cc:	1f0c      	subs	r4, r1, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	18e4      	addlt	r4, r4, r3
 80091d4:	f000 f8e8 	bl	80093a8 <__malloc_lock>
 80091d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009250 <_free_r+0x90>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x2c>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	4628      	mov	r0, r5
 80091e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e8:	f000 b8e4 	b.w	80093b4 <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x42>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	1821      	adds	r1, r4, r0
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x1e>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x4c>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x42>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1850      	adds	r0, r2, r1
 8009210:	42a0      	cmp	r0, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x6c>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	4401      	add	r1, r0
 8009218:	1850      	adds	r0, r2, r1
 800921a:	4283      	cmp	r3, r0
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x22>
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4408      	add	r0, r1
 8009228:	6010      	str	r0, [r2, #0]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x22>
 800922c:	d902      	bls.n	8009234 <_free_r+0x74>
 800922e:	230c      	movs	r3, #12
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x22>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	1821      	adds	r1, r4, r0
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1809      	addeq	r1, r1, r0
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7ca      	b.n	80091e2 <_free_r+0x22>
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	20004d44 	.word	0x20004d44

08009254 <malloc>:
 8009254:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <malloc+0xc>)
 8009256:	4601      	mov	r1, r0
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f000 b825 	b.w	80092a8 <_malloc_r>
 800925e:	bf00      	nop
 8009260:	2000001c 	.word	0x2000001c

08009264 <sbrk_aligned>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4e0f      	ldr	r6, [pc, #60]	@ (80092a4 <sbrk_aligned+0x40>)
 8009268:	460c      	mov	r4, r1
 800926a:	6831      	ldr	r1, [r6, #0]
 800926c:	4605      	mov	r5, r0
 800926e:	b911      	cbnz	r1, 8009276 <sbrk_aligned+0x12>
 8009270:	f000 fe3e 	bl	8009ef0 <_sbrk_r>
 8009274:	6030      	str	r0, [r6, #0]
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	f000 fe39 	bl	8009ef0 <_sbrk_r>
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	d103      	bne.n	800928a <sbrk_aligned+0x26>
 8009282:	f04f 34ff 	mov.w	r4, #4294967295
 8009286:	4620      	mov	r0, r4
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	1cc4      	adds	r4, r0, #3
 800928c:	f024 0403 	bic.w	r4, r4, #3
 8009290:	42a0      	cmp	r0, r4
 8009292:	d0f8      	beq.n	8009286 <sbrk_aligned+0x22>
 8009294:	1a21      	subs	r1, r4, r0
 8009296:	4628      	mov	r0, r5
 8009298:	f000 fe2a 	bl	8009ef0 <_sbrk_r>
 800929c:	3001      	adds	r0, #1
 800929e:	d1f2      	bne.n	8009286 <sbrk_aligned+0x22>
 80092a0:	e7ef      	b.n	8009282 <sbrk_aligned+0x1e>
 80092a2:	bf00      	nop
 80092a4:	20004d40 	.word	0x20004d40

080092a8 <_malloc_r>:
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	1ccd      	adds	r5, r1, #3
 80092ae:	f025 0503 	bic.w	r5, r5, #3
 80092b2:	3508      	adds	r5, #8
 80092b4:	2d0c      	cmp	r5, #12
 80092b6:	bf38      	it	cc
 80092b8:	250c      	movcc	r5, #12
 80092ba:	2d00      	cmp	r5, #0
 80092bc:	4606      	mov	r6, r0
 80092be:	db01      	blt.n	80092c4 <_malloc_r+0x1c>
 80092c0:	42a9      	cmp	r1, r5
 80092c2:	d904      	bls.n	80092ce <_malloc_r+0x26>
 80092c4:	230c      	movs	r3, #12
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	2000      	movs	r0, #0
 80092ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093a4 <_malloc_r+0xfc>
 80092d2:	f000 f869 	bl	80093a8 <__malloc_lock>
 80092d6:	f8d8 3000 	ldr.w	r3, [r8]
 80092da:	461c      	mov	r4, r3
 80092dc:	bb44      	cbnz	r4, 8009330 <_malloc_r+0x88>
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff ffbf 	bl	8009264 <sbrk_aligned>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	4604      	mov	r4, r0
 80092ea:	d158      	bne.n	800939e <_malloc_r+0xf6>
 80092ec:	f8d8 4000 	ldr.w	r4, [r8]
 80092f0:	4627      	mov	r7, r4
 80092f2:	2f00      	cmp	r7, #0
 80092f4:	d143      	bne.n	800937e <_malloc_r+0xd6>
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	d04b      	beq.n	8009392 <_malloc_r+0xea>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	4639      	mov	r1, r7
 80092fe:	4630      	mov	r0, r6
 8009300:	eb04 0903 	add.w	r9, r4, r3
 8009304:	f000 fdf4 	bl	8009ef0 <_sbrk_r>
 8009308:	4581      	cmp	r9, r0
 800930a:	d142      	bne.n	8009392 <_malloc_r+0xea>
 800930c:	6821      	ldr	r1, [r4, #0]
 800930e:	1a6d      	subs	r5, r5, r1
 8009310:	4629      	mov	r1, r5
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff ffa6 	bl	8009264 <sbrk_aligned>
 8009318:	3001      	adds	r0, #1
 800931a:	d03a      	beq.n	8009392 <_malloc_r+0xea>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	442b      	add	r3, r5
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	f8d8 3000 	ldr.w	r3, [r8]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	bb62      	cbnz	r2, 8009384 <_malloc_r+0xdc>
 800932a:	f8c8 7000 	str.w	r7, [r8]
 800932e:	e00f      	b.n	8009350 <_malloc_r+0xa8>
 8009330:	6822      	ldr	r2, [r4, #0]
 8009332:	1b52      	subs	r2, r2, r5
 8009334:	d420      	bmi.n	8009378 <_malloc_r+0xd0>
 8009336:	2a0b      	cmp	r2, #11
 8009338:	d917      	bls.n	800936a <_malloc_r+0xc2>
 800933a:	1961      	adds	r1, r4, r5
 800933c:	42a3      	cmp	r3, r4
 800933e:	6025      	str	r5, [r4, #0]
 8009340:	bf18      	it	ne
 8009342:	6059      	strne	r1, [r3, #4]
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	bf08      	it	eq
 8009348:	f8c8 1000 	streq.w	r1, [r8]
 800934c:	5162      	str	r2, [r4, r5]
 800934e:	604b      	str	r3, [r1, #4]
 8009350:	4630      	mov	r0, r6
 8009352:	f000 f82f 	bl	80093b4 <__malloc_unlock>
 8009356:	f104 000b 	add.w	r0, r4, #11
 800935a:	1d23      	adds	r3, r4, #4
 800935c:	f020 0007 	bic.w	r0, r0, #7
 8009360:	1ac2      	subs	r2, r0, r3
 8009362:	bf1c      	itt	ne
 8009364:	1a1b      	subne	r3, r3, r0
 8009366:	50a3      	strne	r3, [r4, r2]
 8009368:	e7af      	b.n	80092ca <_malloc_r+0x22>
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	42a3      	cmp	r3, r4
 800936e:	bf0c      	ite	eq
 8009370:	f8c8 2000 	streq.w	r2, [r8]
 8009374:	605a      	strne	r2, [r3, #4]
 8009376:	e7eb      	b.n	8009350 <_malloc_r+0xa8>
 8009378:	4623      	mov	r3, r4
 800937a:	6864      	ldr	r4, [r4, #4]
 800937c:	e7ae      	b.n	80092dc <_malloc_r+0x34>
 800937e:	463c      	mov	r4, r7
 8009380:	687f      	ldr	r7, [r7, #4]
 8009382:	e7b6      	b.n	80092f2 <_malloc_r+0x4a>
 8009384:	461a      	mov	r2, r3
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	42a3      	cmp	r3, r4
 800938a:	d1fb      	bne.n	8009384 <_malloc_r+0xdc>
 800938c:	2300      	movs	r3, #0
 800938e:	6053      	str	r3, [r2, #4]
 8009390:	e7de      	b.n	8009350 <_malloc_r+0xa8>
 8009392:	230c      	movs	r3, #12
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	4630      	mov	r0, r6
 8009398:	f000 f80c 	bl	80093b4 <__malloc_unlock>
 800939c:	e794      	b.n	80092c8 <_malloc_r+0x20>
 800939e:	6005      	str	r5, [r0, #0]
 80093a0:	e7d6      	b.n	8009350 <_malloc_r+0xa8>
 80093a2:	bf00      	nop
 80093a4:	20004d44 	.word	0x20004d44

080093a8 <__malloc_lock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	@ (80093b0 <__malloc_lock+0x8>)
 80093aa:	f7ff b8a0 	b.w	80084ee <__retarget_lock_acquire_recursive>
 80093ae:	bf00      	nop
 80093b0:	20004d3c 	.word	0x20004d3c

080093b4 <__malloc_unlock>:
 80093b4:	4801      	ldr	r0, [pc, #4]	@ (80093bc <__malloc_unlock+0x8>)
 80093b6:	f7ff b89b 	b.w	80084f0 <__retarget_lock_release_recursive>
 80093ba:	bf00      	nop
 80093bc:	20004d3c 	.word	0x20004d3c

080093c0 <_Balloc>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	69c6      	ldr	r6, [r0, #28]
 80093c4:	4604      	mov	r4, r0
 80093c6:	460d      	mov	r5, r1
 80093c8:	b976      	cbnz	r6, 80093e8 <_Balloc+0x28>
 80093ca:	2010      	movs	r0, #16
 80093cc:	f7ff ff42 	bl	8009254 <malloc>
 80093d0:	4602      	mov	r2, r0
 80093d2:	61e0      	str	r0, [r4, #28]
 80093d4:	b920      	cbnz	r0, 80093e0 <_Balloc+0x20>
 80093d6:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <_Balloc+0x78>)
 80093d8:	4818      	ldr	r0, [pc, #96]	@ (800943c <_Balloc+0x7c>)
 80093da:	216b      	movs	r1, #107	@ 0x6b
 80093dc:	f000 fd98 	bl	8009f10 <__assert_func>
 80093e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e4:	6006      	str	r6, [r0, #0]
 80093e6:	60c6      	str	r6, [r0, #12]
 80093e8:	69e6      	ldr	r6, [r4, #28]
 80093ea:	68f3      	ldr	r3, [r6, #12]
 80093ec:	b183      	cbz	r3, 8009410 <_Balloc+0x50>
 80093ee:	69e3      	ldr	r3, [r4, #28]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093f6:	b9b8      	cbnz	r0, 8009428 <_Balloc+0x68>
 80093f8:	2101      	movs	r1, #1
 80093fa:	fa01 f605 	lsl.w	r6, r1, r5
 80093fe:	1d72      	adds	r2, r6, #5
 8009400:	0092      	lsls	r2, r2, #2
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fda2 	bl	8009f4c <_calloc_r>
 8009408:	b160      	cbz	r0, 8009424 <_Balloc+0x64>
 800940a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800940e:	e00e      	b.n	800942e <_Balloc+0x6e>
 8009410:	2221      	movs	r2, #33	@ 0x21
 8009412:	2104      	movs	r1, #4
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fd99 	bl	8009f4c <_calloc_r>
 800941a:	69e3      	ldr	r3, [r4, #28]
 800941c:	60f0      	str	r0, [r6, #12]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e4      	bne.n	80093ee <_Balloc+0x2e>
 8009424:	2000      	movs	r0, #0
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	6802      	ldr	r2, [r0, #0]
 800942a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800942e:	2300      	movs	r3, #0
 8009430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009434:	e7f7      	b.n	8009426 <_Balloc+0x66>
 8009436:	bf00      	nop
 8009438:	0800a671 	.word	0x0800a671
 800943c:	0800a6f1 	.word	0x0800a6f1

08009440 <_Bfree>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	69c6      	ldr	r6, [r0, #28]
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	b976      	cbnz	r6, 8009468 <_Bfree+0x28>
 800944a:	2010      	movs	r0, #16
 800944c:	f7ff ff02 	bl	8009254 <malloc>
 8009450:	4602      	mov	r2, r0
 8009452:	61e8      	str	r0, [r5, #28]
 8009454:	b920      	cbnz	r0, 8009460 <_Bfree+0x20>
 8009456:	4b09      	ldr	r3, [pc, #36]	@ (800947c <_Bfree+0x3c>)
 8009458:	4809      	ldr	r0, [pc, #36]	@ (8009480 <_Bfree+0x40>)
 800945a:	218f      	movs	r1, #143	@ 0x8f
 800945c:	f000 fd58 	bl	8009f10 <__assert_func>
 8009460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009464:	6006      	str	r6, [r0, #0]
 8009466:	60c6      	str	r6, [r0, #12]
 8009468:	b13c      	cbz	r4, 800947a <_Bfree+0x3a>
 800946a:	69eb      	ldr	r3, [r5, #28]
 800946c:	6862      	ldr	r2, [r4, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009474:	6021      	str	r1, [r4, #0]
 8009476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	0800a671 	.word	0x0800a671
 8009480:	0800a6f1 	.word	0x0800a6f1

08009484 <__multadd>:
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	690d      	ldr	r5, [r1, #16]
 800948a:	4607      	mov	r7, r0
 800948c:	460c      	mov	r4, r1
 800948e:	461e      	mov	r6, r3
 8009490:	f101 0c14 	add.w	ip, r1, #20
 8009494:	2000      	movs	r0, #0
 8009496:	f8dc 3000 	ldr.w	r3, [ip]
 800949a:	b299      	uxth	r1, r3
 800949c:	fb02 6101 	mla	r1, r2, r1, r6
 80094a0:	0c1e      	lsrs	r6, r3, #16
 80094a2:	0c0b      	lsrs	r3, r1, #16
 80094a4:	fb02 3306 	mla	r3, r2, r6, r3
 80094a8:	b289      	uxth	r1, r1
 80094aa:	3001      	adds	r0, #1
 80094ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094b0:	4285      	cmp	r5, r0
 80094b2:	f84c 1b04 	str.w	r1, [ip], #4
 80094b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094ba:	dcec      	bgt.n	8009496 <__multadd+0x12>
 80094bc:	b30e      	cbz	r6, 8009502 <__multadd+0x7e>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	42ab      	cmp	r3, r5
 80094c2:	dc19      	bgt.n	80094f8 <__multadd+0x74>
 80094c4:	6861      	ldr	r1, [r4, #4]
 80094c6:	4638      	mov	r0, r7
 80094c8:	3101      	adds	r1, #1
 80094ca:	f7ff ff79 	bl	80093c0 <_Balloc>
 80094ce:	4680      	mov	r8, r0
 80094d0:	b928      	cbnz	r0, 80094de <__multadd+0x5a>
 80094d2:	4602      	mov	r2, r0
 80094d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <__multadd+0x84>)
 80094d6:	480d      	ldr	r0, [pc, #52]	@ (800950c <__multadd+0x88>)
 80094d8:	21ba      	movs	r1, #186	@ 0xba
 80094da:	f000 fd19 	bl	8009f10 <__assert_func>
 80094de:	6922      	ldr	r2, [r4, #16]
 80094e0:	3202      	adds	r2, #2
 80094e2:	f104 010c 	add.w	r1, r4, #12
 80094e6:	0092      	lsls	r2, r2, #2
 80094e8:	300c      	adds	r0, #12
 80094ea:	f7ff f802 	bl	80084f2 <memcpy>
 80094ee:	4621      	mov	r1, r4
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff ffa5 	bl	8009440 <_Bfree>
 80094f6:	4644      	mov	r4, r8
 80094f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094fc:	3501      	adds	r5, #1
 80094fe:	615e      	str	r6, [r3, #20]
 8009500:	6125      	str	r5, [r4, #16]
 8009502:	4620      	mov	r0, r4
 8009504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009508:	0800a6e0 	.word	0x0800a6e0
 800950c:	0800a6f1 	.word	0x0800a6f1

08009510 <__hi0bits>:
 8009510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009514:	4603      	mov	r3, r0
 8009516:	bf36      	itet	cc
 8009518:	0403      	lslcc	r3, r0, #16
 800951a:	2000      	movcs	r0, #0
 800951c:	2010      	movcc	r0, #16
 800951e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009522:	bf3c      	itt	cc
 8009524:	021b      	lslcc	r3, r3, #8
 8009526:	3008      	addcc	r0, #8
 8009528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800952c:	bf3c      	itt	cc
 800952e:	011b      	lslcc	r3, r3, #4
 8009530:	3004      	addcc	r0, #4
 8009532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009536:	bf3c      	itt	cc
 8009538:	009b      	lslcc	r3, r3, #2
 800953a:	3002      	addcc	r0, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	db05      	blt.n	800954c <__hi0bits+0x3c>
 8009540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009544:	f100 0001 	add.w	r0, r0, #1
 8009548:	bf08      	it	eq
 800954a:	2020      	moveq	r0, #32
 800954c:	4770      	bx	lr

0800954e <__lo0bits>:
 800954e:	6803      	ldr	r3, [r0, #0]
 8009550:	4602      	mov	r2, r0
 8009552:	f013 0007 	ands.w	r0, r3, #7
 8009556:	d00b      	beq.n	8009570 <__lo0bits+0x22>
 8009558:	07d9      	lsls	r1, r3, #31
 800955a:	d421      	bmi.n	80095a0 <__lo0bits+0x52>
 800955c:	0798      	lsls	r0, r3, #30
 800955e:	bf49      	itett	mi
 8009560:	085b      	lsrmi	r3, r3, #1
 8009562:	089b      	lsrpl	r3, r3, #2
 8009564:	2001      	movmi	r0, #1
 8009566:	6013      	strmi	r3, [r2, #0]
 8009568:	bf5c      	itt	pl
 800956a:	6013      	strpl	r3, [r2, #0]
 800956c:	2002      	movpl	r0, #2
 800956e:	4770      	bx	lr
 8009570:	b299      	uxth	r1, r3
 8009572:	b909      	cbnz	r1, 8009578 <__lo0bits+0x2a>
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	2010      	movs	r0, #16
 8009578:	b2d9      	uxtb	r1, r3
 800957a:	b909      	cbnz	r1, 8009580 <__lo0bits+0x32>
 800957c:	3008      	adds	r0, #8
 800957e:	0a1b      	lsrs	r3, r3, #8
 8009580:	0719      	lsls	r1, r3, #28
 8009582:	bf04      	itt	eq
 8009584:	091b      	lsreq	r3, r3, #4
 8009586:	3004      	addeq	r0, #4
 8009588:	0799      	lsls	r1, r3, #30
 800958a:	bf04      	itt	eq
 800958c:	089b      	lsreq	r3, r3, #2
 800958e:	3002      	addeq	r0, #2
 8009590:	07d9      	lsls	r1, r3, #31
 8009592:	d403      	bmi.n	800959c <__lo0bits+0x4e>
 8009594:	085b      	lsrs	r3, r3, #1
 8009596:	f100 0001 	add.w	r0, r0, #1
 800959a:	d003      	beq.n	80095a4 <__lo0bits+0x56>
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	4770      	bx	lr
 80095a0:	2000      	movs	r0, #0
 80095a2:	4770      	bx	lr
 80095a4:	2020      	movs	r0, #32
 80095a6:	4770      	bx	lr

080095a8 <__i2b>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	460c      	mov	r4, r1
 80095ac:	2101      	movs	r1, #1
 80095ae:	f7ff ff07 	bl	80093c0 <_Balloc>
 80095b2:	4602      	mov	r2, r0
 80095b4:	b928      	cbnz	r0, 80095c2 <__i2b+0x1a>
 80095b6:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <__i2b+0x24>)
 80095b8:	4805      	ldr	r0, [pc, #20]	@ (80095d0 <__i2b+0x28>)
 80095ba:	f240 1145 	movw	r1, #325	@ 0x145
 80095be:	f000 fca7 	bl	8009f10 <__assert_func>
 80095c2:	2301      	movs	r3, #1
 80095c4:	6144      	str	r4, [r0, #20]
 80095c6:	6103      	str	r3, [r0, #16]
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	bf00      	nop
 80095cc:	0800a6e0 	.word	0x0800a6e0
 80095d0:	0800a6f1 	.word	0x0800a6f1

080095d4 <__multiply>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	4617      	mov	r7, r2
 80095da:	690a      	ldr	r2, [r1, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	bfa8      	it	ge
 80095e2:	463b      	movge	r3, r7
 80095e4:	4689      	mov	r9, r1
 80095e6:	bfa4      	itt	ge
 80095e8:	460f      	movge	r7, r1
 80095ea:	4699      	movge	r9, r3
 80095ec:	693d      	ldr	r5, [r7, #16]
 80095ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	eb05 060a 	add.w	r6, r5, sl
 80095fa:	42b3      	cmp	r3, r6
 80095fc:	b085      	sub	sp, #20
 80095fe:	bfb8      	it	lt
 8009600:	3101      	addlt	r1, #1
 8009602:	f7ff fedd 	bl	80093c0 <_Balloc>
 8009606:	b930      	cbnz	r0, 8009616 <__multiply+0x42>
 8009608:	4602      	mov	r2, r0
 800960a:	4b41      	ldr	r3, [pc, #260]	@ (8009710 <__multiply+0x13c>)
 800960c:	4841      	ldr	r0, [pc, #260]	@ (8009714 <__multiply+0x140>)
 800960e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009612:	f000 fc7d 	bl	8009f10 <__assert_func>
 8009616:	f100 0414 	add.w	r4, r0, #20
 800961a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800961e:	4623      	mov	r3, r4
 8009620:	2200      	movs	r2, #0
 8009622:	4573      	cmp	r3, lr
 8009624:	d320      	bcc.n	8009668 <__multiply+0x94>
 8009626:	f107 0814 	add.w	r8, r7, #20
 800962a:	f109 0114 	add.w	r1, r9, #20
 800962e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009632:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	1beb      	subs	r3, r5, r7
 800963a:	3b15      	subs	r3, #21
 800963c:	f023 0303 	bic.w	r3, r3, #3
 8009640:	3304      	adds	r3, #4
 8009642:	3715      	adds	r7, #21
 8009644:	42bd      	cmp	r5, r7
 8009646:	bf38      	it	cc
 8009648:	2304      	movcc	r3, #4
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	9b02      	ldr	r3, [sp, #8]
 800964e:	9103      	str	r1, [sp, #12]
 8009650:	428b      	cmp	r3, r1
 8009652:	d80c      	bhi.n	800966e <__multiply+0x9a>
 8009654:	2e00      	cmp	r6, #0
 8009656:	dd03      	ble.n	8009660 <__multiply+0x8c>
 8009658:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800965c:	2b00      	cmp	r3, #0
 800965e:	d055      	beq.n	800970c <__multiply+0x138>
 8009660:	6106      	str	r6, [r0, #16]
 8009662:	b005      	add	sp, #20
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	f843 2b04 	str.w	r2, [r3], #4
 800966c:	e7d9      	b.n	8009622 <__multiply+0x4e>
 800966e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009672:	f1ba 0f00 	cmp.w	sl, #0
 8009676:	d01f      	beq.n	80096b8 <__multiply+0xe4>
 8009678:	46c4      	mov	ip, r8
 800967a:	46a1      	mov	r9, r4
 800967c:	2700      	movs	r7, #0
 800967e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009682:	f8d9 3000 	ldr.w	r3, [r9]
 8009686:	fa1f fb82 	uxth.w	fp, r2
 800968a:	b29b      	uxth	r3, r3
 800968c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009690:	443b      	add	r3, r7
 8009692:	f8d9 7000 	ldr.w	r7, [r9]
 8009696:	0c12      	lsrs	r2, r2, #16
 8009698:	0c3f      	lsrs	r7, r7, #16
 800969a:	fb0a 7202 	mla	r2, sl, r2, r7
 800969e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a8:	4565      	cmp	r5, ip
 80096aa:	f849 3b04 	str.w	r3, [r9], #4
 80096ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80096b2:	d8e4      	bhi.n	800967e <__multiply+0xaa>
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	50e7      	str	r7, [r4, r3]
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096be:	3104      	adds	r1, #4
 80096c0:	f1b9 0f00 	cmp.w	r9, #0
 80096c4:	d020      	beq.n	8009708 <__multiply+0x134>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	4647      	mov	r7, r8
 80096ca:	46a4      	mov	ip, r4
 80096cc:	f04f 0a00 	mov.w	sl, #0
 80096d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80096d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80096d8:	fb09 220b 	mla	r2, r9, fp, r2
 80096dc:	4452      	add	r2, sl
 80096de:	b29b      	uxth	r3, r3
 80096e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096e4:	f84c 3b04 	str.w	r3, [ip], #4
 80096e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80096ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80096f4:	fb09 330a 	mla	r3, r9, sl, r3
 80096f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096fc:	42bd      	cmp	r5, r7
 80096fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009702:	d8e5      	bhi.n	80096d0 <__multiply+0xfc>
 8009704:	9a01      	ldr	r2, [sp, #4]
 8009706:	50a3      	str	r3, [r4, r2]
 8009708:	3404      	adds	r4, #4
 800970a:	e79f      	b.n	800964c <__multiply+0x78>
 800970c:	3e01      	subs	r6, #1
 800970e:	e7a1      	b.n	8009654 <__multiply+0x80>
 8009710:	0800a6e0 	.word	0x0800a6e0
 8009714:	0800a6f1 	.word	0x0800a6f1

08009718 <__pow5mult>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	4615      	mov	r5, r2
 800971e:	f012 0203 	ands.w	r2, r2, #3
 8009722:	4607      	mov	r7, r0
 8009724:	460e      	mov	r6, r1
 8009726:	d007      	beq.n	8009738 <__pow5mult+0x20>
 8009728:	4c25      	ldr	r4, [pc, #148]	@ (80097c0 <__pow5mult+0xa8>)
 800972a:	3a01      	subs	r2, #1
 800972c:	2300      	movs	r3, #0
 800972e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009732:	f7ff fea7 	bl	8009484 <__multadd>
 8009736:	4606      	mov	r6, r0
 8009738:	10ad      	asrs	r5, r5, #2
 800973a:	d03d      	beq.n	80097b8 <__pow5mult+0xa0>
 800973c:	69fc      	ldr	r4, [r7, #28]
 800973e:	b97c      	cbnz	r4, 8009760 <__pow5mult+0x48>
 8009740:	2010      	movs	r0, #16
 8009742:	f7ff fd87 	bl	8009254 <malloc>
 8009746:	4602      	mov	r2, r0
 8009748:	61f8      	str	r0, [r7, #28]
 800974a:	b928      	cbnz	r0, 8009758 <__pow5mult+0x40>
 800974c:	4b1d      	ldr	r3, [pc, #116]	@ (80097c4 <__pow5mult+0xac>)
 800974e:	481e      	ldr	r0, [pc, #120]	@ (80097c8 <__pow5mult+0xb0>)
 8009750:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009754:	f000 fbdc 	bl	8009f10 <__assert_func>
 8009758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800975c:	6004      	str	r4, [r0, #0]
 800975e:	60c4      	str	r4, [r0, #12]
 8009760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009768:	b94c      	cbnz	r4, 800977e <__pow5mult+0x66>
 800976a:	f240 2171 	movw	r1, #625	@ 0x271
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff ff1a 	bl	80095a8 <__i2b>
 8009774:	2300      	movs	r3, #0
 8009776:	f8c8 0008 	str.w	r0, [r8, #8]
 800977a:	4604      	mov	r4, r0
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	f04f 0900 	mov.w	r9, #0
 8009782:	07eb      	lsls	r3, r5, #31
 8009784:	d50a      	bpl.n	800979c <__pow5mult+0x84>
 8009786:	4631      	mov	r1, r6
 8009788:	4622      	mov	r2, r4
 800978a:	4638      	mov	r0, r7
 800978c:	f7ff ff22 	bl	80095d4 <__multiply>
 8009790:	4631      	mov	r1, r6
 8009792:	4680      	mov	r8, r0
 8009794:	4638      	mov	r0, r7
 8009796:	f7ff fe53 	bl	8009440 <_Bfree>
 800979a:	4646      	mov	r6, r8
 800979c:	106d      	asrs	r5, r5, #1
 800979e:	d00b      	beq.n	80097b8 <__pow5mult+0xa0>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	b938      	cbnz	r0, 80097b4 <__pow5mult+0x9c>
 80097a4:	4622      	mov	r2, r4
 80097a6:	4621      	mov	r1, r4
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff ff13 	bl	80095d4 <__multiply>
 80097ae:	6020      	str	r0, [r4, #0]
 80097b0:	f8c0 9000 	str.w	r9, [r0]
 80097b4:	4604      	mov	r4, r0
 80097b6:	e7e4      	b.n	8009782 <__pow5mult+0x6a>
 80097b8:	4630      	mov	r0, r6
 80097ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097be:	bf00      	nop
 80097c0:	0800a7a4 	.word	0x0800a7a4
 80097c4:	0800a671 	.word	0x0800a671
 80097c8:	0800a6f1 	.word	0x0800a6f1

080097cc <__lshift>:
 80097cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	6849      	ldr	r1, [r1, #4]
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	4607      	mov	r7, r0
 80097de:	4691      	mov	r9, r2
 80097e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097e4:	f108 0601 	add.w	r6, r8, #1
 80097e8:	42b3      	cmp	r3, r6
 80097ea:	db0b      	blt.n	8009804 <__lshift+0x38>
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff fde7 	bl	80093c0 <_Balloc>
 80097f2:	4605      	mov	r5, r0
 80097f4:	b948      	cbnz	r0, 800980a <__lshift+0x3e>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b28      	ldr	r3, [pc, #160]	@ (800989c <__lshift+0xd0>)
 80097fa:	4829      	ldr	r0, [pc, #164]	@ (80098a0 <__lshift+0xd4>)
 80097fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009800:	f000 fb86 	bl	8009f10 <__assert_func>
 8009804:	3101      	adds	r1, #1
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	e7ee      	b.n	80097e8 <__lshift+0x1c>
 800980a:	2300      	movs	r3, #0
 800980c:	f100 0114 	add.w	r1, r0, #20
 8009810:	f100 0210 	add.w	r2, r0, #16
 8009814:	4618      	mov	r0, r3
 8009816:	4553      	cmp	r3, sl
 8009818:	db33      	blt.n	8009882 <__lshift+0xb6>
 800981a:	6920      	ldr	r0, [r4, #16]
 800981c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009820:	f104 0314 	add.w	r3, r4, #20
 8009824:	f019 091f 	ands.w	r9, r9, #31
 8009828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800982c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009830:	d02b      	beq.n	800988a <__lshift+0xbe>
 8009832:	f1c9 0e20 	rsb	lr, r9, #32
 8009836:	468a      	mov	sl, r1
 8009838:	2200      	movs	r2, #0
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	fa00 f009 	lsl.w	r0, r0, r9
 8009840:	4310      	orrs	r0, r2
 8009842:	f84a 0b04 	str.w	r0, [sl], #4
 8009846:	f853 2b04 	ldr.w	r2, [r3], #4
 800984a:	459c      	cmp	ip, r3
 800984c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009850:	d8f3      	bhi.n	800983a <__lshift+0x6e>
 8009852:	ebac 0304 	sub.w	r3, ip, r4
 8009856:	3b15      	subs	r3, #21
 8009858:	f023 0303 	bic.w	r3, r3, #3
 800985c:	3304      	adds	r3, #4
 800985e:	f104 0015 	add.w	r0, r4, #21
 8009862:	4560      	cmp	r0, ip
 8009864:	bf88      	it	hi
 8009866:	2304      	movhi	r3, #4
 8009868:	50ca      	str	r2, [r1, r3]
 800986a:	b10a      	cbz	r2, 8009870 <__lshift+0xa4>
 800986c:	f108 0602 	add.w	r6, r8, #2
 8009870:	3e01      	subs	r6, #1
 8009872:	4638      	mov	r0, r7
 8009874:	612e      	str	r6, [r5, #16]
 8009876:	4621      	mov	r1, r4
 8009878:	f7ff fde2 	bl	8009440 <_Bfree>
 800987c:	4628      	mov	r0, r5
 800987e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009882:	f842 0f04 	str.w	r0, [r2, #4]!
 8009886:	3301      	adds	r3, #1
 8009888:	e7c5      	b.n	8009816 <__lshift+0x4a>
 800988a:	3904      	subs	r1, #4
 800988c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009890:	f841 2f04 	str.w	r2, [r1, #4]!
 8009894:	459c      	cmp	ip, r3
 8009896:	d8f9      	bhi.n	800988c <__lshift+0xc0>
 8009898:	e7ea      	b.n	8009870 <__lshift+0xa4>
 800989a:	bf00      	nop
 800989c:	0800a6e0 	.word	0x0800a6e0
 80098a0:	0800a6f1 	.word	0x0800a6f1

080098a4 <__mcmp>:
 80098a4:	690a      	ldr	r2, [r1, #16]
 80098a6:	4603      	mov	r3, r0
 80098a8:	6900      	ldr	r0, [r0, #16]
 80098aa:	1a80      	subs	r0, r0, r2
 80098ac:	b530      	push	{r4, r5, lr}
 80098ae:	d10e      	bne.n	80098ce <__mcmp+0x2a>
 80098b0:	3314      	adds	r3, #20
 80098b2:	3114      	adds	r1, #20
 80098b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098c4:	4295      	cmp	r5, r2
 80098c6:	d003      	beq.n	80098d0 <__mcmp+0x2c>
 80098c8:	d205      	bcs.n	80098d6 <__mcmp+0x32>
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295
 80098ce:	bd30      	pop	{r4, r5, pc}
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	d3f3      	bcc.n	80098bc <__mcmp+0x18>
 80098d4:	e7fb      	b.n	80098ce <__mcmp+0x2a>
 80098d6:	2001      	movs	r0, #1
 80098d8:	e7f9      	b.n	80098ce <__mcmp+0x2a>
	...

080098dc <__mdiff>:
 80098dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	4689      	mov	r9, r1
 80098e2:	4606      	mov	r6, r0
 80098e4:	4611      	mov	r1, r2
 80098e6:	4648      	mov	r0, r9
 80098e8:	4614      	mov	r4, r2
 80098ea:	f7ff ffdb 	bl	80098a4 <__mcmp>
 80098ee:	1e05      	subs	r5, r0, #0
 80098f0:	d112      	bne.n	8009918 <__mdiff+0x3c>
 80098f2:	4629      	mov	r1, r5
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff fd63 	bl	80093c0 <_Balloc>
 80098fa:	4602      	mov	r2, r0
 80098fc:	b928      	cbnz	r0, 800990a <__mdiff+0x2e>
 80098fe:	4b3f      	ldr	r3, [pc, #252]	@ (80099fc <__mdiff+0x120>)
 8009900:	f240 2137 	movw	r1, #567	@ 0x237
 8009904:	483e      	ldr	r0, [pc, #248]	@ (8009a00 <__mdiff+0x124>)
 8009906:	f000 fb03 	bl	8009f10 <__assert_func>
 800990a:	2301      	movs	r3, #1
 800990c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009910:	4610      	mov	r0, r2
 8009912:	b003      	add	sp, #12
 8009914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009918:	bfbc      	itt	lt
 800991a:	464b      	movlt	r3, r9
 800991c:	46a1      	movlt	r9, r4
 800991e:	4630      	mov	r0, r6
 8009920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009924:	bfba      	itte	lt
 8009926:	461c      	movlt	r4, r3
 8009928:	2501      	movlt	r5, #1
 800992a:	2500      	movge	r5, #0
 800992c:	f7ff fd48 	bl	80093c0 <_Balloc>
 8009930:	4602      	mov	r2, r0
 8009932:	b918      	cbnz	r0, 800993c <__mdiff+0x60>
 8009934:	4b31      	ldr	r3, [pc, #196]	@ (80099fc <__mdiff+0x120>)
 8009936:	f240 2145 	movw	r1, #581	@ 0x245
 800993a:	e7e3      	b.n	8009904 <__mdiff+0x28>
 800993c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009940:	6926      	ldr	r6, [r4, #16]
 8009942:	60c5      	str	r5, [r0, #12]
 8009944:	f109 0310 	add.w	r3, r9, #16
 8009948:	f109 0514 	add.w	r5, r9, #20
 800994c:	f104 0e14 	add.w	lr, r4, #20
 8009950:	f100 0b14 	add.w	fp, r0, #20
 8009954:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009958:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	46d9      	mov	r9, fp
 8009960:	f04f 0c00 	mov.w	ip, #0
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800996a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	fa1f f38a 	uxth.w	r3, sl
 8009974:	4619      	mov	r1, r3
 8009976:	b283      	uxth	r3, r0
 8009978:	1acb      	subs	r3, r1, r3
 800997a:	0c00      	lsrs	r0, r0, #16
 800997c:	4463      	add	r3, ip
 800997e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009982:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800998c:	4576      	cmp	r6, lr
 800998e:	f849 3b04 	str.w	r3, [r9], #4
 8009992:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009996:	d8e5      	bhi.n	8009964 <__mdiff+0x88>
 8009998:	1b33      	subs	r3, r6, r4
 800999a:	3b15      	subs	r3, #21
 800999c:	f023 0303 	bic.w	r3, r3, #3
 80099a0:	3415      	adds	r4, #21
 80099a2:	3304      	adds	r3, #4
 80099a4:	42a6      	cmp	r6, r4
 80099a6:	bf38      	it	cc
 80099a8:	2304      	movcc	r3, #4
 80099aa:	441d      	add	r5, r3
 80099ac:	445b      	add	r3, fp
 80099ae:	461e      	mov	r6, r3
 80099b0:	462c      	mov	r4, r5
 80099b2:	4544      	cmp	r4, r8
 80099b4:	d30e      	bcc.n	80099d4 <__mdiff+0xf8>
 80099b6:	f108 0103 	add.w	r1, r8, #3
 80099ba:	1b49      	subs	r1, r1, r5
 80099bc:	f021 0103 	bic.w	r1, r1, #3
 80099c0:	3d03      	subs	r5, #3
 80099c2:	45a8      	cmp	r8, r5
 80099c4:	bf38      	it	cc
 80099c6:	2100      	movcc	r1, #0
 80099c8:	440b      	add	r3, r1
 80099ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099ce:	b191      	cbz	r1, 80099f6 <__mdiff+0x11a>
 80099d0:	6117      	str	r7, [r2, #16]
 80099d2:	e79d      	b.n	8009910 <__mdiff+0x34>
 80099d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80099d8:	46e6      	mov	lr, ip
 80099da:	0c08      	lsrs	r0, r1, #16
 80099dc:	fa1c fc81 	uxtah	ip, ip, r1
 80099e0:	4471      	add	r1, lr
 80099e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099e6:	b289      	uxth	r1, r1
 80099e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099ec:	f846 1b04 	str.w	r1, [r6], #4
 80099f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099f4:	e7dd      	b.n	80099b2 <__mdiff+0xd6>
 80099f6:	3f01      	subs	r7, #1
 80099f8:	e7e7      	b.n	80099ca <__mdiff+0xee>
 80099fa:	bf00      	nop
 80099fc:	0800a6e0 	.word	0x0800a6e0
 8009a00:	0800a6f1 	.word	0x0800a6f1

08009a04 <__d2b>:
 8009a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a08:	460f      	mov	r7, r1
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	ec59 8b10 	vmov	r8, r9, d0
 8009a10:	4616      	mov	r6, r2
 8009a12:	f7ff fcd5 	bl	80093c0 <_Balloc>
 8009a16:	4604      	mov	r4, r0
 8009a18:	b930      	cbnz	r0, 8009a28 <__d2b+0x24>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	4b23      	ldr	r3, [pc, #140]	@ (8009aac <__d2b+0xa8>)
 8009a1e:	4824      	ldr	r0, [pc, #144]	@ (8009ab0 <__d2b+0xac>)
 8009a20:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a24:	f000 fa74 	bl	8009f10 <__assert_func>
 8009a28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a30:	b10d      	cbz	r5, 8009a36 <__d2b+0x32>
 8009a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	f1b8 0300 	subs.w	r3, r8, #0
 8009a3c:	d023      	beq.n	8009a86 <__d2b+0x82>
 8009a3e:	4668      	mov	r0, sp
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	f7ff fd84 	bl	800954e <__lo0bits>
 8009a46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a4a:	b1d0      	cbz	r0, 8009a82 <__d2b+0x7e>
 8009a4c:	f1c0 0320 	rsb	r3, r0, #32
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	430b      	orrs	r3, r1
 8009a56:	40c2      	lsrs	r2, r0
 8009a58:	6163      	str	r3, [r4, #20]
 8009a5a:	9201      	str	r2, [sp, #4]
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	61a3      	str	r3, [r4, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bf0c      	ite	eq
 8009a64:	2201      	moveq	r2, #1
 8009a66:	2202      	movne	r2, #2
 8009a68:	6122      	str	r2, [r4, #16]
 8009a6a:	b1a5      	cbz	r5, 8009a96 <__d2b+0x92>
 8009a6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a70:	4405      	add	r5, r0
 8009a72:	603d      	str	r5, [r7, #0]
 8009a74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a78:	6030      	str	r0, [r6, #0]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	b003      	add	sp, #12
 8009a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a82:	6161      	str	r1, [r4, #20]
 8009a84:	e7ea      	b.n	8009a5c <__d2b+0x58>
 8009a86:	a801      	add	r0, sp, #4
 8009a88:	f7ff fd61 	bl	800954e <__lo0bits>
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	6163      	str	r3, [r4, #20]
 8009a90:	3020      	adds	r0, #32
 8009a92:	2201      	movs	r2, #1
 8009a94:	e7e8      	b.n	8009a68 <__d2b+0x64>
 8009a96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a9e:	6038      	str	r0, [r7, #0]
 8009aa0:	6918      	ldr	r0, [r3, #16]
 8009aa2:	f7ff fd35 	bl	8009510 <__hi0bits>
 8009aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aaa:	e7e5      	b.n	8009a78 <__d2b+0x74>
 8009aac:	0800a6e0 	.word	0x0800a6e0
 8009ab0:	0800a6f1 	.word	0x0800a6f1

08009ab4 <__ssputs_r>:
 8009ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	688e      	ldr	r6, [r1, #8]
 8009aba:	461f      	mov	r7, r3
 8009abc:	42be      	cmp	r6, r7
 8009abe:	680b      	ldr	r3, [r1, #0]
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	4690      	mov	r8, r2
 8009ac6:	d82d      	bhi.n	8009b24 <__ssputs_r+0x70>
 8009ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009acc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ad0:	d026      	beq.n	8009b20 <__ssputs_r+0x6c>
 8009ad2:	6965      	ldr	r5, [r4, #20]
 8009ad4:	6909      	ldr	r1, [r1, #16]
 8009ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ada:	eba3 0901 	sub.w	r9, r3, r1
 8009ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ae2:	1c7b      	adds	r3, r7, #1
 8009ae4:	444b      	add	r3, r9
 8009ae6:	106d      	asrs	r5, r5, #1
 8009ae8:	429d      	cmp	r5, r3
 8009aea:	bf38      	it	cc
 8009aec:	461d      	movcc	r5, r3
 8009aee:	0553      	lsls	r3, r2, #21
 8009af0:	d527      	bpl.n	8009b42 <__ssputs_r+0x8e>
 8009af2:	4629      	mov	r1, r5
 8009af4:	f7ff fbd8 	bl	80092a8 <_malloc_r>
 8009af8:	4606      	mov	r6, r0
 8009afa:	b360      	cbz	r0, 8009b56 <__ssputs_r+0xa2>
 8009afc:	6921      	ldr	r1, [r4, #16]
 8009afe:	464a      	mov	r2, r9
 8009b00:	f7fe fcf7 	bl	80084f2 <memcpy>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	6126      	str	r6, [r4, #16]
 8009b12:	6165      	str	r5, [r4, #20]
 8009b14:	444e      	add	r6, r9
 8009b16:	eba5 0509 	sub.w	r5, r5, r9
 8009b1a:	6026      	str	r6, [r4, #0]
 8009b1c:	60a5      	str	r5, [r4, #8]
 8009b1e:	463e      	mov	r6, r7
 8009b20:	42be      	cmp	r6, r7
 8009b22:	d900      	bls.n	8009b26 <__ssputs_r+0x72>
 8009b24:	463e      	mov	r6, r7
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	4632      	mov	r2, r6
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	f000 f9c6 	bl	8009ebc <memmove>
 8009b30:	68a3      	ldr	r3, [r4, #8]
 8009b32:	1b9b      	subs	r3, r3, r6
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	4433      	add	r3, r6
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b42:	462a      	mov	r2, r5
 8009b44:	f000 fa28 	bl	8009f98 <_realloc_r>
 8009b48:	4606      	mov	r6, r0
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1e0      	bne.n	8009b10 <__ssputs_r+0x5c>
 8009b4e:	6921      	ldr	r1, [r4, #16]
 8009b50:	4650      	mov	r0, sl
 8009b52:	f7ff fb35 	bl	80091c0 <_free_r>
 8009b56:	230c      	movs	r3, #12
 8009b58:	f8ca 3000 	str.w	r3, [sl]
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	e7e9      	b.n	8009b3e <__ssputs_r+0x8a>
	...

08009b6c <_svfiprintf_r>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	4698      	mov	r8, r3
 8009b72:	898b      	ldrh	r3, [r1, #12]
 8009b74:	061b      	lsls	r3, r3, #24
 8009b76:	b09d      	sub	sp, #116	@ 0x74
 8009b78:	4607      	mov	r7, r0
 8009b7a:	460d      	mov	r5, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	d510      	bpl.n	8009ba2 <_svfiprintf_r+0x36>
 8009b80:	690b      	ldr	r3, [r1, #16]
 8009b82:	b973      	cbnz	r3, 8009ba2 <_svfiprintf_r+0x36>
 8009b84:	2140      	movs	r1, #64	@ 0x40
 8009b86:	f7ff fb8f 	bl	80092a8 <_malloc_r>
 8009b8a:	6028      	str	r0, [r5, #0]
 8009b8c:	6128      	str	r0, [r5, #16]
 8009b8e:	b930      	cbnz	r0, 8009b9e <_svfiprintf_r+0x32>
 8009b90:	230c      	movs	r3, #12
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	b01d      	add	sp, #116	@ 0x74
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	2340      	movs	r3, #64	@ 0x40
 8009ba0:	616b      	str	r3, [r5, #20]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba6:	2320      	movs	r3, #32
 8009ba8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb0:	2330      	movs	r3, #48	@ 0x30
 8009bb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d50 <_svfiprintf_r+0x1e4>
 8009bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bba:	f04f 0901 	mov.w	r9, #1
 8009bbe:	4623      	mov	r3, r4
 8009bc0:	469a      	mov	sl, r3
 8009bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc6:	b10a      	cbz	r2, 8009bcc <_svfiprintf_r+0x60>
 8009bc8:	2a25      	cmp	r2, #37	@ 0x25
 8009bca:	d1f9      	bne.n	8009bc0 <_svfiprintf_r+0x54>
 8009bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8009bd0:	d00b      	beq.n	8009bea <_svfiprintf_r+0x7e>
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff ff6b 	bl	8009ab4 <__ssputs_r>
 8009bde:	3001      	adds	r0, #1
 8009be0:	f000 80a7 	beq.w	8009d32 <_svfiprintf_r+0x1c6>
 8009be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009be6:	445a      	add	r2, fp
 8009be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bea:	f89a 3000 	ldrb.w	r3, [sl]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 809f 	beq.w	8009d32 <_svfiprintf_r+0x1c6>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bfe:	f10a 0a01 	add.w	sl, sl, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	9307      	str	r3, [sp, #28]
 8009c06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c0c:	4654      	mov	r4, sl
 8009c0e:	2205      	movs	r2, #5
 8009c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c14:	484e      	ldr	r0, [pc, #312]	@ (8009d50 <_svfiprintf_r+0x1e4>)
 8009c16:	f7f6 fae3 	bl	80001e0 <memchr>
 8009c1a:	9a04      	ldr	r2, [sp, #16]
 8009c1c:	b9d8      	cbnz	r0, 8009c56 <_svfiprintf_r+0xea>
 8009c1e:	06d0      	lsls	r0, r2, #27
 8009c20:	bf44      	itt	mi
 8009c22:	2320      	movmi	r3, #32
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c28:	0711      	lsls	r1, r2, #28
 8009c2a:	bf44      	itt	mi
 8009c2c:	232b      	movmi	r3, #43	@ 0x2b
 8009c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c32:	f89a 3000 	ldrb.w	r3, [sl]
 8009c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c38:	d015      	beq.n	8009c66 <_svfiprintf_r+0xfa>
 8009c3a:	9a07      	ldr	r2, [sp, #28]
 8009c3c:	4654      	mov	r4, sl
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f04f 0c0a 	mov.w	ip, #10
 8009c44:	4621      	mov	r1, r4
 8009c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c4a:	3b30      	subs	r3, #48	@ 0x30
 8009c4c:	2b09      	cmp	r3, #9
 8009c4e:	d94b      	bls.n	8009ce8 <_svfiprintf_r+0x17c>
 8009c50:	b1b0      	cbz	r0, 8009c80 <_svfiprintf_r+0x114>
 8009c52:	9207      	str	r2, [sp, #28]
 8009c54:	e014      	b.n	8009c80 <_svfiprintf_r+0x114>
 8009c56:	eba0 0308 	sub.w	r3, r0, r8
 8009c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	46a2      	mov	sl, r4
 8009c64:	e7d2      	b.n	8009c0c <_svfiprintf_r+0xa0>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	9103      	str	r1, [sp, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bfbb      	ittet	lt
 8009c72:	425b      	neglt	r3, r3
 8009c74:	f042 0202 	orrlt.w	r2, r2, #2
 8009c78:	9307      	strge	r3, [sp, #28]
 8009c7a:	9307      	strlt	r3, [sp, #28]
 8009c7c:	bfb8      	it	lt
 8009c7e:	9204      	strlt	r2, [sp, #16]
 8009c80:	7823      	ldrb	r3, [r4, #0]
 8009c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c84:	d10a      	bne.n	8009c9c <_svfiprintf_r+0x130>
 8009c86:	7863      	ldrb	r3, [r4, #1]
 8009c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c8a:	d132      	bne.n	8009cf2 <_svfiprintf_r+0x186>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	1d1a      	adds	r2, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	9203      	str	r2, [sp, #12]
 8009c94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c98:	3402      	adds	r4, #2
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d60 <_svfiprintf_r+0x1f4>
 8009ca0:	7821      	ldrb	r1, [r4, #0]
 8009ca2:	2203      	movs	r2, #3
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	f7f6 fa9b 	bl	80001e0 <memchr>
 8009caa:	b138      	cbz	r0, 8009cbc <_svfiprintf_r+0x150>
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	eba0 000a 	sub.w	r0, r0, sl
 8009cb2:	2240      	movs	r2, #64	@ 0x40
 8009cb4:	4082      	lsls	r2, r0
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	3401      	adds	r4, #1
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc0:	4824      	ldr	r0, [pc, #144]	@ (8009d54 <_svfiprintf_r+0x1e8>)
 8009cc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cc6:	2206      	movs	r2, #6
 8009cc8:	f7f6 fa8a 	bl	80001e0 <memchr>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d036      	beq.n	8009d3e <_svfiprintf_r+0x1d2>
 8009cd0:	4b21      	ldr	r3, [pc, #132]	@ (8009d58 <_svfiprintf_r+0x1ec>)
 8009cd2:	bb1b      	cbnz	r3, 8009d1c <_svfiprintf_r+0x1b0>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	3307      	adds	r3, #7
 8009cd8:	f023 0307 	bic.w	r3, r3, #7
 8009cdc:	3308      	adds	r3, #8
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce2:	4433      	add	r3, r6
 8009ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce6:	e76a      	b.n	8009bbe <_svfiprintf_r+0x52>
 8009ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cec:	460c      	mov	r4, r1
 8009cee:	2001      	movs	r0, #1
 8009cf0:	e7a8      	b.n	8009c44 <_svfiprintf_r+0xd8>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	3401      	adds	r4, #1
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f04f 0c0a 	mov.w	ip, #10
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d04:	3a30      	subs	r2, #48	@ 0x30
 8009d06:	2a09      	cmp	r2, #9
 8009d08:	d903      	bls.n	8009d12 <_svfiprintf_r+0x1a6>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c6      	beq.n	8009c9c <_svfiprintf_r+0x130>
 8009d0e:	9105      	str	r1, [sp, #20]
 8009d10:	e7c4      	b.n	8009c9c <_svfiprintf_r+0x130>
 8009d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d16:	4604      	mov	r4, r0
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e7f0      	b.n	8009cfe <_svfiprintf_r+0x192>
 8009d1c:	ab03      	add	r3, sp, #12
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	462a      	mov	r2, r5
 8009d22:	4b0e      	ldr	r3, [pc, #56]	@ (8009d5c <_svfiprintf_r+0x1f0>)
 8009d24:	a904      	add	r1, sp, #16
 8009d26:	4638      	mov	r0, r7
 8009d28:	f7fd fe86 	bl	8007a38 <_printf_float>
 8009d2c:	1c42      	adds	r2, r0, #1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	d1d6      	bne.n	8009ce0 <_svfiprintf_r+0x174>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	065b      	lsls	r3, r3, #25
 8009d36:	f53f af2d 	bmi.w	8009b94 <_svfiprintf_r+0x28>
 8009d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d3c:	e72c      	b.n	8009b98 <_svfiprintf_r+0x2c>
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	462a      	mov	r2, r5
 8009d44:	4b05      	ldr	r3, [pc, #20]	@ (8009d5c <_svfiprintf_r+0x1f0>)
 8009d46:	a904      	add	r1, sp, #16
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7fe f90d 	bl	8007f68 <_printf_i>
 8009d4e:	e7ed      	b.n	8009d2c <_svfiprintf_r+0x1c0>
 8009d50:	0800a74a 	.word	0x0800a74a
 8009d54:	0800a754 	.word	0x0800a754
 8009d58:	08007a39 	.word	0x08007a39
 8009d5c:	08009ab5 	.word	0x08009ab5
 8009d60:	0800a750 	.word	0x0800a750

08009d64 <__sflush_r>:
 8009d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	0716      	lsls	r6, r2, #28
 8009d6e:	4605      	mov	r5, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	d454      	bmi.n	8009e1e <__sflush_r+0xba>
 8009d74:	684b      	ldr	r3, [r1, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc02      	bgt.n	8009d80 <__sflush_r+0x1c>
 8009d7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dd48      	ble.n	8009e12 <__sflush_r+0xae>
 8009d80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d045      	beq.n	8009e12 <__sflush_r+0xae>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d8c:	682f      	ldr	r7, [r5, #0]
 8009d8e:	6a21      	ldr	r1, [r4, #32]
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	d030      	beq.n	8009df6 <__sflush_r+0x92>
 8009d94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	0759      	lsls	r1, r3, #29
 8009d9a:	d505      	bpl.n	8009da8 <__sflush_r+0x44>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	1ad2      	subs	r2, r2, r3
 8009da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009da2:	b10b      	cbz	r3, 8009da8 <__sflush_r+0x44>
 8009da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009da6:	1ad2      	subs	r2, r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dac:	6a21      	ldr	r1, [r4, #32]
 8009dae:	4628      	mov	r0, r5
 8009db0:	47b0      	blx	r6
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	d106      	bne.n	8009dc6 <__sflush_r+0x62>
 8009db8:	6829      	ldr	r1, [r5, #0]
 8009dba:	291d      	cmp	r1, #29
 8009dbc:	d82b      	bhi.n	8009e16 <__sflush_r+0xb2>
 8009dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009e68 <__sflush_r+0x104>)
 8009dc0:	40ca      	lsrs	r2, r1
 8009dc2:	07d6      	lsls	r6, r2, #31
 8009dc4:	d527      	bpl.n	8009e16 <__sflush_r+0xb2>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6062      	str	r2, [r4, #4]
 8009dca:	04d9      	lsls	r1, r3, #19
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	d504      	bpl.n	8009ddc <__sflush_r+0x78>
 8009dd2:	1c42      	adds	r2, r0, #1
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0x76>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	b903      	cbnz	r3, 8009ddc <__sflush_r+0x78>
 8009dda:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dde:	602f      	str	r7, [r5, #0]
 8009de0:	b1b9      	cbz	r1, 8009e12 <__sflush_r+0xae>
 8009de2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009de6:	4299      	cmp	r1, r3
 8009de8:	d002      	beq.n	8009df0 <__sflush_r+0x8c>
 8009dea:	4628      	mov	r0, r5
 8009dec:	f7ff f9e8 	bl	80091c0 <_free_r>
 8009df0:	2300      	movs	r3, #0
 8009df2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009df4:	e00d      	b.n	8009e12 <__sflush_r+0xae>
 8009df6:	2301      	movs	r3, #1
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b0      	blx	r6
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	1c50      	adds	r0, r2, #1
 8009e00:	d1c9      	bne.n	8009d96 <__sflush_r+0x32>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0c6      	beq.n	8009d96 <__sflush_r+0x32>
 8009e08:	2b1d      	cmp	r3, #29
 8009e0a:	d001      	beq.n	8009e10 <__sflush_r+0xac>
 8009e0c:	2b16      	cmp	r3, #22
 8009e0e:	d11e      	bne.n	8009e4e <__sflush_r+0xea>
 8009e10:	602f      	str	r7, [r5, #0]
 8009e12:	2000      	movs	r0, #0
 8009e14:	e022      	b.n	8009e5c <__sflush_r+0xf8>
 8009e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	e01b      	b.n	8009e56 <__sflush_r+0xf2>
 8009e1e:	690f      	ldr	r7, [r1, #16]
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	d0f6      	beq.n	8009e12 <__sflush_r+0xae>
 8009e24:	0793      	lsls	r3, r2, #30
 8009e26:	680e      	ldr	r6, [r1, #0]
 8009e28:	bf08      	it	eq
 8009e2a:	694b      	ldreq	r3, [r1, #20]
 8009e2c:	600f      	str	r7, [r1, #0]
 8009e2e:	bf18      	it	ne
 8009e30:	2300      	movne	r3, #0
 8009e32:	eba6 0807 	sub.w	r8, r6, r7
 8009e36:	608b      	str	r3, [r1, #8]
 8009e38:	f1b8 0f00 	cmp.w	r8, #0
 8009e3c:	dde9      	ble.n	8009e12 <__sflush_r+0xae>
 8009e3e:	6a21      	ldr	r1, [r4, #32]
 8009e40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e42:	4643      	mov	r3, r8
 8009e44:	463a      	mov	r2, r7
 8009e46:	4628      	mov	r0, r5
 8009e48:	47b0      	blx	r6
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	dc08      	bgt.n	8009e60 <__sflush_r+0xfc>
 8009e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	4407      	add	r7, r0
 8009e62:	eba8 0800 	sub.w	r8, r8, r0
 8009e66:	e7e7      	b.n	8009e38 <__sflush_r+0xd4>
 8009e68:	20400001 	.word	0x20400001

08009e6c <_fflush_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	690b      	ldr	r3, [r1, #16]
 8009e70:	4605      	mov	r5, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	b913      	cbnz	r3, 8009e7c <_fflush_r+0x10>
 8009e76:	2500      	movs	r5, #0
 8009e78:	4628      	mov	r0, r5
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	b118      	cbz	r0, 8009e86 <_fflush_r+0x1a>
 8009e7e:	6a03      	ldr	r3, [r0, #32]
 8009e80:	b90b      	cbnz	r3, 8009e86 <_fflush_r+0x1a>
 8009e82:	f7fe fa1b 	bl	80082bc <__sinit>
 8009e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0f3      	beq.n	8009e76 <_fflush_r+0xa>
 8009e8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e90:	07d0      	lsls	r0, r2, #31
 8009e92:	d404      	bmi.n	8009e9e <_fflush_r+0x32>
 8009e94:	0599      	lsls	r1, r3, #22
 8009e96:	d402      	bmi.n	8009e9e <_fflush_r+0x32>
 8009e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e9a:	f7fe fb28 	bl	80084ee <__retarget_lock_acquire_recursive>
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f7ff ff5f 	bl	8009d64 <__sflush_r>
 8009ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ea8:	07da      	lsls	r2, r3, #31
 8009eaa:	4605      	mov	r5, r0
 8009eac:	d4e4      	bmi.n	8009e78 <_fflush_r+0xc>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	d4e1      	bmi.n	8009e78 <_fflush_r+0xc>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eb6:	f7fe fb1b 	bl	80084f0 <__retarget_lock_release_recursive>
 8009eba:	e7dd      	b.n	8009e78 <_fflush_r+0xc>

08009ebc <memmove>:
 8009ebc:	4288      	cmp	r0, r1
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	eb01 0402 	add.w	r4, r1, r2
 8009ec4:	d902      	bls.n	8009ecc <memmove+0x10>
 8009ec6:	4284      	cmp	r4, r0
 8009ec8:	4623      	mov	r3, r4
 8009eca:	d807      	bhi.n	8009edc <memmove+0x20>
 8009ecc:	1e43      	subs	r3, r0, #1
 8009ece:	42a1      	cmp	r1, r4
 8009ed0:	d008      	beq.n	8009ee4 <memmove+0x28>
 8009ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eda:	e7f8      	b.n	8009ece <memmove+0x12>
 8009edc:	4402      	add	r2, r0
 8009ede:	4601      	mov	r1, r0
 8009ee0:	428a      	cmp	r2, r1
 8009ee2:	d100      	bne.n	8009ee6 <memmove+0x2a>
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eee:	e7f7      	b.n	8009ee0 <memmove+0x24>

08009ef0 <_sbrk_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d06      	ldr	r5, [pc, #24]	@ (8009f0c <_sbrk_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f7 fc70 	bl	80017e0 <_sbrk>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_sbrk_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_sbrk_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	20004d38 	.word	0x20004d38

08009f10 <__assert_func>:
 8009f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f12:	4614      	mov	r4, r2
 8009f14:	461a      	mov	r2, r3
 8009f16:	4b09      	ldr	r3, [pc, #36]	@ (8009f3c <__assert_func+0x2c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	68d8      	ldr	r0, [r3, #12]
 8009f1e:	b14c      	cbz	r4, 8009f34 <__assert_func+0x24>
 8009f20:	4b07      	ldr	r3, [pc, #28]	@ (8009f40 <__assert_func+0x30>)
 8009f22:	9100      	str	r1, [sp, #0]
 8009f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f28:	4906      	ldr	r1, [pc, #24]	@ (8009f44 <__assert_func+0x34>)
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	f000 f870 	bl	800a010 <fiprintf>
 8009f30:	f000 f880 	bl	800a034 <abort>
 8009f34:	4b04      	ldr	r3, [pc, #16]	@ (8009f48 <__assert_func+0x38>)
 8009f36:	461c      	mov	r4, r3
 8009f38:	e7f3      	b.n	8009f22 <__assert_func+0x12>
 8009f3a:	bf00      	nop
 8009f3c:	2000001c 	.word	0x2000001c
 8009f40:	0800a765 	.word	0x0800a765
 8009f44:	0800a772 	.word	0x0800a772
 8009f48:	0800a7a0 	.word	0x0800a7a0

08009f4c <_calloc_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	fba1 5402 	umull	r5, r4, r1, r2
 8009f52:	b934      	cbnz	r4, 8009f62 <_calloc_r+0x16>
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7ff f9a7 	bl	80092a8 <_malloc_r>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	b928      	cbnz	r0, 8009f6a <_calloc_r+0x1e>
 8009f5e:	4630      	mov	r0, r6
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	220c      	movs	r2, #12
 8009f64:	6002      	str	r2, [r0, #0]
 8009f66:	2600      	movs	r6, #0
 8009f68:	e7f9      	b.n	8009f5e <_calloc_r+0x12>
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	f7fe fa40 	bl	80083f2 <memset>
 8009f72:	e7f4      	b.n	8009f5e <_calloc_r+0x12>

08009f74 <__ascii_mbtowc>:
 8009f74:	b082      	sub	sp, #8
 8009f76:	b901      	cbnz	r1, 8009f7a <__ascii_mbtowc+0x6>
 8009f78:	a901      	add	r1, sp, #4
 8009f7a:	b142      	cbz	r2, 8009f8e <__ascii_mbtowc+0x1a>
 8009f7c:	b14b      	cbz	r3, 8009f92 <__ascii_mbtowc+0x1e>
 8009f7e:	7813      	ldrb	r3, [r2, #0]
 8009f80:	600b      	str	r3, [r1, #0]
 8009f82:	7812      	ldrb	r2, [r2, #0]
 8009f84:	1e10      	subs	r0, r2, #0
 8009f86:	bf18      	it	ne
 8009f88:	2001      	movne	r0, #1
 8009f8a:	b002      	add	sp, #8
 8009f8c:	4770      	bx	lr
 8009f8e:	4610      	mov	r0, r2
 8009f90:	e7fb      	b.n	8009f8a <__ascii_mbtowc+0x16>
 8009f92:	f06f 0001 	mvn.w	r0, #1
 8009f96:	e7f8      	b.n	8009f8a <__ascii_mbtowc+0x16>

08009f98 <_realloc_r>:
 8009f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	4614      	mov	r4, r2
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	b921      	cbnz	r1, 8009fae <_realloc_r+0x16>
 8009fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa8:	4611      	mov	r1, r2
 8009faa:	f7ff b97d 	b.w	80092a8 <_malloc_r>
 8009fae:	b92a      	cbnz	r2, 8009fbc <_realloc_r+0x24>
 8009fb0:	f7ff f906 	bl	80091c0 <_free_r>
 8009fb4:	4625      	mov	r5, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	f000 f841 	bl	800a042 <_malloc_usable_size_r>
 8009fc0:	4284      	cmp	r4, r0
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	d802      	bhi.n	8009fcc <_realloc_r+0x34>
 8009fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fca:	d8f4      	bhi.n	8009fb6 <_realloc_r+0x1e>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f7ff f96a 	bl	80092a8 <_malloc_r>
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	b908      	cbnz	r0, 8009fdc <_realloc_r+0x44>
 8009fd8:	4645      	mov	r5, r8
 8009fda:	e7ec      	b.n	8009fb6 <_realloc_r+0x1e>
 8009fdc:	42b4      	cmp	r4, r6
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	bf28      	it	cs
 8009fe4:	4632      	movcs	r2, r6
 8009fe6:	f7fe fa84 	bl	80084f2 <memcpy>
 8009fea:	4629      	mov	r1, r5
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff f8e7 	bl	80091c0 <_free_r>
 8009ff2:	e7f1      	b.n	8009fd8 <_realloc_r+0x40>

08009ff4 <__ascii_wctomb>:
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	b141      	cbz	r1, 800a00c <__ascii_wctomb+0x18>
 8009ffa:	2aff      	cmp	r2, #255	@ 0xff
 8009ffc:	d904      	bls.n	800a008 <__ascii_wctomb+0x14>
 8009ffe:	228a      	movs	r2, #138	@ 0x8a
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	4770      	bx	lr
 800a008:	700a      	strb	r2, [r1, #0]
 800a00a:	2001      	movs	r0, #1
 800a00c:	4770      	bx	lr
	...

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	@ (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f000 f83f 	bl	800a0a4 <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	2000001c 	.word	0x2000001c

0800a034 <abort>:
 800a034:	b508      	push	{r3, lr}
 800a036:	2006      	movs	r0, #6
 800a038:	f000 fa08 	bl	800a44c <raise>
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7f7 fb57 	bl	80016f0 <_exit>

0800a042 <_malloc_usable_size_r>:
 800a042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a046:	1f18      	subs	r0, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bfbc      	itt	lt
 800a04c:	580b      	ldrlt	r3, [r1, r0]
 800a04e:	18c0      	addlt	r0, r0, r3
 800a050:	4770      	bx	lr

0800a052 <__sfputc_r>:
 800a052:	6893      	ldr	r3, [r2, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	b410      	push	{r4}
 800a05a:	6093      	str	r3, [r2, #8]
 800a05c:	da08      	bge.n	800a070 <__sfputc_r+0x1e>
 800a05e:	6994      	ldr	r4, [r2, #24]
 800a060:	42a3      	cmp	r3, r4
 800a062:	db01      	blt.n	800a068 <__sfputc_r+0x16>
 800a064:	290a      	cmp	r1, #10
 800a066:	d103      	bne.n	800a070 <__sfputc_r+0x1e>
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06c:	f000 b932 	b.w	800a2d4 <__swbuf_r>
 800a070:	6813      	ldr	r3, [r2, #0]
 800a072:	1c58      	adds	r0, r3, #1
 800a074:	6010      	str	r0, [r2, #0]
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	4608      	mov	r0, r1
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <__sfputs_r>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	4614      	mov	r4, r2
 800a088:	18d5      	adds	r5, r2, r3
 800a08a:	42ac      	cmp	r4, r5
 800a08c:	d101      	bne.n	800a092 <__sfputs_r+0x12>
 800a08e:	2000      	movs	r0, #0
 800a090:	e007      	b.n	800a0a2 <__sfputs_r+0x22>
 800a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a096:	463a      	mov	r2, r7
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffda 	bl	800a052 <__sfputc_r>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d1f3      	bne.n	800a08a <__sfputs_r+0xa>
 800a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a4 <_vfiprintf_r>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	b09d      	sub	sp, #116	@ 0x74
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4698      	mov	r8, r3
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_vfiprintf_r+0x18>
 800a0b4:	6a03      	ldr	r3, [r0, #32]
 800a0b6:	b90b      	cbnz	r3, 800a0bc <_vfiprintf_r+0x18>
 800a0b8:	f7fe f900 	bl	80082bc <__sinit>
 800a0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0be:	07d9      	lsls	r1, r3, #31
 800a0c0:	d405      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d402      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ca:	f7fe fa10 	bl	80084ee <__retarget_lock_acquire_recursive>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	071b      	lsls	r3, r3, #28
 800a0d2:	d501      	bpl.n	800a0d8 <_vfiprintf_r+0x34>
 800a0d4:	692b      	ldr	r3, [r5, #16]
 800a0d6:	b99b      	cbnz	r3, 800a100 <_vfiprintf_r+0x5c>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f938 	bl	800a350 <__swsetup_r>
 800a0e0:	b170      	cbz	r0, 800a100 <_vfiprintf_r+0x5c>
 800a0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e4:	07dc      	lsls	r4, r3, #31
 800a0e6:	d504      	bpl.n	800a0f2 <_vfiprintf_r+0x4e>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b01d      	add	sp, #116	@ 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	0598      	lsls	r0, r3, #22
 800a0f6:	d4f7      	bmi.n	800a0e8 <_vfiprintf_r+0x44>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0fa:	f7fe f9f9 	bl	80084f0 <__retarget_lock_release_recursive>
 800a0fe:	e7f3      	b.n	800a0e8 <_vfiprintf_r+0x44>
 800a100:	2300      	movs	r3, #0
 800a102:	9309      	str	r3, [sp, #36]	@ 0x24
 800a104:	2320      	movs	r3, #32
 800a106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10e:	2330      	movs	r3, #48	@ 0x30
 800a110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2c0 <_vfiprintf_r+0x21c>
 800a114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a118:	f04f 0901 	mov.w	r9, #1
 800a11c:	4623      	mov	r3, r4
 800a11e:	469a      	mov	sl, r3
 800a120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a124:	b10a      	cbz	r2, 800a12a <_vfiprintf_r+0x86>
 800a126:	2a25      	cmp	r2, #37	@ 0x25
 800a128:	d1f9      	bne.n	800a11e <_vfiprintf_r+0x7a>
 800a12a:	ebba 0b04 	subs.w	fp, sl, r4
 800a12e:	d00b      	beq.n	800a148 <_vfiprintf_r+0xa4>
 800a130:	465b      	mov	r3, fp
 800a132:	4622      	mov	r2, r4
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffa2 	bl	800a080 <__sfputs_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	f000 80a7 	beq.w	800a290 <_vfiprintf_r+0x1ec>
 800a142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a144:	445a      	add	r2, fp
 800a146:	9209      	str	r2, [sp, #36]	@ 0x24
 800a148:	f89a 3000 	ldrb.w	r3, [sl]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 809f 	beq.w	800a290 <_vfiprintf_r+0x1ec>
 800a152:	2300      	movs	r3, #0
 800a154:	f04f 32ff 	mov.w	r2, #4294967295
 800a158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15c:	f10a 0a01 	add.w	sl, sl, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	9307      	str	r3, [sp, #28]
 800a164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a168:	931a      	str	r3, [sp, #104]	@ 0x68
 800a16a:	4654      	mov	r4, sl
 800a16c:	2205      	movs	r2, #5
 800a16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a172:	4853      	ldr	r0, [pc, #332]	@ (800a2c0 <_vfiprintf_r+0x21c>)
 800a174:	f7f6 f834 	bl	80001e0 <memchr>
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	b9d8      	cbnz	r0, 800a1b4 <_vfiprintf_r+0x110>
 800a17c:	06d1      	lsls	r1, r2, #27
 800a17e:	bf44      	itt	mi
 800a180:	2320      	movmi	r3, #32
 800a182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a186:	0713      	lsls	r3, r2, #28
 800a188:	bf44      	itt	mi
 800a18a:	232b      	movmi	r3, #43	@ 0x2b
 800a18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a190:	f89a 3000 	ldrb.w	r3, [sl]
 800a194:	2b2a      	cmp	r3, #42	@ 0x2a
 800a196:	d015      	beq.n	800a1c4 <_vfiprintf_r+0x120>
 800a198:	9a07      	ldr	r2, [sp, #28]
 800a19a:	4654      	mov	r4, sl
 800a19c:	2000      	movs	r0, #0
 800a19e:	f04f 0c0a 	mov.w	ip, #10
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a8:	3b30      	subs	r3, #48	@ 0x30
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d94b      	bls.n	800a246 <_vfiprintf_r+0x1a2>
 800a1ae:	b1b0      	cbz	r0, 800a1de <_vfiprintf_r+0x13a>
 800a1b0:	9207      	str	r2, [sp, #28]
 800a1b2:	e014      	b.n	800a1de <_vfiprintf_r+0x13a>
 800a1b4:	eba0 0308 	sub.w	r3, r0, r8
 800a1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	46a2      	mov	sl, r4
 800a1c2:	e7d2      	b.n	800a16a <_vfiprintf_r+0xc6>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d19      	adds	r1, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfbb      	ittet	lt
 800a1d0:	425b      	neglt	r3, r3
 800a1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d6:	9307      	strge	r3, [sp, #28]
 800a1d8:	9307      	strlt	r3, [sp, #28]
 800a1da:	bfb8      	it	lt
 800a1dc:	9204      	strlt	r2, [sp, #16]
 800a1de:	7823      	ldrb	r3, [r4, #0]
 800a1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e2:	d10a      	bne.n	800a1fa <_vfiprintf_r+0x156>
 800a1e4:	7863      	ldrb	r3, [r4, #1]
 800a1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e8:	d132      	bne.n	800a250 <_vfiprintf_r+0x1ac>
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	1d1a      	adds	r2, r3, #4
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	9203      	str	r2, [sp, #12]
 800a1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f6:	3402      	adds	r4, #2
 800a1f8:	9305      	str	r3, [sp, #20]
 800a1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2d0 <_vfiprintf_r+0x22c>
 800a1fe:	7821      	ldrb	r1, [r4, #0]
 800a200:	2203      	movs	r2, #3
 800a202:	4650      	mov	r0, sl
 800a204:	f7f5 ffec 	bl	80001e0 <memchr>
 800a208:	b138      	cbz	r0, 800a21a <_vfiprintf_r+0x176>
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	eba0 000a 	sub.w	r0, r0, sl
 800a210:	2240      	movs	r2, #64	@ 0x40
 800a212:	4082      	lsls	r2, r0
 800a214:	4313      	orrs	r3, r2
 800a216:	3401      	adds	r4, #1
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21e:	4829      	ldr	r0, [pc, #164]	@ (800a2c4 <_vfiprintf_r+0x220>)
 800a220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a224:	2206      	movs	r2, #6
 800a226:	f7f5 ffdb 	bl	80001e0 <memchr>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d03f      	beq.n	800a2ae <_vfiprintf_r+0x20a>
 800a22e:	4b26      	ldr	r3, [pc, #152]	@ (800a2c8 <_vfiprintf_r+0x224>)
 800a230:	bb1b      	cbnz	r3, 800a27a <_vfiprintf_r+0x1d6>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	3307      	adds	r3, #7
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	3308      	adds	r3, #8
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	443b      	add	r3, r7
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
 800a244:	e76a      	b.n	800a11c <_vfiprintf_r+0x78>
 800a246:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24a:	460c      	mov	r4, r1
 800a24c:	2001      	movs	r0, #1
 800a24e:	e7a8      	b.n	800a1a2 <_vfiprintf_r+0xfe>
 800a250:	2300      	movs	r3, #0
 800a252:	3401      	adds	r4, #1
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	4619      	mov	r1, r3
 800a258:	f04f 0c0a 	mov.w	ip, #10
 800a25c:	4620      	mov	r0, r4
 800a25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a262:	3a30      	subs	r2, #48	@ 0x30
 800a264:	2a09      	cmp	r2, #9
 800a266:	d903      	bls.n	800a270 <_vfiprintf_r+0x1cc>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0c6      	beq.n	800a1fa <_vfiprintf_r+0x156>
 800a26c:	9105      	str	r1, [sp, #20]
 800a26e:	e7c4      	b.n	800a1fa <_vfiprintf_r+0x156>
 800a270:	fb0c 2101 	mla	r1, ip, r1, r2
 800a274:	4604      	mov	r4, r0
 800a276:	2301      	movs	r3, #1
 800a278:	e7f0      	b.n	800a25c <_vfiprintf_r+0x1b8>
 800a27a:	ab03      	add	r3, sp, #12
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	462a      	mov	r2, r5
 800a280:	4b12      	ldr	r3, [pc, #72]	@ (800a2cc <_vfiprintf_r+0x228>)
 800a282:	a904      	add	r1, sp, #16
 800a284:	4630      	mov	r0, r6
 800a286:	f7fd fbd7 	bl	8007a38 <_printf_float>
 800a28a:	4607      	mov	r7, r0
 800a28c:	1c78      	adds	r0, r7, #1
 800a28e:	d1d6      	bne.n	800a23e <_vfiprintf_r+0x19a>
 800a290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d405      	bmi.n	800a2a2 <_vfiprintf_r+0x1fe>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	059a      	lsls	r2, r3, #22
 800a29a:	d402      	bmi.n	800a2a2 <_vfiprintf_r+0x1fe>
 800a29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a29e:	f7fe f927 	bl	80084f0 <__retarget_lock_release_recursive>
 800a2a2:	89ab      	ldrh	r3, [r5, #12]
 800a2a4:	065b      	lsls	r3, r3, #25
 800a2a6:	f53f af1f 	bmi.w	800a0e8 <_vfiprintf_r+0x44>
 800a2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2ac:	e71e      	b.n	800a0ec <_vfiprintf_r+0x48>
 800a2ae:	ab03      	add	r3, sp, #12
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <_vfiprintf_r+0x228>)
 800a2b6:	a904      	add	r1, sp, #16
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7fd fe55 	bl	8007f68 <_printf_i>
 800a2be:	e7e4      	b.n	800a28a <_vfiprintf_r+0x1e6>
 800a2c0:	0800a74a 	.word	0x0800a74a
 800a2c4:	0800a754 	.word	0x0800a754
 800a2c8:	08007a39 	.word	0x08007a39
 800a2cc:	0800a081 	.word	0x0800a081
 800a2d0:	0800a750 	.word	0x0800a750

0800a2d4 <__swbuf_r>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	460e      	mov	r6, r1
 800a2d8:	4614      	mov	r4, r2
 800a2da:	4605      	mov	r5, r0
 800a2dc:	b118      	cbz	r0, 800a2e6 <__swbuf_r+0x12>
 800a2de:	6a03      	ldr	r3, [r0, #32]
 800a2e0:	b90b      	cbnz	r3, 800a2e6 <__swbuf_r+0x12>
 800a2e2:	f7fd ffeb 	bl	80082bc <__sinit>
 800a2e6:	69a3      	ldr	r3, [r4, #24]
 800a2e8:	60a3      	str	r3, [r4, #8]
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	071a      	lsls	r2, r3, #28
 800a2ee:	d501      	bpl.n	800a2f4 <__swbuf_r+0x20>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	b943      	cbnz	r3, 800a306 <__swbuf_r+0x32>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f000 f82a 	bl	800a350 <__swsetup_r>
 800a2fc:	b118      	cbz	r0, 800a306 <__swbuf_r+0x32>
 800a2fe:	f04f 37ff 	mov.w	r7, #4294967295
 800a302:	4638      	mov	r0, r7
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	6922      	ldr	r2, [r4, #16]
 800a30a:	1a98      	subs	r0, r3, r2
 800a30c:	6963      	ldr	r3, [r4, #20]
 800a30e:	b2f6      	uxtb	r6, r6
 800a310:	4283      	cmp	r3, r0
 800a312:	4637      	mov	r7, r6
 800a314:	dc05      	bgt.n	800a322 <__swbuf_r+0x4e>
 800a316:	4621      	mov	r1, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	f7ff fda7 	bl	8009e6c <_fflush_r>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1ed      	bne.n	800a2fe <__swbuf_r+0x2a>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	3b01      	subs	r3, #1
 800a326:	60a3      	str	r3, [r4, #8]
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	6022      	str	r2, [r4, #0]
 800a32e:	701e      	strb	r6, [r3, #0]
 800a330:	6962      	ldr	r2, [r4, #20]
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	d004      	beq.n	800a342 <__swbuf_r+0x6e>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d5e1      	bpl.n	800a302 <__swbuf_r+0x2e>
 800a33e:	2e0a      	cmp	r6, #10
 800a340:	d1df      	bne.n	800a302 <__swbuf_r+0x2e>
 800a342:	4621      	mov	r1, r4
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff fd91 	bl	8009e6c <_fflush_r>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d0d9      	beq.n	800a302 <__swbuf_r+0x2e>
 800a34e:	e7d6      	b.n	800a2fe <__swbuf_r+0x2a>

0800a350 <__swsetup_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4b29      	ldr	r3, [pc, #164]	@ (800a3f8 <__swsetup_r+0xa8>)
 800a354:	4605      	mov	r5, r0
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	460c      	mov	r4, r1
 800a35a:	b118      	cbz	r0, 800a364 <__swsetup_r+0x14>
 800a35c:	6a03      	ldr	r3, [r0, #32]
 800a35e:	b90b      	cbnz	r3, 800a364 <__swsetup_r+0x14>
 800a360:	f7fd ffac 	bl	80082bc <__sinit>
 800a364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a368:	0719      	lsls	r1, r3, #28
 800a36a:	d422      	bmi.n	800a3b2 <__swsetup_r+0x62>
 800a36c:	06da      	lsls	r2, r3, #27
 800a36e:	d407      	bmi.n	800a380 <__swsetup_r+0x30>
 800a370:	2209      	movs	r2, #9
 800a372:	602a      	str	r2, [r5, #0]
 800a374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	e033      	b.n	800a3e8 <__swsetup_r+0x98>
 800a380:	0758      	lsls	r0, r3, #29
 800a382:	d512      	bpl.n	800a3aa <__swsetup_r+0x5a>
 800a384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a386:	b141      	cbz	r1, 800a39a <__swsetup_r+0x4a>
 800a388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d002      	beq.n	800a396 <__swsetup_r+0x46>
 800a390:	4628      	mov	r0, r5
 800a392:	f7fe ff15 	bl	80091c0 <_free_r>
 800a396:	2300      	movs	r3, #0
 800a398:	6363      	str	r3, [r4, #52]	@ 0x34
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6063      	str	r3, [r4, #4]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f043 0308 	orr.w	r3, r3, #8
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	b94b      	cbnz	r3, 800a3ca <__swsetup_r+0x7a>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c0:	d003      	beq.n	800a3ca <__swsetup_r+0x7a>
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 f883 	bl	800a4d0 <__smakebuf_r>
 800a3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ce:	f013 0201 	ands.w	r2, r3, #1
 800a3d2:	d00a      	beq.n	800a3ea <__swsetup_r+0x9a>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	60a2      	str	r2, [r4, #8]
 800a3d8:	6962      	ldr	r2, [r4, #20]
 800a3da:	4252      	negs	r2, r2
 800a3dc:	61a2      	str	r2, [r4, #24]
 800a3de:	6922      	ldr	r2, [r4, #16]
 800a3e0:	b942      	cbnz	r2, 800a3f4 <__swsetup_r+0xa4>
 800a3e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3e6:	d1c5      	bne.n	800a374 <__swsetup_r+0x24>
 800a3e8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ea:	0799      	lsls	r1, r3, #30
 800a3ec:	bf58      	it	pl
 800a3ee:	6962      	ldrpl	r2, [r4, #20]
 800a3f0:	60a2      	str	r2, [r4, #8]
 800a3f2:	e7f4      	b.n	800a3de <__swsetup_r+0x8e>
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	e7f7      	b.n	800a3e8 <__swsetup_r+0x98>
 800a3f8:	2000001c 	.word	0x2000001c

0800a3fc <_raise_r>:
 800a3fc:	291f      	cmp	r1, #31
 800a3fe:	b538      	push	{r3, r4, r5, lr}
 800a400:	4605      	mov	r5, r0
 800a402:	460c      	mov	r4, r1
 800a404:	d904      	bls.n	800a410 <_raise_r+0x14>
 800a406:	2316      	movs	r3, #22
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a412:	b112      	cbz	r2, 800a41a <_raise_r+0x1e>
 800a414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a418:	b94b      	cbnz	r3, 800a42e <_raise_r+0x32>
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 f830 	bl	800a480 <_getpid_r>
 800a420:	4622      	mov	r2, r4
 800a422:	4601      	mov	r1, r0
 800a424:	4628      	mov	r0, r5
 800a426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a42a:	f000 b817 	b.w	800a45c <_kill_r>
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d00a      	beq.n	800a448 <_raise_r+0x4c>
 800a432:	1c59      	adds	r1, r3, #1
 800a434:	d103      	bne.n	800a43e <_raise_r+0x42>
 800a436:	2316      	movs	r3, #22
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	2001      	movs	r0, #1
 800a43c:	e7e7      	b.n	800a40e <_raise_r+0x12>
 800a43e:	2100      	movs	r1, #0
 800a440:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a444:	4620      	mov	r0, r4
 800a446:	4798      	blx	r3
 800a448:	2000      	movs	r0, #0
 800a44a:	e7e0      	b.n	800a40e <_raise_r+0x12>

0800a44c <raise>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	@ (800a458 <raise+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7ff bfd3 	b.w	800a3fc <_raise_r>
 800a456:	bf00      	nop
 800a458:	2000001c 	.word	0x2000001c

0800a45c <_kill_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	@ (800a47c <_kill_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f7f7 f931 	bl	80016d0 <_kill>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_kill_r+0x1c>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b103      	cbz	r3, 800a478 <_kill_r+0x1c>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	20004d38 	.word	0x20004d38

0800a480 <_getpid_r>:
 800a480:	f7f7 b91e 	b.w	80016c0 <_getpid>

0800a484 <__swhatbuf_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	460c      	mov	r4, r1
 800a488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	b096      	sub	sp, #88	@ 0x58
 800a490:	4615      	mov	r5, r2
 800a492:	461e      	mov	r6, r3
 800a494:	da0d      	bge.n	800a4b2 <__swhatbuf_r+0x2e>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a49c:	f04f 0100 	mov.w	r1, #0
 800a4a0:	bf14      	ite	ne
 800a4a2:	2340      	movne	r3, #64	@ 0x40
 800a4a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	6031      	str	r1, [r6, #0]
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	b016      	add	sp, #88	@ 0x58
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
 800a4b2:	466a      	mov	r2, sp
 800a4b4:	f000 f848 	bl	800a548 <_fstat_r>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dbec      	blt.n	800a496 <__swhatbuf_r+0x12>
 800a4bc:	9901      	ldr	r1, [sp, #4]
 800a4be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4c6:	4259      	negs	r1, r3
 800a4c8:	4159      	adcs	r1, r3
 800a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ce:	e7eb      	b.n	800a4a8 <__swhatbuf_r+0x24>

0800a4d0 <__smakebuf_r>:
 800a4d0:	898b      	ldrh	r3, [r1, #12]
 800a4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d4:	079d      	lsls	r5, r3, #30
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460c      	mov	r4, r1
 800a4da:	d507      	bpl.n	800a4ec <__smakebuf_r+0x1c>
 800a4dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	6163      	str	r3, [r4, #20]
 800a4e8:	b003      	add	sp, #12
 800a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ec:	ab01      	add	r3, sp, #4
 800a4ee:	466a      	mov	r2, sp
 800a4f0:	f7ff ffc8 	bl	800a484 <__swhatbuf_r>
 800a4f4:	9f00      	ldr	r7, [sp, #0]
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7fe fed4 	bl	80092a8 <_malloc_r>
 800a500:	b948      	cbnz	r0, 800a516 <__smakebuf_r+0x46>
 800a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a506:	059a      	lsls	r2, r3, #22
 800a508:	d4ee      	bmi.n	800a4e8 <__smakebuf_r+0x18>
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	f043 0302 	orr.w	r3, r3, #2
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	e7e2      	b.n	800a4dc <__smakebuf_r+0xc>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	6020      	str	r0, [r4, #0]
 800a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a526:	b15b      	cbz	r3, 800a540 <__smakebuf_r+0x70>
 800a528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 f81d 	bl	800a56c <_isatty_r>
 800a532:	b128      	cbz	r0, 800a540 <__smakebuf_r+0x70>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	f023 0303 	bic.w	r3, r3, #3
 800a53a:	f043 0301 	orr.w	r3, r3, #1
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	431d      	orrs	r5, r3
 800a544:	81a5      	strh	r5, [r4, #12]
 800a546:	e7cf      	b.n	800a4e8 <__smakebuf_r+0x18>

0800a548 <_fstat_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	@ (800a568 <_fstat_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f7f7 f91b 	bl	8001790 <_fstat>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_fstat_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_fstat_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	20004d38 	.word	0x20004d38

0800a56c <_isatty_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	@ (800a588 <_isatty_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f7 f91a 	bl	80017b0 <_isatty>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_isatty_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_isatty_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20004d38 	.word	0x20004d38

0800a58c <_init>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr

0800a598 <_fini>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr
