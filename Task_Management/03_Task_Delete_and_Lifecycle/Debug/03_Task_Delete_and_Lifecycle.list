
03_Task_Delete_and_Lifecycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800455c  0800455c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004564  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000497c  20000010  08004574  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000498c  08004574  0000698c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2dd  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243f  00000000  00000000  0001331d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00015760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000920  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025e2  00000000  00000000  00016ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfc3  00000000  00000000  00019282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5be  00000000  00000000  00026245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000b2848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000b5968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800448c 	.word	0x0800448c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800448c 	.word	0x0800448c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
void LED_Task1(void *argument);
void LED_Task2(void *argument);
void Terminate_Task(void *argument);

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000510:	f000 f992 	bl	8000838 <HAL_Init>
  SystemClock_Config();
 8000514:	f000 f824 	bl	8000560 <SystemClock_Config>
  MX_GPIO_Init();
 8000518:	f000 f882 	bl	8000620 <MX_GPIO_Init>

  osKernelInitialize();
 800051c:	f001 f8f4 	bl	8001708 <osKernelInitialize>

  /* Start only LED1 and TerminateTask */
  LED1Handle = osThreadNew(LED_Task1, NULL, &LED1_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <main+0x3c>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x40>)
 8000526:	f001 f939 	bl	800179c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <main+0x44>)
 800052e:	6013      	str	r3, [r2, #0]
  TerminateHandle = osThreadNew(Terminate_Task, NULL, &Terminate_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <main+0x48>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0x4c>)
 8000536:	f001 f931 	bl	800179c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <main+0x50>)
 800053e:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000540:	f001 f906 	bl	8001750 <osKernelStart>

  while (1) { }
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x38>
 8000548:	080044d8 	.word	0x080044d8
 800054c:	08000685 	.word	0x08000685
 8000550:	2000002c 	.word	0x2000002c
 8000554:	08004520 	.word	0x08004520
 8000558:	080006c5 	.word	0x080006c5
 800055c:	20000034 	.word	0x20000034

08000560 <SystemClock_Config>:
}

/* === System Clock Configuration === */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 ff52 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <SystemClock_Config+0xb8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <SystemClock_Config+0xb8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <SystemClock_Config+0xb8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <SystemClock_Config+0xbc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <SystemClock_Config+0xbc>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fc3f 	bl	8000e58 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x84>
    Error_Handler();
 80005e0:	f000 f894 	bl	800070c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fea2 	bl	8001348 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xae>
    Error_Handler();
 800060a:	f000 f87f 	bl	800070c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	@ 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_GPIO_Init>:

/* === GPIO Init === */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_GPIO_Init+0x5c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <MX_GPIO_Init+0x5c>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6313      	str	r3, [r2, #48]	@ 0x30
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_GPIO_Init+0x5c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2120      	movs	r1, #32
 8000654:	480a      	ldr	r0, [pc, #40]	@ (8000680 <MX_GPIO_Init+0x60>)
 8000656:	f000 fbcb 	bl	8000df0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LED_PIN;
 800065a:	2320      	movs	r3, #32
 800065c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_GPIO_Init+0x60>)
 8000670:	f000 fa3a 	bl	8000ae8 <HAL_GPIO_Init>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000

08000684 <LED_Task1>:

/* === Task1: Fast blink === */
void LED_Task1(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 800068c:	2120      	movs	r1, #32
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <LED_Task1+0x1c>)
 8000690:	f000 fbc7 	bl	8000e22 <HAL_GPIO_TogglePin>
    osDelay(200);  // fast blink
 8000694:	20c8      	movs	r0, #200	@ 0xc8
 8000696:	f001 f940 	bl	800191a <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 800069a:	bf00      	nop
 800069c:	e7f6      	b.n	800068c <LED_Task1+0x8>
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000

080006a4 <LED_Task2>:
  }
}


void LED_Task2(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 80006ac:	2120      	movs	r1, #32
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <LED_Task2+0x1c>)
 80006b0:	f000 fbb7 	bl	8000e22 <HAL_GPIO_TogglePin>
    osDelay(1000); // slow blink
 80006b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b8:	f001 f92f 	bl	800191a <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 80006bc:	bf00      	nop
 80006be:	e7f5      	b.n	80006ac <LED_Task2+0x8>
 80006c0:	40020000 	.word	0x40020000

080006c4 <Terminate_Task>:
  }
}

/* === Terminate Task: stop Task1, start Task2 === */
void Terminate_Task(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  osDelay(5000);                  // wait 5 seconds
 80006cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006d0:	f001 f923 	bl	800191a <osDelay>
  osThreadTerminate(LED1Handle);  // kill Task1
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <Terminate_Task+0x38>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f8f1 	bl	80018c0 <osThreadTerminate>
  LED2Handle = osThreadNew(LED_Task2, NULL, &LED2_attributes); // start Task2
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <Terminate_Task+0x3c>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4808      	ldr	r0, [pc, #32]	@ (8000704 <Terminate_Task+0x40>)
 80006e4:	f001 f85a 	bl	800179c <osThreadNew>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <Terminate_Task+0x44>)
 80006ec:	6013      	str	r3, [r2, #0]
  osThreadTerminate(NULL);        // kill itself
 80006ee:	2000      	movs	r0, #0
 80006f0:	f001 f8e6 	bl	80018c0 <osThreadTerminate>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	080044fc 	.word	0x080044fc
 8000704:	080006a5 	.word	0x080006a5
 8000708:	20000030 	.word	0x20000030

0800070c <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  __disable_irq();
  while (1) { }
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_MspInit+0x54>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000726:	4a11      	ldr	r2, [pc, #68]	@ (800076c <HAL_MspInit+0x54>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072c:	6453      	str	r3, [r2, #68]	@ 0x44
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x54>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <HAL_MspInit+0x54>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <HAL_MspInit+0x54>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <HAL_MspInit+0x54>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	210f      	movs	r1, #15
 800075a:	f06f 0001 	mvn.w	r0, #1
 800075e:	f000 f99a 	bl	8000a96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f897 	bl	80008dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007ae:	f002 fdb7 	bl	8003320 <xTaskGetSchedulerState>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d001      	beq.n	80007bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007b8:	f003 fbae 	bl	8003f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800081c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007e8:	f7ff ffea 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	@ (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000812:	f003 fe09 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe79 	bl	800050c <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800081c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000828:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 800082c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000830:	2000498c 	.word	0x2000498c

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f90d 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff ff54 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f917 	bl	8000ace <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f8ed 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000038 	.word	0x20000038

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000038 	.word	0x20000038

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	@ (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	@ 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff47 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff5c 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff8e 	bl	80009d4 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5d 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffb0 	bl	8000a3c <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	e159      	b.n	8000db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b04:	2201      	movs	r2, #1
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8148 	bne.w	8000db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d005      	beq.n	8000b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d130      	bne.n	8000b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b70:	2201      	movs	r2, #1
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	f003 0201 	and.w	r2, r3, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d017      	beq.n	8000bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d123      	bne.n	8000c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	69b9      	ldr	r1, [r7, #24]
 8000c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0203 	and.w	r2, r3, #3
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80a2 	beq.w	8000db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b57      	ldr	r3, [pc, #348]	@ (8000dd0 <HAL_GPIO_Init+0x2e8>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a56      	ldr	r2, [pc, #344]	@ (8000dd0 <HAL_GPIO_Init+0x2e8>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b54      	ldr	r3, [pc, #336]	@ (8000dd0 <HAL_GPIO_Init+0x2e8>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c8a:	4a52      	ldr	r2, [pc, #328]	@ (8000dd4 <HAL_GPIO_Init+0x2ec>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a49      	ldr	r2, [pc, #292]	@ (8000dd8 <HAL_GPIO_Init+0x2f0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d019      	beq.n	8000cea <HAL_GPIO_Init+0x202>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a48      	ldr	r2, [pc, #288]	@ (8000ddc <HAL_GPIO_Init+0x2f4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0x1fe>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a47      	ldr	r2, [pc, #284]	@ (8000de0 <HAL_GPIO_Init+0x2f8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00d      	beq.n	8000ce2 <HAL_GPIO_Init+0x1fa>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a46      	ldr	r2, [pc, #280]	@ (8000de4 <HAL_GPIO_Init+0x2fc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d007      	beq.n	8000cde <HAL_GPIO_Init+0x1f6>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a45      	ldr	r2, [pc, #276]	@ (8000de8 <HAL_GPIO_Init+0x300>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_GPIO_Init+0x1f2>
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e008      	b.n	8000cec <HAL_GPIO_Init+0x204>
 8000cda:	2307      	movs	r3, #7
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x204>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e004      	b.n	8000cec <HAL_GPIO_Init+0x204>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_Init+0x204>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x204>
 8000cea:	2300      	movs	r3, #0
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	f002 0203 	and.w	r2, r2, #3
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4093      	lsls	r3, r2
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cfc:	4935      	ldr	r1, [pc, #212]	@ (8000dd4 <HAL_GPIO_Init+0x2ec>)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0a:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d58:	4a24      	ldr	r2, [pc, #144]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d82:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dac:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3301      	adds	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	f67f aea2 	bls.w	8000b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40013c00 	.word	0x40013c00

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e00:	787b      	ldrb	r3, [r7, #1]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e0c:	e003      	b.n	8000e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	619a      	str	r2, [r3, #24]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	041a      	lsls	r2, r3, #16
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	400b      	ands	r3, r1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	619a      	str	r2, [r3, #24]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e267      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d075      	beq.n	8000f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e76:	4b88      	ldr	r3, [pc, #544]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d00c      	beq.n	8000e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e82:	4b85      	ldr	r3, [pc, #532]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d112      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e8e:	4b82      	ldr	r3, [pc, #520]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d05b      	beq.n	8000f60 <HAL_RCC_OscConfig+0x108>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d157      	bne.n	8000f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e242      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x74>
 8000ebe:	4b76      	ldr	r3, [pc, #472]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a75      	ldr	r2, [pc, #468]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0xb0>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x98>
 8000ed6:	4b70      	ldr	r3, [pc, #448]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6f      	ldr	r2, [pc, #444]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xb0>
 8000ef0:	4b69      	ldr	r3, [pc, #420]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a68      	ldr	r2, [pc, #416]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b66      	ldr	r3, [pc, #408]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a65      	ldr	r2, [pc, #404]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fcf8 	bl	8000904 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcf4 	bl	8000904 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e207      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xc0>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fce4 	bl	8000904 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fce0 	bl	8000904 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1f3      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b51      	ldr	r3, [pc, #324]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0xe8>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d063      	beq.n	8001036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f7a:	4b47      	ldr	r3, [pc, #284]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d11c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f86:	4b44      	ldr	r3, [pc, #272]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	4b41      	ldr	r3, [pc, #260]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x152>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d001      	beq.n	8000faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e1c7      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4937      	ldr	r1, [pc, #220]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e03a      	b.n	8001036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b34      	ldr	r3, [pc, #208]	@ (800109c <HAL_RCC_OscConfig+0x244>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff fc99 	bl	8000904 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc95 	bl	8000904 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1a8      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4925      	ldr	r1, [pc, #148]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b24      	ldr	r3, [pc, #144]	@ (800109c <HAL_RCC_OscConfig+0x244>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fc78 	bl	8000904 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fc74 	bl	8000904 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e187      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d036      	beq.n	80010b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d016      	beq.n	8001078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_RCC_OscConfig+0x248>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fc58 	bl	8000904 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fc54 	bl	8000904 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e167      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_RCC_OscConfig+0x240>)
 800106c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x200>
 8001076:	e01b      	b.n	80010b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_RCC_OscConfig+0x248>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fc41 	bl	8000904 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	e00e      	b.n	80010a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001086:	f7ff fc3d 	bl	8000904 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d907      	bls.n	80010a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e150      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
 8001098:	40023800 	.word	0x40023800
 800109c:	42470000 	.word	0x42470000
 80010a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	4b88      	ldr	r3, [pc, #544]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80010a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ea      	bne.n	8001086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8097 	beq.w	80011ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c2:	4b81      	ldr	r3, [pc, #516]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10f      	bne.n	80010ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b7d      	ldr	r3, [pc, #500]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	4a7c      	ldr	r2, [pc, #496]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010de:	4b7a      	ldr	r3, [pc, #488]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ee:	4b77      	ldr	r3, [pc, #476]	@ (80012cc <HAL_RCC_OscConfig+0x474>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fa:	4b74      	ldr	r3, [pc, #464]	@ (80012cc <HAL_RCC_OscConfig+0x474>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a73      	ldr	r2, [pc, #460]	@ (80012cc <HAL_RCC_OscConfig+0x474>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001106:	f7ff fbfd 	bl	8000904 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110e:	f7ff fbf9 	bl	8000904 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e10c      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b6a      	ldr	r3, [pc, #424]	@ (80012cc <HAL_RCC_OscConfig+0x474>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x2ea>
 8001134:	4b64      	ldr	r3, [pc, #400]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001138:	4a63      	ldr	r2, [pc, #396]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x324>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x30c>
 800114a:	4b5f      	ldr	r3, [pc, #380]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800114c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800114e:	4a5e      	ldr	r2, [pc, #376]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6713      	str	r3, [r2, #112]	@ 0x70
 8001156:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800115a:	4a5b      	ldr	r2, [pc, #364]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6713      	str	r3, [r2, #112]	@ 0x70
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0x324>
 8001164:	4b58      	ldr	r3, [pc, #352]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001168:	4a57      	ldr	r2, [pc, #348]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001170:	4b55      	ldr	r3, [pc, #340]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001174:	4a54      	ldr	r2, [pc, #336]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001176:	f023 0304 	bic.w	r3, r3, #4
 800117a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d015      	beq.n	80011b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff fbbe 	bl	8000904 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118c:	f7ff fbba 	bl	8000904 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e0cb      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a2:	4b49      	ldr	r3, [pc, #292]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ee      	beq.n	800118c <HAL_RCC_OscConfig+0x334>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fba8 	bl	8000904 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b8:	f7ff fba4 	bl	8000904 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e0b5      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1ee      	bne.n	80011b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e0:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a38      	ldr	r2, [pc, #224]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80011e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a1 	beq.w	8001338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d05c      	beq.n	80012bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d141      	bne.n	800128e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <HAL_RCC_OscConfig+0x478>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fb78 	bl	8000904 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fb74 	bl	8000904 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e087      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	019b      	lsls	r3, r3, #6
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	3b01      	subs	r3, #1
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	491b      	ldr	r1, [pc, #108]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_RCC_OscConfig+0x478>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fb4d 	bl	8000904 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff fb49 	bl	8000904 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e05c      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x416>
 800128c:	e054      	b.n	8001338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <HAL_RCC_OscConfig+0x478>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb36 	bl	8000904 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fb32 	bl	8000904 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e045      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_RCC_OscConfig+0x470>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x444>
 80012ba:	e03d      	b.n	8001338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e038      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000
 80012d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_RCC_OscConfig+0x4ec>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d028      	beq.n	8001334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d121      	bne.n	8001334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d11a      	bne.n	8001334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001304:	4013      	ands	r3, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800130a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800130c:	4293      	cmp	r3, r2
 800130e:	d111      	bne.n	8001334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	3b01      	subs	r3, #1
 800131e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0cc      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d90c      	bls.n	8001384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b65      	ldr	r3, [pc, #404]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b8      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a58      	ldr	r2, [pc, #352]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	494d      	ldr	r1, [pc, #308]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d044      	beq.n	8001468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d119      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001402:	2b03      	cmp	r3, #3
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001406:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e067      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001426:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f023 0203 	bic.w	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4934      	ldr	r1, [pc, #208]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	4313      	orrs	r3, r2
 8001436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001438:	f7ff fa64 	bl	8000904 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	e00a      	b.n	8001456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001440:	f7ff fa60 	bl	8000904 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144e:	4293      	cmp	r3, r2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e04f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 020c 	and.w	r2, r3, #12
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	429a      	cmp	r2, r3
 8001466:	d1eb      	bne.n	8001440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001468:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d20c      	bcs.n	8001490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e032      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4916      	ldr	r1, [pc, #88]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	490e      	ldr	r1, [pc, #56]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ce:	f000 f821 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490a      	ldr	r1, [pc, #40]	@ (8001508 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f9c4 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00
 8001504:	40023800 	.word	0x40023800
 8001508:	08004544 	.word	0x08004544
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001518:	b090      	sub	sp, #64	@ 0x40
 800151a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152c:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d00d      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x40>
 8001538:	2b08      	cmp	r3, #8
 800153a:	f200 80a1 	bhi.w	8001680 <HAL_RCC_GetSysClockFreq+0x16c>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x34>
 8001542:	2b04      	cmp	r3, #4
 8001544:	d003      	beq.n	800154e <HAL_RCC_GetSysClockFreq+0x3a>
 8001546:	e09b      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001548:	4b53      	ldr	r3, [pc, #332]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x184>)
 800154a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800154c:	e09b      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800154e:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001552:	e098      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001554:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800155c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155e:	4b4d      	ldr	r3, [pc, #308]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d028      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156a:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	2200      	movs	r2, #0
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	627a      	str	r2, [r7, #36]	@ 0x24
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800157c:	2100      	movs	r1, #0
 800157e:	4b47      	ldr	r3, [pc, #284]	@ (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 8001580:	fb03 f201 	mul.w	r2, r3, r1
 8001584:	2300      	movs	r3, #0
 8001586:	fb00 f303 	mul.w	r3, r0, r3
 800158a:	4413      	add	r3, r2
 800158c:	4a43      	ldr	r2, [pc, #268]	@ (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 800158e:	fba0 1202 	umull	r1, r2, r0, r2
 8001592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001594:	460a      	mov	r2, r1
 8001596:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800159a:	4413      	add	r3, r2
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800159e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a0:	2200      	movs	r2, #0
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	61fa      	str	r2, [r7, #28]
 80015a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80015ae:	f7fe fe17 	bl	80001e0 <__aeabi_uldivmod>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4613      	mov	r3, r2
 80015b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ba:	e053      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	2200      	movs	r2, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	617a      	str	r2, [r7, #20]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015ce:	f04f 0b00 	mov.w	fp, #0
 80015d2:	4652      	mov	r2, sl
 80015d4:	465b      	mov	r3, fp
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0159      	lsls	r1, r3, #5
 80015e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e4:	0150      	lsls	r0, r2, #5
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ebb2 080a 	subs.w	r8, r2, sl
 80015ee:	eb63 090b 	sbc.w	r9, r3, fp
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001606:	ebb2 0408 	subs.w	r4, r2, r8
 800160a:	eb63 0509 	sbc.w	r5, r3, r9
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	00eb      	lsls	r3, r5, #3
 8001618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161c:	00e2      	lsls	r2, r4, #3
 800161e:	4614      	mov	r4, r2
 8001620:	461d      	mov	r5, r3
 8001622:	eb14 030a 	adds.w	r3, r4, sl
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	eb45 030b 	adc.w	r3, r5, fp
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800163a:	4629      	mov	r1, r5
 800163c:	028b      	lsls	r3, r1, #10
 800163e:	4621      	mov	r1, r4
 8001640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001644:	4621      	mov	r1, r4
 8001646:	028a      	lsls	r2, r1, #10
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164e:	2200      	movs	r2, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001658:	f7fe fdc2 	bl	80001e0 <__aeabi_uldivmod>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4613      	mov	r3, r2
 8001662:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	3301      	adds	r3, #1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800167e:	e002      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x184>)
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001688:	4618      	mov	r0, r3
 800168a:	3740      	adds	r7, #64	@ 0x40
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	00f42400 	.word	0x00f42400
 800169c:	017d7840 	.word	0x017d7840

080016a0 <__NVIC_SetPriority>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	@ (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80016f8:	2100      	movs	r1, #0
 80016fa:	f06f 0004 	mvn.w	r0, #4
 80016fe:	f7ff ffcf 	bl	80016a0 <__NVIC_SetPriority>
#endif
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800170e:	f3ef 8305 	mrs	r3, IPSR
 8001712:	603b      	str	r3, [r7, #0]
  return(result);
 8001714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800171a:	f06f 0305 	mvn.w	r3, #5
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	e00c      	b.n	800173c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <osKernelInitialize+0x44>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <osKernelInitialize+0x44>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e002      	b.n	800173c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000003c 	.word	0x2000003c

08001750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001756:	f3ef 8305 	mrs	r3, IPSR
 800175a:	603b      	str	r3, [r7, #0]
  return(result);
 800175c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001762:	f06f 0305 	mvn.w	r3, #5
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	e010      	b.n	800178c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <osKernelStart+0x48>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d109      	bne.n	8001786 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001772:	f7ff ffbf 	bl	80016f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <osKernelStart+0x48>)
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800177c:	f001 f982 	bl	8002a84 <vTaskStartScheduler>
      stat = osOK;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e002      	b.n	800178c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000003c 	.word	0x2000003c

0800179c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	@ 0x38
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ac:	f3ef 8305 	mrs	r3, IPSR
 80017b0:	617b      	str	r3, [r7, #20]
  return(result);
 80017b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d17e      	bne.n	80018b6 <osThreadNew+0x11a>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d07b      	beq.n	80018b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80017c2:	2318      	movs	r3, #24
 80017c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d045      	beq.n	8001862 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <osThreadNew+0x48>
        name = attr->name;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <osThreadNew+0x6e>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b38      	cmp	r3, #56	@ 0x38
 80017fc:	d805      	bhi.n	800180a <osThreadNew+0x6e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <osThreadNew+0x72>
        return (NULL);
 800180a:	2300      	movs	r3, #0
 800180c:	e054      	b.n	80018b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00e      	beq.n	8001844 <osThreadNew+0xa8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b5b      	cmp	r3, #91	@ 0x5b
 800182c:	d90a      	bls.n	8001844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <osThreadNew+0xa8>
        mem = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	e010      	b.n	8001866 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <osThreadNew+0xca>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <osThreadNew+0xca>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <osThreadNew+0xca>
          mem = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	e001      	b.n	8001866 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d110      	bne.n	800188e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001874:	9202      	str	r2, [sp, #8]
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fe46 	bl	8002514 <xTaskCreateStatic>
 8001888:	4603      	mov	r3, r0
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	e013      	b.n	80018b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d110      	bne.n	80018b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	b29a      	uxth	r2, r3
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 fe94 	bl	80025d4 <xTaskCreate>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <osThreadNew+0x11a>
            hTask = NULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018b6:	693b      	ldr	r3, [r7, #16]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3728      	adds	r7, #40	@ 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018cc:	f3ef 8305 	mrs	r3, IPSR
 80018d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80018d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80018d8:	f06f 0305 	mvn.w	r3, #5
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e017      	b.n	8001910 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80018e6:	f06f 0303 	mvn.w	r3, #3
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e010      	b.n	8001910 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f001 f860 	bl	80029b4 <eTaskGetState>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d005      	beq.n	800190a <osThreadTerminate+0x4a>
      stat = osOK;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8001902:	6938      	ldr	r0, [r7, #16]
 8001904:	f000 ffac 	bl	8002860 <vTaskDelete>
 8001908:	e002      	b.n	8001910 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800190a:	f06f 0302 	mvn.w	r3, #2
 800190e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001910:	697b      	ldr	r3, [r7, #20]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001922:	f3ef 8305 	mrs	r3, IPSR
 8001926:	60bb      	str	r3, [r7, #8]
  return(result);
 8001928:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <osDelay+0x1c>
    stat = osErrorISR;
 800192e:	f06f 0305 	mvn.w	r3, #5
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e007      	b.n	8001946 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f001 f801 	bl	8002948 <vTaskDelay>
    }
  }

  return (stat);
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a07      	ldr	r2, [pc, #28]	@ (800197c <vApplicationGetIdleTaskMemory+0x2c>)
 8001960:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <vApplicationGetIdleTaskMemory+0x30>)
 8001966:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000040 	.word	0x20000040
 8001980:	2000009c 	.word	0x2000009c

08001984 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001994:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <vApplicationGetTimerTaskMemory+0x30>)
 800199a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000029c 	.word	0x2000029c
 80019b4:	200002f8 	.word	0x200002f8

080019b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f103 0208 	add.w	r2, r3, #8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f103 0208 	add.w	r2, r3, #8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f103 0208 	add.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d103      	bne.n	8001a7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00c      	b.n	8001a94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e002      	b.n	8001a88 <vListInsert+0x2e>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d2f6      	bcs.n	8001a82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6892      	ldr	r2, [r2, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d103      	bne.n	8001b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10b      	bne.n	8001b4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b4c:	f002 f954 	bl	8003df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	441a      	add	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	22ff      	movs	r2, #255	@ 0xff
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	22ff      	movs	r2, #255	@ 0xff
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d114      	bne.n	8001bcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01a      	beq.n	8001be0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3310      	adds	r3, #16
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 f9f6 	bl	8002fa0 <xTaskRemoveFromEventList>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <xQueueGenericReset+0xd0>)
 8001bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	e009      	b.n	8001be0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3310      	adds	r3, #16
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fef1 	bl	80019b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3324      	adds	r3, #36	@ 0x24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff feec 	bl	80019b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001be0:	f002 f93c 	bl	8003e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000ed04 	.word	0xe000ed04

08001bf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	@ 0x38
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10b      	bne.n	8001c20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <xQueueGenericCreateStatic+0x56>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <xQueueGenericCreateStatic+0x5a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <xQueueGenericCreateStatic+0x5c>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10b      	bne.n	8001c6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	623b      	str	r3, [r7, #32]
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <xQueueGenericCreateStatic+0x84>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <xQueueGenericCreateStatic+0x88>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <xQueueGenericCreateStatic+0x8a>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	61fb      	str	r3, [r7, #28]
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c9a:	2350      	movs	r3, #80	@ 0x50
 8001c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b50      	cmp	r3, #80	@ 0x50
 8001ca2:	d00b      	beq.n	8001cbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	61bb      	str	r3, [r7, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f805 	bl	8001cee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3730      	adds	r7, #48	@ 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e002      	b.n	8001d10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	69b8      	ldr	r0, [r7, #24]
 8001d20:	f7ff fefe 	bl	8001b20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	@ 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10b      	bne.n	8001d68 <xQueueGenericSend+0x34>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <xQueueGenericSend+0x42>
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <xQueueGenericSend+0x46>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <xQueueGenericSend+0x48>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <xQueueGenericSend+0x64>
	__asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d103      	bne.n	8001da6 <xQueueGenericSend+0x72>
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <xQueueGenericSend+0x76>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <xQueueGenericSend+0x78>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <xQueueGenericSend+0x94>
	__asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	623b      	str	r3, [r7, #32]
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dc8:	f001 faaa 	bl	8003320 <xTaskGetSchedulerState>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <xQueueGenericSend+0xa4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <xQueueGenericSend+0xa8>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <xQueueGenericSend+0xaa>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10b      	bne.n	8001dfa <xQueueGenericSend+0xc6>
	__asm volatile
 8001de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de6:	f383 8811 	msr	BASEPRI, r3
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f3bf 8f4f 	dsb	sy
 8001df2:	61fb      	str	r3, [r7, #28]
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dfa:	f001 fffd 	bl	8003df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <xQueueGenericSend+0xdc>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d129      	bne.n	8001e64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e16:	f000 fa0f 	bl	8002238 <prvCopyDataToQueue>
 8001e1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d010      	beq.n	8001e46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e26:	3324      	adds	r3, #36	@ 0x24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f8b9 	bl	8002fa0 <xTaskRemoveFromEventList>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e34:	4b3f      	ldr	r3, [pc, #252]	@ (8001f34 <xQueueGenericSend+0x200>)
 8001e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	e00a      	b.n	8001e5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <xQueueGenericSend+0x200>)
 8001e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e5c:	f001 fffe 	bl	8003e5c <vPortExitCritical>
				return pdPASS;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e063      	b.n	8001f2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e6a:	f001 fff7 	bl	8003e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e05c      	b.n	8001f2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 f8f3 	bl	8003068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e86:	f001 ffe9 	bl	8003e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e8a:	f000 fe63 	bl	8002b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e8e:	f001 ffb3 	bl	8003df8 <vPortEnterCritical>
 8001e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9e:	d103      	bne.n	8001ea8 <xQueueGenericSend+0x174>
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d103      	bne.n	8001ebe <xQueueGenericSend+0x18a>
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ebe:	f001 ffcd 	bl	8003e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ec2:	1d3a      	adds	r2, r7, #4
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 f8e2 	bl	8003094 <xTaskCheckForTimeOut>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d124      	bne.n	8001f20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ed8:	f000 faa6 	bl	8002428 <prvIsQueueFull>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d018      	beq.n	8001f14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 f806 	bl	8002efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ef2:	f000 fa31 	bl	8002358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ef6:	f000 fe3b 	bl	8002b70 <xTaskResumeAll>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f af7c 	bne.w	8001dfa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <xQueueGenericSend+0x200>)
 8001f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	e772      	b.n	8001dfa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f16:	f000 fa1f 	bl	8002358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f1a:	f000 fe29 	bl	8002b70 <xTaskResumeAll>
 8001f1e:	e76c      	b.n	8001dfa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f22:	f000 fa19 	bl	8002358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f26:	f000 fe23 	bl	8002b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3738      	adds	r7, #56	@ 0x38
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	e000ed04 	.word	0xe000ed04

08001f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b090      	sub	sp, #64	@ 0x40
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <xQueueGenericSendFromISR+0x3e>
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <xQueueGenericSendFromISR+0x42>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <xQueueGenericSendFromISR+0x44>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d103      	bne.n	8001fa6 <xQueueGenericSendFromISR+0x6e>
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <xQueueGenericSendFromISR+0x72>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <xQueueGenericSendFromISR+0x74>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	623b      	str	r3, [r7, #32]
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fc8:	f001 fff6 	bl	8003fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fcc:	f3ef 8211 	mrs	r2, BASEPRI
 8001fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	61fa      	str	r2, [r7, #28]
 8001fe2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d302      	bcc.n	8001ffa <xQueueGenericSendFromISR+0xc2>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d12f      	bne.n	800205a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002000:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002010:	f000 f912 	bl	8002238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002014:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d112      	bne.n	8002044 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d016      	beq.n	8002054 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002028:	3324      	adds	r3, #36	@ 0x24
 800202a:	4618      	mov	r0, r3
 800202c:	f000 ffb8 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00e      	beq.n	8002054 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e007      	b.n	8002054 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002044:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002048:	3301      	adds	r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	b25a      	sxtb	r2, r3
 800204e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002054:	2301      	movs	r3, #1
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002058:	e001      	b.n	800205e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002060:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800206a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800206c:	4618      	mov	r0, r3
 800206e:	3740      	adds	r7, #64	@ 0x40
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <xQueueReceive+0x32>
	__asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	623b      	str	r3, [r7, #32]
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <xQueueReceive+0x40>
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <xQueueReceive+0x44>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <xQueueReceive+0x46>
 80020b8:	2300      	movs	r3, #0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <xQueueReceive+0x62>
	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	61fb      	str	r3, [r7, #28]
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	e7fd      	b.n	80020d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020d6:	f001 f923 	bl	8003320 <xTaskGetSchedulerState>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <xQueueReceive+0x72>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <xQueueReceive+0x76>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <xQueueReceive+0x78>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <xQueueReceive+0x94>
	__asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	61bb      	str	r3, [r7, #24]
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002108:	f001 fe76 	bl	8003df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01f      	beq.n	8002158 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800211c:	f000 f8f6 	bl	800230c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00f      	beq.n	8002150 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	3310      	adds	r3, #16
 8002134:	4618      	mov	r0, r3
 8002136:	f000 ff33 	bl	8002fa0 <xTaskRemoveFromEventList>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002140:	4b3c      	ldr	r3, [pc, #240]	@ (8002234 <xQueueReceive+0x1c0>)
 8002142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002150:	f001 fe84 	bl	8003e5c <vPortExitCritical>
				return pdPASS;
 8002154:	2301      	movs	r3, #1
 8002156:	e069      	b.n	800222c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800215e:	f001 fe7d 	bl	8003e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002162:	2300      	movs	r3, #0
 8002164:	e062      	b.n	800222c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4618      	mov	r0, r3
 8002172:	f000 ff79 	bl	8003068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002176:	2301      	movs	r3, #1
 8002178:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800217a:	f001 fe6f 	bl	8003e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800217e:	f000 fce9 	bl	8002b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002182:	f001 fe39 	bl	8003df8 <vPortEnterCritical>
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800218c:	b25b      	sxtb	r3, r3
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d103      	bne.n	800219c <xQueueReceive+0x128>
 8002194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d103      	bne.n	80021b2 <xQueueReceive+0x13e>
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021b2:	f001 fe53 	bl	8003e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021b6:	1d3a      	adds	r2, r7, #4
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ff68 	bl	8003094 <xTaskCheckForTimeOut>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d123      	bne.n	8002212 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021cc:	f000 f916 	bl	80023fc <prvIsQueueEmpty>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d017      	beq.n	8002206 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	3324      	adds	r3, #36	@ 0x24
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fe8c 	bl	8002efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021e6:	f000 f8b7 	bl	8002358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021ea:	f000 fcc1 	bl	8002b70 <xTaskResumeAll>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d189      	bne.n	8002108 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <xQueueReceive+0x1c0>)
 80021f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	e780      	b.n	8002108 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002208:	f000 f8a6 	bl	8002358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800220c:	f000 fcb0 	bl	8002b70 <xTaskResumeAll>
 8002210:	e77a      	b.n	8002108 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002214:	f000 f8a0 	bl	8002358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002218:	f000 fcaa 	bl	8002b70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800221c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800221e:	f000 f8ed 	bl	80023fc <prvIsQueueEmpty>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	f43f af6f 	beq.w	8002108 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800222a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800222c:	4618      	mov	r0, r3
 800222e:	3730      	adds	r7, #48	@ 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d14d      	bne.n	80022fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f001 f87a 	bl	800335c <xTaskPriorityDisinherit>
 8002268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e043      	b.n	80022fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d119      	bne.n	80022ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6858      	ldr	r0, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	461a      	mov	r2, r3
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	f002 f8f4 	bl	8004470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	441a      	add	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d32b      	bcc.n	80022fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e026      	b.n	80022fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	461a      	mov	r2, r3
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	f002 f8da 	bl	8004470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	425b      	negs	r3, r3
 80022c6:	441a      	add	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	425b      	negs	r3, r3
 80022e2:	441a      	add	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d105      	bne.n	80022fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002302:	697b      	ldr	r3, [r7, #20]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	441a      	add	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	d303      	bcc.n	8002340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68d9      	ldr	r1, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	461a      	mov	r2, r3
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f002 f890 	bl	8004470 <memcpy>
	}
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002360:	f001 fd4a 	bl	8003df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800236a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800236c:	e011      	b.n	8002392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3324      	adds	r3, #36	@ 0x24
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fe10 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002386:	f000 fee9 	bl	800315c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3b01      	subs	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	dce9      	bgt.n	800236e <prvUnlockQueue+0x16>
 800239a:	e000      	b.n	800239e <prvUnlockQueue+0x46>
					break;
 800239c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	22ff      	movs	r2, #255	@ 0xff
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80023a6:	f001 fd59 	bl	8003e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023aa:	f001 fd25 	bl	8003df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b6:	e011      	b.n	80023dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fdeb 	bl	8002fa0 <xTaskRemoveFromEventList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023d0:	f000 fec4 	bl	800315c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dce9      	bgt.n	80023b8 <prvUnlockQueue+0x60>
 80023e4:	e000      	b.n	80023e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	22ff      	movs	r2, #255	@ 0xff
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80023f0:	f001 fd34 	bl	8003e5c <vPortExitCritical>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002404:	f001 fcf8 	bl	8003df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800241a:	f001 fd1f 	bl	8003e5c <vPortExitCritical>

	return xReturn;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002430:	f001 fce2 	bl	8003df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	429a      	cmp	r2, r3
 800243e:	d102      	bne.n	8002446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e001      	b.n	800244a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800244a:	f001 fd07 	bl	8003e5c <vPortExitCritical>

	return xReturn;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e014      	b.n	8002492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <vQueueAddToRegistry+0x50>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <vQueueAddToRegistry+0x50>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <vQueueAddToRegistry+0x50>)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800248a:	e006      	b.n	800249a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b07      	cmp	r3, #7
 8002496:	d9e7      	bls.n	8002468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200006f8 	.word	0x200006f8

080024ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024bc:	f001 fc9c 	bl	8003df8 <vPortEnterCritical>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d103      	bne.n	80024d6 <vQueueWaitForMessageRestricted+0x2a>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d103      	bne.n	80024ec <vQueueWaitForMessageRestricted+0x40>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024ec:	f001 fcb6 	bl	8003e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3324      	adds	r3, #36	@ 0x24
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fd21 	bl	8002f48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff26 	bl	8002358 <prvUnlockQueue>
	}
 800250c:	bf00      	nop
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	@ 0x38
 8002518:	af04      	add	r7, sp, #16
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	623b      	str	r3, [r7, #32]
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	61fb      	str	r3, [r7, #28]
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	e7fd      	b.n	800255a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800255e:	235c      	movs	r3, #92	@ 0x5c
 8002560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b5c      	cmp	r3, #92	@ 0x5c
 8002566:	d00b      	beq.n	8002580 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002580:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01e      	beq.n	80025c6 <xTaskCreateStatic+0xb2>
 8002588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01b      	beq.n	80025c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80025a0:	2300      	movs	r3, #0
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f850 	bl	800265e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025c0:	f000 f8de 	bl	8002780 <prvAddNewTaskToReadyList>
 80025c4:	e001      	b.n	80025ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025ca:	697b      	ldr	r3, [r7, #20]
	}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3728      	adds	r7, #40	@ 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	@ 0x30
 80025d8:	af04      	add	r7, sp, #16
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fd27 	bl	800403c <pvPortMalloc>
 80025ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00e      	beq.n	8002614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025f6:	205c      	movs	r0, #92	@ 0x5c
 80025f8:	f001 fd20 	bl	800403c <pvPortMalloc>
 80025fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30
 800260a:	e005      	b.n	8002618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800260c:	6978      	ldr	r0, [r7, #20]
 800260e:	f001 fde3 	bl	80041d8 <vPortFree>
 8002612:	e001      	b.n	8002618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d017      	beq.n	800264e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	2300      	movs	r3, #0
 800262a:	9303      	str	r3, [sp, #12]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f80e 	bl	800265e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002642:	69f8      	ldr	r0, [r7, #28]
 8002644:	f000 f89c 	bl	8002780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002648:	2301      	movs	r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e002      	b.n	8002654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002654:	69bb      	ldr	r3, [r7, #24]
	}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b088      	sub	sp, #32
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	21a5      	movs	r1, #165	@ 0xa5
 8002678:	f001 fece 	bl	8004418 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002686:	3b01      	subs	r3, #1
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	617b      	str	r3, [r7, #20]
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01f      	beq.n	80026fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e012      	b.n	80026ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	7819      	ldrb	r1, [r3, #0]
 80026cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	3334      	adds	r3, #52	@ 0x34
 80026d4:	460a      	mov	r2, r1
 80026d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d9e9      	bls.n	80026c4 <prvInitialiseNewTask+0x66>
 80026f0:	e000      	b.n	80026f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80026f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026fc:	e003      	b.n	8002706 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	2b37      	cmp	r3, #55	@ 0x37
 800270a:	d901      	bls.n	8002710 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800270c:	2337      	movs	r3, #55	@ 0x37
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800271a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	2200      	movs	r2, #0
 8002720:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	3304      	adds	r3, #4
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f966 	bl	80019f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	3318      	adds	r3, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f961 	bl	80019f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	69b8      	ldr	r0, [r7, #24]
 8002760:	f001 fa1a 	bl	8003b98 <pxPortInitialiseStack>
 8002764:	4602      	mov	r2, r0
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002788:	f001 fb36 	bl	8003df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800278c:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <prvAddNewTaskToReadyList+0xc4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <prvAddNewTaskToReadyList+0xc4>)
 8002794:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002796:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <prvAddNewTaskToReadyList+0xc8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800279e:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <prvAddNewTaskToReadyList+0xc8>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027a4:	4b27      	ldr	r3, [pc, #156]	@ (8002844 <prvAddNewTaskToReadyList+0xc4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d110      	bne.n	80027ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027ac:	f000 fcfa 	bl	80031a4 <prvInitialiseTaskLists>
 80027b0:	e00d      	b.n	80027ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027b2:	4b26      	ldr	r3, [pc, #152]	@ (800284c <prvAddNewTaskToReadyList+0xcc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <prvAddNewTaskToReadyList+0xc8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d802      	bhi.n	80027ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <prvAddNewTaskToReadyList+0xc8>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <prvAddNewTaskToReadyList+0xd0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <prvAddNewTaskToReadyList+0xd0>)
 80027d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <prvAddNewTaskToReadyList+0xd0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <prvAddNewTaskToReadyList+0xd4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d903      	bls.n	80027f4 <prvAddNewTaskToReadyList+0x74>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <prvAddNewTaskToReadyList+0xd4>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4a15      	ldr	r2, [pc, #84]	@ (8002858 <prvAddNewTaskToReadyList+0xd8>)
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7ff f901 	bl	8001a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002810:	f001 fb24 	bl	8003e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <prvAddNewTaskToReadyList+0xcc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <prvAddNewTaskToReadyList+0xc8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	429a      	cmp	r2, r3
 8002828:	d207      	bcs.n	800283a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800282a:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <prvAddNewTaskToReadyList+0xdc>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000c0c 	.word	0x20000c0c
 8002848:	20000738 	.word	0x20000738
 800284c:	20000c18 	.word	0x20000c18
 8002850:	20000c28 	.word	0x20000c28
 8002854:	20000c14 	.word	0x20000c14
 8002858:	2000073c 	.word	0x2000073c
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002868:	f001 fac6 	bl	8003df8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <vTaskDelete+0x18>
 8002872:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <vTaskDelete+0xc8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e000      	b.n	800287a <vTaskDelete+0x1a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f923 	bl	8001acc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3318      	adds	r3, #24
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f91a 	bl	8001acc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <vTaskDelete+0xcc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a23      	ldr	r2, [pc, #140]	@ (800292c <vTaskDelete+0xcc>)
 80028a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80028a2:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <vTaskDelete+0xc8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d10b      	bne.n	80028c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	481f      	ldr	r0, [pc, #124]	@ (8002930 <vTaskDelete+0xd0>)
 80028b4:	f7ff f8ad 	bl	8001a12 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80028b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <vTaskDelete+0xd4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <vTaskDelete+0xd4>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e009      	b.n	80028d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <vTaskDelete+0xd8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <vTaskDelete+0xd8>)
 80028cc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fcd6 	bl	8003280 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80028d4:	f000 fd04 	bl	80032e0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80028d8:	f001 fac0 	bl	8003e5c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80028dc:	4b17      	ldr	r3, [pc, #92]	@ (800293c <vTaskDelete+0xdc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01c      	beq.n	800291e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <vTaskDelete+0xc8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d117      	bne.n	800291e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <vTaskDelete+0xe0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <vTaskDelete+0xae>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60bb      	str	r3, [r7, #8]
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <vTaskDelete+0xe4>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000738 	.word	0x20000738
 800292c:	20000c28 	.word	0x20000c28
 8002930:	20000be0 	.word	0x20000be0
 8002934:	20000bf4 	.word	0x20000bf4
 8002938:	20000c0c 	.word	0x20000c0c
 800293c:	20000c18 	.word	0x20000c18
 8002940:	20000c34 	.word	0x20000c34
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800295a:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <vTaskDelay+0x64>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <vTaskDelay+0x32>
	__asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	60bb      	str	r3, [r7, #8]
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800297a:	f000 f8eb 	bl	8002b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800297e:	2100      	movs	r1, #0
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fd5b 	bl	800343c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002986:	f000 f8f3 	bl	8002b70 <xTaskResumeAll>
 800298a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <vTaskDelay+0x68>)
 8002994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000c34 	.word	0x20000c34
 80029b0:	e000ed04 	.word	0xe000ed04

080029b4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10b      	bne.n	80029de <eTaskGetState+0x2a>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	60bb      	str	r3, [r7, #8]
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	e7fd      	b.n	80029da <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <eTaskGetState+0xbc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d102      	bne.n	80029ee <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80029e8:	2300      	movs	r3, #0
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e03a      	b.n	8002a64 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80029ee:	f001 fa03 	bl	8003df8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <eTaskGetState+0xc0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <eTaskGetState+0xc4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002a04:	f001 fa2a 	bl	8003e5c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d003      	beq.n	8002a18 <eTaskGetState+0x64>
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d102      	bne.n	8002a1e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e022      	b.n	8002a64 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <eTaskGetState+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d112      	bne.n	8002a4c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e011      	b.n	8002a64 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8002a40:	2303      	movs	r3, #3
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e00e      	b.n	8002a64 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8002a46:	2302      	movs	r3, #2
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e00b      	b.n	8002a64 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <eTaskGetState+0xcc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d002      	beq.n	8002a5a <eTaskGetState+0xa6>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	77fb      	strb	r3, [r7, #31]
 8002a5e:	e001      	b.n	8002a64 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002a60:	2301      	movs	r3, #1
 8002a62:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000738 	.word	0x20000738
 8002a74:	20000bc4 	.word	0x20000bc4
 8002a78:	20000bc8 	.word	0x20000bc8
 8002a7c:	20000bf8 	.word	0x20000bf8
 8002a80:	20000be0 	.word	0x20000be0

08002a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a92:	463a      	mov	r2, r7
 8002a94:	1d39      	adds	r1, r7, #4
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe ff58 	bl	8001950 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	4922      	ldr	r1, [pc, #136]	@ (8002b3c <vTaskStartScheduler+0xb8>)
 8002ab4:	4822      	ldr	r0, [pc, #136]	@ (8002b40 <vTaskStartScheduler+0xbc>)
 8002ab6:	f7ff fd2d 	bl	8002514 <xTaskCreateStatic>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <vTaskStartScheduler+0xc0>)
 8002abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <vTaskStartScheduler+0xc0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e001      	b.n	8002ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ad8:	f000 fd04 	bl	80034e4 <xTimerCreateTimerTask>
 8002adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d116      	bne.n	8002b12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	613b      	str	r3, [r7, #16]
}
 8002af6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <vTaskStartScheduler+0xc4>)
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
 8002afe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <vTaskStartScheduler+0xc8>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b06:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <vTaskStartScheduler+0xcc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b0c:	f001 f8d0 	bl	8003cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b10:	e00f      	b.n	8002b32 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d10b      	bne.n	8002b32 <vTaskStartScheduler+0xae>
	__asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	60fb      	str	r3, [r7, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <vTaskStartScheduler+0xaa>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080044c0 	.word	0x080044c0
 8002b40:	08003175 	.word	0x08003175
 8002b44:	20000c30 	.word	0x20000c30
 8002b48:	20000c2c 	.word	0x20000c2c
 8002b4c:	20000c18 	.word	0x20000c18
 8002b50:	20000c10 	.word	0x20000c10

08002b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <vTaskSuspendAll+0x18>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a03      	ldr	r2, [pc, #12]	@ (8002b6c <vTaskSuspendAll+0x18>)
 8002b60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000c34 	.word	0x20000c34

08002b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <xTaskResumeAll+0x118>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <xTaskResumeAll+0x2e>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	603b      	str	r3, [r7, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b9e:	f001 f92b 	bl	8003df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ba2:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <xTaskResumeAll+0x118>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a37      	ldr	r2, [pc, #220]	@ (8002c88 <xTaskResumeAll+0x118>)
 8002baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bac:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <xTaskResumeAll+0x118>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d162      	bne.n	8002c7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bb4:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <xTaskResumeAll+0x11c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05e      	beq.n	8002c7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbc:	e02f      	b.n	8002c1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbe:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <xTaskResumeAll+0x120>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe ff7e 	bl	8001acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ff79 	bl	8001acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bde:	4b2d      	ldr	r3, [pc, #180]	@ (8002c94 <xTaskResumeAll+0x124>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d903      	bls.n	8002bee <xTaskResumeAll+0x7e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	4a2a      	ldr	r2, [pc, #168]	@ (8002c94 <xTaskResumeAll+0x124>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <xTaskResumeAll+0x128>)
 8002bfc:	441a      	add	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe ff04 	bl	8001a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0e:	4b23      	ldr	r3, [pc, #140]	@ (8002c9c <xTaskResumeAll+0x12c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <xTaskResumeAll+0x130>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <xTaskResumeAll+0x120>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1cb      	bne.n	8002bbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c2c:	f000 fb58 	bl	80032e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <xTaskResumeAll+0x134>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c3c:	f000 f846 	bl	8002ccc <xTaskIncrementTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002c46:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <xTaskResumeAll+0x130>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f1      	bne.n	8002c3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <xTaskResumeAll+0x134>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <xTaskResumeAll+0x130>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <xTaskResumeAll+0x138>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c7a:	f001 f8ef 	bl	8003e5c <vPortExitCritical>

	return xAlreadyYielded;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000c34 	.word	0x20000c34
 8002c8c:	20000c0c 	.word	0x20000c0c
 8002c90:	20000bcc 	.word	0x20000bcc
 8002c94:	20000c14 	.word	0x20000c14
 8002c98:	2000073c 	.word	0x2000073c
 8002c9c:	20000738 	.word	0x20000738
 8002ca0:	20000c20 	.word	0x20000c20
 8002ca4:	20000c1c 	.word	0x20000c1c
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cb2:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <xTaskGetTickCount+0x1c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cb8:	687b      	ldr	r3, [r7, #4]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000c10 	.word	0x20000c10

08002ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e14 <xTaskIncrementTick+0x148>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 8090 	bne.w	8002e00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <xTaskIncrementTick+0x14c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e18 <xTaskIncrementTick+0x14c>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d121      	bne.n	8002d38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cf4:	4b49      	ldr	r3, [pc, #292]	@ (8002e1c <xTaskIncrementTick+0x150>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	603b      	str	r3, [r7, #0]
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <xTaskIncrementTick+0x46>
 8002d16:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <xTaskIncrementTick+0x150>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <xTaskIncrementTick+0x154>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3e      	ldr	r2, [pc, #248]	@ (8002e1c <xTaskIncrementTick+0x150>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4a3e      	ldr	r2, [pc, #248]	@ (8002e20 <xTaskIncrementTick+0x154>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e24 <xTaskIncrementTick+0x158>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a3c      	ldr	r2, [pc, #240]	@ (8002e24 <xTaskIncrementTick+0x158>)
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	f000 fad4 	bl	80032e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <xTaskIncrementTick+0x15c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d349      	bcc.n	8002dd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d42:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <xTaskIncrementTick+0x150>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <xTaskIncrementTick+0x15c>)
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	601a      	str	r2, [r3, #0]
					break;
 8002d54:	e03f      	b.n	8002dd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <xTaskIncrementTick+0x150>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d203      	bcs.n	8002d76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <xTaskIncrementTick+0x15c>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d74:	e02f      	b.n	8002dd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fea6 	bl	8001acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3318      	adds	r3, #24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fe9d 	bl	8001acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d96:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <xTaskIncrementTick+0x160>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d903      	bls.n	8002da6 <xTaskIncrementTick+0xda>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	4a22      	ldr	r2, [pc, #136]	@ (8002e2c <xTaskIncrementTick+0x160>)
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <xTaskIncrementTick+0x164>)
 8002db4:	441a      	add	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe fe28 	bl	8001a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <xTaskIncrementTick+0x168>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3b8      	bcc.n	8002d42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd4:	e7b5      	b.n	8002d42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dd6:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <xTaskIncrementTick+0x168>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	4914      	ldr	r1, [pc, #80]	@ (8002e30 <xTaskIncrementTick+0x164>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d901      	bls.n	8002df2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002dee:	2301      	movs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <xTaskIncrementTick+0x16c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e004      	b.n	8002e0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <xTaskIncrementTick+0x170>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <xTaskIncrementTick+0x170>)
 8002e08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e0a:	697b      	ldr	r3, [r7, #20]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000c34 	.word	0x20000c34
 8002e18:	20000c10 	.word	0x20000c10
 8002e1c:	20000bc4 	.word	0x20000bc4
 8002e20:	20000bc8 	.word	0x20000bc8
 8002e24:	20000c24 	.word	0x20000c24
 8002e28:	20000c2c 	.word	0x20000c2c
 8002e2c:	20000c14 	.word	0x20000c14
 8002e30:	2000073c 	.word	0x2000073c
 8002e34:	20000738 	.word	0x20000738
 8002e38:	20000c20 	.word	0x20000c20
 8002e3c:	20000c1c 	.word	0x20000c1c

08002e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e46:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <vTaskSwitchContext+0xa8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e4e:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <vTaskSwitchContext+0xac>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e54:	e042      	b.n	8002edc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <vTaskSwitchContext+0xac>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <vTaskSwitchContext+0xb0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e011      	b.n	8002e88 <vTaskSwitchContext+0x48>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <vTaskSwitchContext+0x42>
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	607b      	str	r3, [r7, #4]
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	e7fd      	b.n	8002e7e <vTaskSwitchContext+0x3e>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	491a      	ldr	r1, [pc, #104]	@ (8002ef4 <vTaskSwitchContext+0xb4>)
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0e3      	beq.n	8002e64 <vTaskSwitchContext+0x24>
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4a13      	ldr	r2, [pc, #76]	@ (8002ef4 <vTaskSwitchContext+0xb4>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d104      	bne.n	8002ecc <vTaskSwitchContext+0x8c>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <vTaskSwitchContext+0xb8>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4a06      	ldr	r2, [pc, #24]	@ (8002ef0 <vTaskSwitchContext+0xb0>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20000c34 	.word	0x20000c34
 8002eec:	20000c20 	.word	0x20000c20
 8002ef0:	20000c14 	.word	0x20000c14
 8002ef4:	2000073c 	.word	0x2000073c
 8002ef8:	20000738 	.word	0x20000738

08002efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	60fb      	str	r3, [r7, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <vTaskPlaceOnEventList+0x48>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3318      	adds	r3, #24
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fd94 	bl	8001a5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f32:	2101      	movs	r1, #1
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f000 fa81 	bl	800343c <prvAddCurrentTaskToDelayedList>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000738 	.word	0x20000738

08002f48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	617b      	str	r3, [r7, #20]
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	e7fd      	b.n	8002f6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f72:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <vTaskPlaceOnEventListRestricted+0x54>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3318      	adds	r3, #24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7fe fd49 	bl	8001a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f000 fa54 	bl	800343c <prvAddCurrentTaskToDelayedList>
	}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000738 	.word	0x20000738

08002fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60fb      	str	r3, [r7, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	e7fd      	b.n	8002fca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fd7a 	bl	8001acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <xTaskRemoveFromEventList+0xb0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11d      	bne.n	800301c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fd71 	bl	8001acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fee:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <xTaskRemoveFromEventList+0xb4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d903      	bls.n	8002ffe <xTaskRemoveFromEventList+0x5e>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <xTaskRemoveFromEventList+0xb4>)
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <xTaskRemoveFromEventList+0xb8>)
 800300c:	441a      	add	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3304      	adds	r3, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7fe fcfc 	bl	8001a12 <vListInsertEnd>
 800301a:	e005      	b.n	8003028 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3318      	adds	r3, #24
 8003020:	4619      	mov	r1, r3
 8003022:	480e      	ldr	r0, [pc, #56]	@ (800305c <xTaskRemoveFromEventList+0xbc>)
 8003024:	f7fe fcf5 	bl	8001a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <xTaskRemoveFromEventList+0xc0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d905      	bls.n	8003042 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003036:	2301      	movs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <xTaskRemoveFromEventList+0xc4>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e001      	b.n	8003046 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003046:	697b      	ldr	r3, [r7, #20]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000c34 	.word	0x20000c34
 8003054:	20000c14 	.word	0x20000c14
 8003058:	2000073c 	.word	0x2000073c
 800305c:	20000bcc 	.word	0x20000bcc
 8003060:	20000738 	.word	0x20000738
 8003064:	20000c20 	.word	0x20000c20

08003068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <vTaskInternalSetTimeOutState+0x24>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <vTaskInternalSetTimeOutState+0x28>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000c24 	.word	0x20000c24
 8003090:	20000c10 	.word	0x20000c10

08003094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	613b      	str	r3, [r7, #16]
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	60fb      	str	r3, [r7, #12]
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80030da:	f000 fe8d 	bl	8003df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030de:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <xTaskCheckForTimeOut+0xc0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d102      	bne.n	80030fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e023      	b.n	8003146 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <xTaskCheckForTimeOut+0xc4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d007      	beq.n	800311a <xTaskCheckForTimeOut+0x86>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e015      	b.n	8003146 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d20b      	bcs.n	800313c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad2      	subs	r2, r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff99 	bl	8003068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e004      	b.n	8003146 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f000 fe89 	bl	8003e5c <vPortExitCritical>

	return xReturn;
 800314a:	69fb      	ldr	r3, [r7, #28]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000c10 	.word	0x20000c10
 8003158:	20000c24 	.word	0x20000c24

0800315c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <vTaskMissedYield+0x14>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20000c20 	.word	0x20000c20

08003174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800317c:	f000 f852 	bl	8003224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <prvIdleTask+0x28>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d9f9      	bls.n	800317c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <prvIdleTask+0x2c>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003198:	e7f0      	b.n	800317c <prvIdleTask+0x8>
 800319a:	bf00      	nop
 800319c:	2000073c 	.word	0x2000073c
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e00c      	b.n	80031ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4a12      	ldr	r2, [pc, #72]	@ (8003204 <prvInitialiseTaskLists+0x60>)
 80031bc:	4413      	add	r3, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fbfa 	bl	80019b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b37      	cmp	r3, #55	@ 0x37
 80031ce:	d9ef      	bls.n	80031b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031d0:	480d      	ldr	r0, [pc, #52]	@ (8003208 <prvInitialiseTaskLists+0x64>)
 80031d2:	f7fe fbf1 	bl	80019b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031d6:	480d      	ldr	r0, [pc, #52]	@ (800320c <prvInitialiseTaskLists+0x68>)
 80031d8:	f7fe fbee 	bl	80019b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031dc:	480c      	ldr	r0, [pc, #48]	@ (8003210 <prvInitialiseTaskLists+0x6c>)
 80031de:	f7fe fbeb 	bl	80019b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031e2:	480c      	ldr	r0, [pc, #48]	@ (8003214 <prvInitialiseTaskLists+0x70>)
 80031e4:	f7fe fbe8 	bl	80019b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031e8:	480b      	ldr	r0, [pc, #44]	@ (8003218 <prvInitialiseTaskLists+0x74>)
 80031ea:	f7fe fbe5 	bl	80019b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <prvInitialiseTaskLists+0x78>)
 80031f0:	4a05      	ldr	r2, [pc, #20]	@ (8003208 <prvInitialiseTaskLists+0x64>)
 80031f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <prvInitialiseTaskLists+0x7c>)
 80031f6:	4a05      	ldr	r2, [pc, #20]	@ (800320c <prvInitialiseTaskLists+0x68>)
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000073c 	.word	0x2000073c
 8003208:	20000b9c 	.word	0x20000b9c
 800320c:	20000bb0 	.word	0x20000bb0
 8003210:	20000bcc 	.word	0x20000bcc
 8003214:	20000be0 	.word	0x20000be0
 8003218:	20000bf8 	.word	0x20000bf8
 800321c:	20000bc4 	.word	0x20000bc4
 8003220:	20000bc8 	.word	0x20000bc8

08003224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800322a:	e019      	b.n	8003260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800322c:	f000 fde4 	bl	8003df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003230:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <prvCheckTasksWaitingTermination+0x50>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fc45 	bl	8001acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <prvCheckTasksWaitingTermination+0x54>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	4a0b      	ldr	r2, [pc, #44]	@ (8003278 <prvCheckTasksWaitingTermination+0x54>)
 800324a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <prvCheckTasksWaitingTermination+0x58>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3b01      	subs	r3, #1
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <prvCheckTasksWaitingTermination+0x58>)
 8003254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003256:	f000 fe01 	bl	8003e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f810 	bl	8003280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <prvCheckTasksWaitingTermination+0x58>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e1      	bne.n	800322c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000be0 	.word	0x20000be0
 8003278:	20000c0c 	.word	0x20000c0c
 800327c:	20000bf4 	.word	0x20000bf4

08003280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4618      	mov	r0, r3
 8003298:	f000 ff9e 	bl	80041d8 <vPortFree>
				vPortFree( pxTCB );
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff9b 	bl	80041d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032a2:	e019      	b.n	80032d8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d103      	bne.n	80032b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 ff92 	bl	80041d8 <vPortFree>
	}
 80032b4:	e010      	b.n	80032d8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d00b      	beq.n	80032d8 <prvDeleteTCB+0x58>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <prvDeleteTCB+0x54>
	}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <prvResetNextTaskUnblockTime+0x38>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <prvResetNextTaskUnblockTime+0x3c>)
 80032f2:	f04f 32ff 	mov.w	r2, #4294967295
 80032f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032f8:	e008      	b.n	800330c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <prvResetNextTaskUnblockTime+0x38>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a04      	ldr	r2, [pc, #16]	@ (800331c <prvResetNextTaskUnblockTime+0x3c>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000bc4 	.word	0x20000bc4
 800331c:	20000c2c 	.word	0x20000c2c

08003320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <xTaskGetSchedulerState+0x34>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800332e:	2301      	movs	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	e008      	b.n	8003346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <xTaskGetSchedulerState+0x38>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800333c:	2302      	movs	r3, #2
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e001      	b.n	8003346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003346:	687b      	ldr	r3, [r7, #4]
	}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	20000c18 	.word	0x20000c18
 8003358:	20000c34 	.word	0x20000c34

0800335c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d058      	beq.n	8003424 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003372:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <xTaskPriorityDisinherit+0xd4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d00b      	beq.n	8003394 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	60fb      	str	r3, [r7, #12]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	60bb      	str	r3, [r7, #8]
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d02c      	beq.n	8003424 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d128      	bne.n	8003424 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fb78 	bl	8001acc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <xTaskPriorityDisinherit+0xd8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d903      	bls.n	8003404 <xTaskPriorityDisinherit+0xa8>
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <xTaskPriorityDisinherit+0xd8>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4a09      	ldr	r2, [pc, #36]	@ (8003438 <xTaskPriorityDisinherit+0xdc>)
 8003412:	441a      	add	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7fe faf9 	bl	8001a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003424:	697b      	ldr	r3, [r7, #20]
	}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000738 	.word	0x20000738
 8003434:	20000c14 	.word	0x20000c14
 8003438:	2000073c 	.word	0x2000073c

0800343c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <prvAddCurrentTaskToDelayedList+0x90>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800344c:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fb3a 	bl	8001acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d10a      	bne.n	8003476 <prvAddCurrentTaskToDelayedList+0x3a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003466:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4819      	ldr	r0, [pc, #100]	@ (80034d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003470:	f7fe facf 	bl	8001a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003474:	e026      	b.n	80034c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	429a      	cmp	r2, r3
 800348c:	d209      	bcs.n	80034a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f7fe fadd 	bl	8001a5a <vListInsert>
}
 80034a0:	e010      	b.n	80034c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a2:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fad3 	bl	8001a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d202      	bcs.n	80034c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034be:	4a08      	ldr	r2, [pc, #32]	@ (80034e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000c10 	.word	0x20000c10
 80034d0:	20000738 	.word	0x20000738
 80034d4:	20000bf8 	.word	0x20000bf8
 80034d8:	20000bc8 	.word	0x20000bc8
 80034dc:	20000bc4 	.word	0x20000bc4
 80034e0:	20000c2c 	.word	0x20000c2c

080034e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034ee:	f000 fb13 	bl	8003b18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <xTimerCreateTimerTask+0x84>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d021      	beq.n	800353e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003502:	1d3a      	adds	r2, r7, #4
 8003504:	f107 0108 	add.w	r1, r7, #8
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fa39 	bl	8001984 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	9202      	str	r2, [sp, #8]
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	2302      	movs	r3, #2
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	460a      	mov	r2, r1
 8003524:	4911      	ldr	r1, [pc, #68]	@ (800356c <xTimerCreateTimerTask+0x88>)
 8003526:	4812      	ldr	r0, [pc, #72]	@ (8003570 <xTimerCreateTimerTask+0x8c>)
 8003528:	f7fe fff4 	bl	8002514 <xTaskCreateStatic>
 800352c:	4603      	mov	r3, r0
 800352e:	4a11      	ldr	r2, [pc, #68]	@ (8003574 <xTimerCreateTimerTask+0x90>)
 8003530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <xTimerCreateTimerTask+0x90>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800353a:	2301      	movs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	613b      	str	r3, [r7, #16]
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800355c:	697b      	ldr	r3, [r7, #20]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000c68 	.word	0x20000c68
 800356c:	080044c8 	.word	0x080044c8
 8003570:	080036b1 	.word	0x080036b1
 8003574:	20000c6c 	.word	0x20000c6c

08003578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <xTimerGenericCommand+0x98>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02a      	beq.n	8003606 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	dc18      	bgt.n	80035f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035c2:	f7ff fead 	bl	8003320 <xTaskGetSchedulerState>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d109      	bne.n	80035e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035cc:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <xTimerGenericCommand+0x98>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	f107 0110 	add.w	r1, r7, #16
 80035d4:	2300      	movs	r3, #0
 80035d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d8:	f7fe fbac 	bl	8001d34 <xQueueGenericSend>
 80035dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80035de:	e012      	b.n	8003606 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <xTimerGenericCommand+0x98>)
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	f107 0110 	add.w	r1, r7, #16
 80035e8:	2300      	movs	r3, #0
 80035ea:	2200      	movs	r2, #0
 80035ec:	f7fe fba2 	bl	8001d34 <xQueueGenericSend>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80035f2:	e008      	b.n	8003606 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <xTimerGenericCommand+0x98>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	f107 0110 	add.w	r1, r7, #16
 80035fc:	2300      	movs	r3, #0
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	f7fe fc9a 	bl	8001f38 <xQueueGenericSendFromISR>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	@ 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000c68 	.word	0x20000c68

08003614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <prvProcessExpiredTimer+0x98>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3304      	adds	r3, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fa4d 	bl	8001acc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d023      	beq.n	8003688 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	18d1      	adds	r1, r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f000 f8d5 	bl	80037fc <prvInsertTimerInActiveList>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	2100      	movs	r1, #0
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff88 	bl	8003578 <xTimerGenericCommand>
 8003668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d114      	bne.n	800369a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	4798      	blx	r3
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000c60 	.word	0x20000c60

080036b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f859 	bl	8003774 <prvGetNextExpireTime>
 80036c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4619      	mov	r1, r3
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f805 	bl	80036d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036ce:	f000 f8d7 	bl	8003880 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d2:	bf00      	nop
 80036d4:	e7f0      	b.n	80036b8 <prvTimerTask+0x8>
	...

080036d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036e2:	f7ff fa37 	bl	8002b54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f866 	bl	80037bc <prvSampleTimeNow>
 80036f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d130      	bne.n	800375a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <prvProcessTimerOrBlockTask+0x3c>
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	429a      	cmp	r2, r3
 8003704:	d806      	bhi.n	8003714 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003706:	f7ff fa33 	bl	8002b70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800370a:	68f9      	ldr	r1, [r7, #12]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff81 	bl	8003614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003712:	e024      	b.n	800375e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800371a:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <prvProcessTimerOrBlockTask+0x90>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <prvProcessTimerOrBlockTask+0x50>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <prvProcessTimerOrBlockTask+0x52>
 8003728:	2300      	movs	r3, #0
 800372a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800372c:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <prvProcessTimerOrBlockTask+0x94>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	f7fe feb7 	bl	80024ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800373e:	f7ff fa17 	bl	8002b70 <xTaskResumeAll>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <prvProcessTimerOrBlockTask+0x98>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
}
 8003758:	e001      	b.n	800375e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800375a:	f7ff fa09 	bl	8002b70 <xTaskResumeAll>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000c64 	.word	0x20000c64
 800376c:	20000c68 	.word	0x20000c68
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800377c:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <prvGetNextExpireTime+0x44>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <prvGetNextExpireTime+0x16>
 8003786:	2201      	movs	r2, #1
 8003788:	e000      	b.n	800378c <prvGetNextExpireTime+0x18>
 800378a:	2200      	movs	r2, #0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <prvGetNextExpireTime+0x44>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e001      	b.n	80037a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000c60 	.word	0x20000c60

080037bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037c4:	f7ff fa72 	bl	8002cac <xTaskGetTickCount>
 80037c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037ca:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <prvSampleTimeNow+0x3c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d205      	bcs.n	80037e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037d4:	f000 f93a 	bl	8003a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037e6:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <prvSampleTimeNow+0x3c>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037ec:	68fb      	ldr	r3, [r7, #12]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000c70 	.word	0x20000c70

080037fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d812      	bhi.n	8003848 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e01b      	b.n	800386e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <prvInsertTimerInActiveList+0x7c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fe f90a 	bl	8001a5a <vListInsert>
 8003846:	e012      	b.n	800386e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d206      	bcs.n	800385e <prvInsertTimerInActiveList+0x62>
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e007      	b.n	800386e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <prvInsertTimerInActiveList+0x80>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7fe f8f6 	bl	8001a5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000c64 	.word	0x20000c64
 800387c:	20000c60 	.word	0x20000c60

08003880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	@ 0x38
 8003884:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003886:	e0ce      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da19      	bge.n	80038c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	3304      	adds	r3, #4
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	61fb      	str	r3, [r7, #28]
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b8:	6850      	ldr	r0, [r2, #4]
 80038ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	4611      	mov	r1, r2
 80038c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f2c0 80ae 	blt.w	8003a26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe f8f6 	bl	8001acc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038e0:	463b      	mov	r3, r7
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff6a 	bl	80037bc <prvSampleTimeNow>
 80038e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	f200 8097 	bhi.w	8003a20 <prvProcessReceivedCommands+0x1a0>
 80038f2:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <prvProcessReceivedCommands+0x78>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003921 	.word	0x08003921
 8003904:	08003997 	.word	0x08003997
 8003908:	080039ab 	.word	0x080039ab
 800390c:	080039f7 	.word	0x080039f7
 8003910:	08003921 	.word	0x08003921
 8003914:	08003921 	.word	0x08003921
 8003918:	08003997 	.word	0x08003997
 800391c:	080039ab 	.word	0x080039ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	18d1      	adds	r1, r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003940:	f7ff ff5c 	bl	80037fc <prvInsertTimerInActiveList>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d06c      	beq.n	8003a24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003950:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d061      	beq.n	8003a24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	441a      	add	r2, r3
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	2100      	movs	r1, #0
 8003970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003972:	f7ff fe01 	bl	8003578 <xTimerGenericCommand>
 8003976:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d152      	bne.n	8003a24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	61bb      	str	r3, [r7, #24]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80039a8:	e03d      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	617b      	str	r3, [r7, #20]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	18d1      	adds	r1, r2, r3
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039f0:	f7ff ff04 	bl	80037fc <prvInsertTimerInActiveList>
					break;
 80039f4:	e017      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a06:	f000 fbe7 	bl	80041d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a0a:	e00c      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003a1e:	e002      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <prvProcessReceivedCommands+0x1a6>
					break;
 8003a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <prvProcessReceivedCommands+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1d39      	adds	r1, r7, #4
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fb20 	bl	8002074 <xQueueReceive>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f47f af26 	bne.w	8003888 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3730      	adds	r7, #48	@ 0x30
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000c68 	.word	0x20000c68

08003a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a52:	e049      	b.n	8003ae8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a54:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f82d 	bl	8001acc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02f      	beq.n	8003ae8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d90e      	bls.n	8003ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fd ffd2 	bl	8001a5a <vListInsert>
 8003ab6:	e017      	b.n	8003ae8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fd58 	bl	8003578 <xTimerGenericCommand>
 8003ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	603b      	str	r3, [r7, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ae8:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1b0      	bne.n	8003a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003af2:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <prvSwitchTimerLists+0xc8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <prvSwitchTimerLists+0xc4>)
 8003afe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b00:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <prvSwitchTimerLists+0xc8>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000c60 	.word	0x20000c60
 8003b14:	20000c64 	.word	0x20000c64

08003b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b1e:	f000 f96b 	bl	8003df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <prvCheckForValidListAndQueue+0x60>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d120      	bne.n	8003b6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b2a:	4814      	ldr	r0, [pc, #80]	@ (8003b7c <prvCheckForValidListAndQueue+0x64>)
 8003b2c:	f7fd ff44 	bl	80019b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b30:	4813      	ldr	r0, [pc, #76]	@ (8003b80 <prvCheckForValidListAndQueue+0x68>)
 8003b32:	f7fd ff41 	bl	80019b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <prvCheckForValidListAndQueue+0x6c>)
 8003b38:	4a10      	ldr	r2, [pc, #64]	@ (8003b7c <prvCheckForValidListAndQueue+0x64>)
 8003b3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <prvCheckForValidListAndQueue+0x70>)
 8003b3e:	4a10      	ldr	r2, [pc, #64]	@ (8003b80 <prvCheckForValidListAndQueue+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b42:	2300      	movs	r3, #0
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <prvCheckForValidListAndQueue+0x74>)
 8003b48:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <prvCheckForValidListAndQueue+0x78>)
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	200a      	movs	r0, #10
 8003b4e:	f7fe f851 	bl	8001bf4 <xQueueGenericCreateStatic>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4a08      	ldr	r2, [pc, #32]	@ (8003b78 <prvCheckForValidListAndQueue+0x60>)
 8003b56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b58:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <prvCheckForValidListAndQueue+0x60>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <prvCheckForValidListAndQueue+0x60>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	490b      	ldr	r1, [pc, #44]	@ (8003b94 <prvCheckForValidListAndQueue+0x7c>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fc76 	bl	8002458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b6c:	f000 f976 	bl	8003e5c <vPortExitCritical>
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000c68 	.word	0x20000c68
 8003b7c:	20000c38 	.word	0x20000c38
 8003b80:	20000c4c 	.word	0x20000c4c
 8003b84:	20000c60 	.word	0x20000c60
 8003b88:	20000c64 	.word	0x20000c64
 8003b8c:	20000d14 	.word	0x20000d14
 8003b90:	20000c74 	.word	0x20000c74
 8003b94:	080044d0 	.word	0x080044d0

08003b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b04      	subs	r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b04      	subs	r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bfc <pxPortInitialiseStack+0x64>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b14      	subs	r3, #20
 8003bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f06f 0202 	mvn.w	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3b20      	subs	r3, #32
 8003bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	08003c01 	.word	0x08003c01

08003c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <prvTaskExitError+0x58>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d00b      	beq.n	8003c2c <prvTaskExitError+0x2c>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <prvTaskExitError+0x28>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60bb      	str	r3, [r7, #8]
}
 8003c3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c40:	bf00      	nop
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0fc      	beq.n	8003c42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	00000000 	.word	0x00000000

08003c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <pxCurrentTCBConst2>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6a:	f380 8809 	msr	PSP, r0
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	4770      	bx	lr
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst2>:
 8003c80:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c88:	4808      	ldr	r0, [pc, #32]	@ (8003cac <prvPortStartFirstTask+0x24>)
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
 8003c8e:	f380 8808 	msr	MSP, r0
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8814 	msr	CONTROL, r0
 8003c9a:	b662      	cpsie	i
 8003c9c:	b661      	cpsie	f
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	df00      	svc	0
 8003ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003caa:	bf00      	nop
 8003cac:	e000ed08 	.word	0xe000ed08

08003cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cb6:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <xPortStartScheduler+0x124>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a47      	ldr	r2, [pc, #284]	@ (8003dd8 <xPortStartScheduler+0x128>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10b      	bne.n	8003cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <xPortStartScheduler+0x124>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ddc <xPortStartScheduler+0x12c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10b      	bne.n	8003cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	613b      	str	r3, [r7, #16]
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	e7fd      	b.n	8003cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <xPortStartScheduler+0x130>)
 8003cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	22ff      	movs	r2, #255	@ 0xff
 8003d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <xPortStartScheduler+0x134>)
 8003d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d22:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d28:	e009      	b.n	8003d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d0ef      	beq.n	8003d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00b      	beq.n	8003d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60bb      	str	r3, [r7, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d80:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <xPortStartScheduler+0x138>)
 8003d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <xPortStartScheduler+0x13c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <xPortStartScheduler+0x13c>)
 8003d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <xPortStartScheduler+0x13c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	@ (8003dec <xPortStartScheduler+0x13c>)
 8003d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003da4:	f000 f8da 	bl	8003f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <xPortStartScheduler+0x140>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003dae:	f000 f8f9 	bl	8003fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <xPortStartScheduler+0x144>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0f      	ldr	r2, [pc, #60]	@ (8003df4 <xPortStartScheduler+0x144>)
 8003db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dbe:	f7ff ff63 	bl	8003c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dc2:	f7ff f83d 	bl	8002e40 <vTaskSwitchContext>
	prvTaskExitError();
 8003dc6:	f7ff ff1b 	bl	8003c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	e000ed00 	.word	0xe000ed00
 8003dd8:	410fc271 	.word	0x410fc271
 8003ddc:	410fc270 	.word	0x410fc270
 8003de0:	e000e400 	.word	0xe000e400
 8003de4:	20000d64 	.word	0x20000d64
 8003de8:	20000d68 	.word	0x20000d68
 8003dec:	e000ed20 	.word	0xe000ed20
 8003df0:	2000000c 	.word	0x2000000c
 8003df4:	e000ef34 	.word	0xe000ef34

08003df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	607b      	str	r3, [r7, #4]
}
 8003e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <vPortEnterCritical+0x5c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a0e      	ldr	r2, [pc, #56]	@ (8003e54 <vPortEnterCritical+0x5c>)
 8003e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <vPortEnterCritical+0x5c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d110      	bne.n	8003e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e24:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <vPortEnterCritical+0x60>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	603b      	str	r3, [r7, #0]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <vPortEnterCritical+0x4a>
	}
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <vPortExitCritical+0x50>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <vPortExitCritical+0x26>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	607b      	str	r3, [r7, #4]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <vPortExitCritical+0x50>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <vPortExitCritical+0x50>)
 8003e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e8c:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <vPortExitCritical+0x50>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <vPortExitCritical+0x44>
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f383 8811 	msr	BASEPRI, r3
}
 8003e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	2000000c 	.word	0x2000000c

08003eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003eb0:	f3ef 8009 	mrs	r0, PSP
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <pxCurrentTCBConst>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f01e 0f10 	tst.w	lr, #16
 8003ec0:	bf08      	it	eq
 8003ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	6010      	str	r0, [r2, #0]
 8003ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003ed4:	f380 8811 	msr	BASEPRI, r0
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f7fe ffae 	bl	8002e40 <vTaskSwitchContext>
 8003ee4:	f04f 0000 	mov.w	r0, #0
 8003ee8:	f380 8811 	msr	BASEPRI, r0
 8003eec:	bc09      	pop	{r0, r3}
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6808      	ldr	r0, [r1, #0]
 8003ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef6:	f01e 0f10 	tst.w	lr, #16
 8003efa:	bf08      	it	eq
 8003efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f00:	f380 8809 	msr	PSP, r0
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	f3af 8000 	nop.w

08003f10 <pxCurrentTCBConst>:
 8003f10:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop

08003f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	607b      	str	r3, [r7, #4]
}
 8003f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f32:	f7fe fecb 	bl	8002ccc <xTaskIncrementTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <xPortSysTickHandler+0x40>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f383 8811 	msr	BASEPRI, r3
}
 8003f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <vPortSetupTimerInterrupt+0x34>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <vPortSetupTimerInterrupt+0x38>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <vPortSetupTimerInterrupt+0x3c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <vPortSetupTimerInterrupt+0x40>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <vPortSetupTimerInterrupt+0x44>)
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <vPortSetupTimerInterrupt+0x34>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010
 8003f94:	e000e018 	.word	0xe000e018
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	10624dd3 	.word	0x10624dd3
 8003fa0:	e000e014 	.word	0xe000e014

08003fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003fb4 <vPortEnableVFP+0x10>
 8003fa8:	6801      	ldr	r1, [r0, #0]
 8003faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fae:	6001      	str	r1, [r0, #0]
 8003fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fb2:	bf00      	nop
 8003fb4:	e000ed88 	.word	0xe000ed88

08003fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fbe:	f3ef 8305 	mrs	r3, IPSR
 8003fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	d915      	bls.n	8003ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fca:	4a18      	ldr	r2, [pc, #96]	@ (800402c <vPortValidateInterruptPriority+0x74>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fd4:	4b16      	ldr	r3, [pc, #88]	@ (8004030 <vPortValidateInterruptPriority+0x78>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	7afa      	ldrb	r2, [r7, #11]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20b      	bcs.n	8003ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8004034 <vPortValidateInterruptPriority+0x7c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <vPortValidateInterruptPriority+0x80>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d90b      	bls.n	800401e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	603b      	str	r3, [r7, #0]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <vPortValidateInterruptPriority+0x62>
	}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e3f0 	.word	0xe000e3f0
 8004030:	20000d64 	.word	0x20000d64
 8004034:	e000ed0c 	.word	0xe000ed0c
 8004038:	20000d68 	.word	0x20000d68

0800403c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004048:	f7fe fd84 	bl	8002b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800404c:	4b5c      	ldr	r3, [pc, #368]	@ (80041c0 <pvPortMalloc+0x184>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004054:	f000 f924 	bl	80042a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004058:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <pvPortMalloc+0x188>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 8095 	bne.w	8004190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01e      	beq.n	80040aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800406c:	2208      	movs	r2, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d015      	beq.n	80040aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	3308      	adds	r3, #8
 8004086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <pvPortMalloc+0x6e>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	617b      	str	r3, [r7, #20]
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	e7fd      	b.n	80040a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d06f      	beq.n	8004190 <pvPortMalloc+0x154>
 80040b0:	4b45      	ldr	r3, [pc, #276]	@ (80041c8 <pvPortMalloc+0x18c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d86a      	bhi.n	8004190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ba:	4b44      	ldr	r3, [pc, #272]	@ (80041cc <pvPortMalloc+0x190>)
 80040bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <pvPortMalloc+0x190>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c4:	e004      	b.n	80040d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d903      	bls.n	80040e2 <pvPortMalloc+0xa6>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f1      	bne.n	80040c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040e2:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <pvPortMalloc+0x184>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d051      	beq.n	8004190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	4413      	add	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1ad2      	subs	r2, r2, r3
 8004106:	2308      	movs	r3, #8
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	429a      	cmp	r2, r3
 800410c:	d920      	bls.n	8004150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <pvPortMalloc+0xfc>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800414a:	69b8      	ldr	r0, [r7, #24]
 800414c:	f000 f90a 	bl	8004364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004150:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <pvPortMalloc+0x18c>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	4a1b      	ldr	r2, [pc, #108]	@ (80041c8 <pvPortMalloc+0x18c>)
 800415c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800415e:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <pvPortMalloc+0x18c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <pvPortMalloc+0x194>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d203      	bcs.n	8004172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800416a:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <pvPortMalloc+0x18c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a18      	ldr	r2, [pc, #96]	@ (80041d0 <pvPortMalloc+0x194>)
 8004170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <pvPortMalloc+0x188>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	431a      	orrs	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004186:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <pvPortMalloc+0x198>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a11      	ldr	r2, [pc, #68]	@ (80041d4 <pvPortMalloc+0x198>)
 800418e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004190:	f7fe fcee 	bl	8002b70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <pvPortMalloc+0x17a>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60fb      	str	r3, [r7, #12]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <pvPortMalloc+0x176>
	return pvReturn;
 80041b6:	69fb      	ldr	r3, [r7, #28]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3728      	adds	r7, #40	@ 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20004974 	.word	0x20004974
 80041c4:	20004988 	.word	0x20004988
 80041c8:	20004978 	.word	0x20004978
 80041cc:	2000496c 	.word	0x2000496c
 80041d0:	2000497c 	.word	0x2000497c
 80041d4:	20004980 	.word	0x20004980

080041d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04f      	beq.n	800428a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041ea:	2308      	movs	r3, #8
 80041ec:	425b      	negs	r3, r3
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <vPortFree+0xbc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <vPortFree+0x46>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <vPortFree+0x66>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <vPortFree+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01e      	beq.n	800428a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11a      	bne.n	800428a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <vPortFree+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004264:	f7fe fc76 	bl	8002b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <vPortFree+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4413      	add	r3, r2
 8004272:	4a09      	ldr	r2, [pc, #36]	@ (8004298 <vPortFree+0xc0>)
 8004274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004276:	6938      	ldr	r0, [r7, #16]
 8004278:	f000 f874 	bl	8004364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <vPortFree+0xc4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a06      	ldr	r2, [pc, #24]	@ (800429c <vPortFree+0xc4>)
 8004284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004286:	f7fe fc73 	bl	8002b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20004988 	.word	0x20004988
 8004298:	20004978 	.word	0x20004978
 800429c:	20004984 	.word	0x20004984

080042a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80042aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042ac:	4b27      	ldr	r3, [pc, #156]	@ (800434c <prvHeapInit+0xac>)
 80042ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3307      	adds	r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <prvHeapInit+0xac>)
 80042d0:	4413      	add	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <prvHeapInit+0xb0>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042de:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <prvHeapInit+0xb0>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042ec:	2208      	movs	r2, #8
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <prvHeapInit+0xb4>)
 8004300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <prvHeapInit+0xb4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <prvHeapInit+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <prvHeapInit+0xb4>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <prvHeapInit+0xb8>)
 800432e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a09      	ldr	r2, [pc, #36]	@ (800435c <prvHeapInit+0xbc>)
 8004336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004338:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <prvHeapInit+0xc0>)
 800433a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800433e:	601a      	str	r2, [r3, #0]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20000d6c 	.word	0x20000d6c
 8004350:	2000496c 	.word	0x2000496c
 8004354:	20004974 	.word	0x20004974
 8004358:	2000497c 	.word	0x2000497c
 800435c:	20004978 	.word	0x20004978
 8004360:	20004988 	.word	0x20004988

08004364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800436c:	4b28      	ldr	r3, [pc, #160]	@ (8004410 <prvInsertBlockIntoFreeList+0xac>)
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e002      	b.n	8004378 <prvInsertBlockIntoFreeList+0x14>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d8f7      	bhi.n	8004372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d108      	bne.n	80043a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d118      	bne.n	80043ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <prvInsertBlockIntoFreeList+0xb0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d00d      	beq.n	80043e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e008      	b.n	80043f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <prvInsertBlockIntoFreeList+0xb0>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e003      	b.n	80043f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d002      	beq.n	8004402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	2000496c 	.word	0x2000496c
 8004414:	20004974 	.word	0x20004974

08004418 <memset>:
 8004418:	4402      	add	r2, r0
 800441a:	4603      	mov	r3, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	@ (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	@ (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	@ (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	@ (800446c <__libc_init_array+0x44>)
 800443c:	f000 f826 	bl	800448c <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	0800455c 	.word	0x0800455c
 8004464:	0800455c 	.word	0x0800455c
 8004468:	0800455c 	.word	0x0800455c
 800446c:	08004560 	.word	0x08004560

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004486:	4291      	cmp	r1, r2
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
