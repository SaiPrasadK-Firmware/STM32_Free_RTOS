
Blink LED_Fast_and_Slow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005164  08005164  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005164  08005164  00006164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800516c  0800516c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005170  08005170  00006170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005174  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  20000010  08005184  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049d4  08005184  000079d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e48  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285c  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af1  00000000  00000000  0001b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002646  00000000  00000000  0001c019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5df  00000000  00000000  0001e65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6aa  00000000  00000000  0002dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  000bc32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bfe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800508c 	.word	0x0800508c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800508c 	.word	0x0800508c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

/* Main function */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000510:	f000 fa76 	bl	8000a00 <HAL_Init>
    SystemClock_Config();
 8000514:	f000 f8b4 	bl	8000680 <SystemClock_Config>
    MX_GPIO_Init();
 8000518:	f000 f948 	bl	80007ac <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800051c:	f000 f91c 	bl	8000758 <MX_USART2_UART_Init>

    osKernelInitialize();
 8000520:	f001 fd0c 	bl	8001f3c <osKernelInitialize>

    Button_taskHandle = osThreadNew(Button_press, NULL, &Button_task_attributes);
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <main+0x50>)
 8000526:	2100      	movs	r1, #0
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <main+0x54>)
 800052a:	f001 fd66 	bl	8001ffa <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0c      	ldr	r2, [pc, #48]	@ (8000564 <main+0x58>)
 8000532:	6013      	str	r3, [r2, #0]
    LED_FastHandle = osThreadNew(Led_Fast, NULL, &LED_Fast_attributes);
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <main+0x60>)
 800053a:	f001 fd5e 	bl	8001ffa <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <main+0x64>)
 8000542:	6013      	str	r3, [r2, #0]
    LED_SlowHandle = osThreadNew(Led_Slow, NULL, &LED_Slow_attributes);
 8000544:	4a0b      	ldr	r2, [pc, #44]	@ (8000574 <main+0x68>)
 8000546:	2100      	movs	r1, #0
 8000548:	480b      	ldr	r0, [pc, #44]	@ (8000578 <main+0x6c>)
 800054a:	f001 fd56 	bl	8001ffa <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <main+0x70>)
 8000552:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000554:	f001 fd16 	bl	8001f84 <osKernelStart>

    while (1) {}
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x4c>
 800055c:	080050e0 	.word	0x080050e0
 8000560:	08000581 	.word	0x08000581
 8000564:	2000002c 	.word	0x2000002c
 8000568:	08005104 	.word	0x08005104
 800056c:	08000609 	.word	0x08000609
 8000570:	20000030 	.word	0x20000030
 8000574:	08005128 	.word	0x08005128
 8000578:	08000645 	.word	0x08000645
 800057c:	20000034 	.word	0x20000034

08000580 <Button_press>:
}

/* Button Task */
void Button_press(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    uint8_t press_count = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
    uint32_t last_tick = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]

    while (1)
    {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) // active low
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	4819      	ldr	r0, [pc, #100]	@ (80005fc <Button_press+0x7c>)
 8000596:	f000 fd0f 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d108      	bne.n	80005b2 <Button_press+0x32>
        {
            press_count++;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
            osDelay(200); // debounce delay
 80005a6:	20c8      	movs	r0, #200	@ 0xc8
 80005a8:	f001 fe89 	bl	80022be <osDelay>
            last_tick = osKernelGetTickCount(); // reset timeout on press
 80005ac:	f001 fd10 	bl	8001fd0 <osKernelGetTickCount>
 80005b0:	60b8      	str	r0, [r7, #8]
        }

        // If pressed and no new press in 500 ms
        if (press_count > 0 && (osKernelGetTickCount() - last_tick) > 500)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01c      	beq.n	80005f2 <Button_press+0x72>
 80005b8:	f001 fd0a 	bl	8001fd0 <osKernelGetTickCount>
 80005bc:	4602      	mov	r2, r0
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005c6:	d914      	bls.n	80005f2 <Button_press+0x72>
        {
            if (press_count == 1)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d106      	bne.n	80005dc <Button_press+0x5c>
            {
                osThreadFlagsSet(LED_FastHandle, BUTTON_FLAG_FAST);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <Button_press+0x80>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fda3 	bl	8002120 <osThreadFlagsSet>
 80005da:	e008      	b.n	80005ee <Button_press+0x6e>
            }
            else if (press_count == 2)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d105      	bne.n	80005ee <Button_press+0x6e>
            {
                osThreadFlagsSet(LED_SlowHandle, BUTTON_FLAG_SLOW);
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <Button_press+0x84>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd99 	bl	8002120 <osThreadFlagsSet>
            }

            press_count = 0; // reset
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
        }

        osDelay(10);
 80005f2:	200a      	movs	r0, #10
 80005f4:	f001 fe63 	bl	80022be <osDelay>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) // active low
 80005f8:	e7ca      	b.n	8000590 <Button_press+0x10>
 80005fa:	bf00      	nop
 80005fc:	40020800 	.word	0x40020800
 8000600:	20000030 	.word	0x20000030
 8000604:	20000034 	.word	0x20000034

08000608 <Led_Fast>:



/* LED Fast Task */
void Led_Fast(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        osThreadFlagsWait(BUTTON_FLAG_FAST, osFlagsWaitAny, osWaitForever);
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fdd0 	bl	80021bc <osThreadFlagsWait>

        for (int i = 0; i < 10; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e009      	b.n	8000636 <Led_Fast+0x2e>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000622:	2120      	movs	r1, #32
 8000624:	4806      	ldr	r0, [pc, #24]	@ (8000640 <Led_Fast+0x38>)
 8000626:	f000 fcdf 	bl	8000fe8 <HAL_GPIO_TogglePin>
            osDelay(250);
 800062a:	20fa      	movs	r0, #250	@ 0xfa
 800062c:	f001 fe47 	bl	80022be <osDelay>
        for (int i = 0; i < 10; i++)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b09      	cmp	r3, #9
 800063a:	ddf2      	ble.n	8000622 <Led_Fast+0x1a>
        osThreadFlagsWait(BUTTON_FLAG_FAST, osFlagsWaitAny, osWaitForever);
 800063c:	e7e8      	b.n	8000610 <Led_Fast+0x8>
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000

08000644 <Led_Slow>:
    }
}

/* LED Slow Task */
void Led_Slow(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        osThreadFlagsWait(BUTTON_FLAG_SLOW, osFlagsWaitAny, osWaitForever);
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	2100      	movs	r1, #0
 8000652:	2002      	movs	r0, #2
 8000654:	f001 fdb2 	bl	80021bc <osThreadFlagsWait>

        for (int i = 0; i < 10; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e00a      	b.n	8000674 <Led_Slow+0x30>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800065e:	2120      	movs	r1, #32
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <Led_Slow+0x38>)
 8000662:	f000 fcc1 	bl	8000fe8 <HAL_GPIO_TogglePin>
            osDelay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f001 fe28 	bl	80022be <osDelay>
        for (int i = 0; i < 10; i++)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b09      	cmp	r3, #9
 8000678:	ddf1      	ble.n	800065e <Led_Slow+0x1a>
        osThreadFlagsWait(BUTTON_FLAG_SLOW, osFlagsWaitAny, osWaitForever);
 800067a:	e7e7      	b.n	800064c <Led_Slow+0x8>
 800067c:	40020000 	.word	0x40020000

08000680 <SystemClock_Config>:
    }
}

/* System Clock Config */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fcc2 	bl	8005018 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemClock_Config+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <SystemClock_Config+0xd4>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 80006f4:	2310      	movs	r3, #16
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc86 	bl	800101c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8000716:	f000 f895 	bl	8000844 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fee8 	bl	800150c <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8000742:	f000 f87f 	bl	8000844 <Error_Handler>
    }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_USART2_UART_Init>:

/* USART2 Init */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f001 f8dc 	bl	800194c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800079a:	f000 f853 	bl	8000844 <Error_Handler>
    }
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000038 	.word	0x20000038
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:

/* GPIO Init */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

    /* Button */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0x90>)
 8000810:	f000 fa4e 	bl	8000cb0 <HAL_GPIO_Init>

    /* LED */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000814:	2320      	movs	r3, #32
 8000816:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x94>)
 800082c:	f000 fa40 	bl	8000cb0 <HAL_GPIO_Init>
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000

08000844 <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
    __disable_irq();
    while (1) {}
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 f9e2 	bl	8000c5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_UART_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000902:	230c      	movs	r3, #12
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000912:	2307      	movs	r3, #7
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <HAL_UART_MspInit+0x8c>)
 800091e:	f000 f9c7 	bl	8000cb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40004400 	.word	0x40004400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f000 f897 	bl	8000aa4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000976:	f003 f8db 	bl	8003b30 <xTaskGetSchedulerState>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d001      	beq.n	8000984 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000980:	f004 f8ca 	bl	8004b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 fb25 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fd95 	bl	800050c <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f0:	08005174 	.word	0x08005174
  ldr r2, =_sbss
 80009f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f8:	200049d4 	.word	0x200049d4

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f90d 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff ff0c 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f917 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f8ed 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000080 	.word	0x20000080

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000080 	.word	0x20000080

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff47 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5c 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e159      	b.n	8000f80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8148 	bne.w	8000f7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a2 	beq.w	8000f7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b57      	ldr	r3, [pc, #348]	@ (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a56      	ldr	r2, [pc, #344]	@ (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b54      	ldr	r3, [pc, #336]	@ (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a52      	ldr	r2, [pc, #328]	@ (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a49      	ldr	r2, [pc, #292]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x202>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a48      	ldr	r2, [pc, #288]	@ (8000fa4 <HAL_GPIO_Init+0x2f4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1fe>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a47      	ldr	r2, [pc, #284]	@ (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1fa>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a46      	ldr	r2, [pc, #280]	@ (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1f6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a45      	ldr	r2, [pc, #276]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1f2>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	f002 0203 	and.w	r2, r2, #3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	@ (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f20:	4a24      	ldr	r2, [pc, #144]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f74:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	f67f aea2 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e001      	b.n	8000fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43d9      	mvns	r1, r3
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	400b      	ands	r3, r1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e267      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d075      	beq.n	8001126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800103a:	4b88      	ldr	r3, [pc, #544]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b04      	cmp	r3, #4
 8001044:	d00c      	beq.n	8001060 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001046:	4b85      	ldr	r3, [pc, #532]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800104e:	2b08      	cmp	r3, #8
 8001050:	d112      	bne.n	8001078 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001052:	4b82      	ldr	r3, [pc, #520]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800105e:	d10b      	bne.n	8001078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	4b7e      	ldr	r3, [pc, #504]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d05b      	beq.n	8001124 <HAL_RCC_OscConfig+0x108>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d157      	bne.n	8001124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e242      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001080:	d106      	bne.n	8001090 <HAL_RCC_OscConfig+0x74>
 8001082:	4b76      	ldr	r3, [pc, #472]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a75      	ldr	r2, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e01d      	b.n	80010cc <HAL_RCC_OscConfig+0xb0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x98>
 800109a:	4b70      	ldr	r3, [pc, #448]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6f      	ldr	r2, [pc, #444]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b6d      	ldr	r3, [pc, #436]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6c      	ldr	r2, [pc, #432]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0xb0>
 80010b4:	4b69      	ldr	r3, [pc, #420]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a68      	ldr	r2, [pc, #416]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b66      	ldr	r3, [pc, #408]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a65      	ldr	r2, [pc, #404]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fcfa 	bl	8000acc <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fcf6 	bl	8000acc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	@ 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e207      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b5b      	ldr	r3, [pc, #364]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0xc0>
 80010fa:	e014      	b.n	8001126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fce6 	bl	8000acc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fce2 	bl	8000acc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	@ 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1f3      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	4b51      	ldr	r3, [pc, #324]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0xe8>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d063      	beq.n	80011fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001132:	4b4a      	ldr	r3, [pc, #296]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113e:	4b47      	ldr	r3, [pc, #284]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001146:	2b08      	cmp	r3, #8
 8001148:	d11c      	bne.n	8001184 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114a:	4b44      	ldr	r3, [pc, #272]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d116      	bne.n	8001184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	4b41      	ldr	r3, [pc, #260]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <HAL_RCC_OscConfig+0x152>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d001      	beq.n	800116e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e1c7      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4937      	ldr	r1, [pc, #220]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001182:	e03a      	b.n	80011fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d020      	beq.n	80011ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_RCC_OscConfig+0x244>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fc9b 	bl	8000acc <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fc97 	bl	8000acc <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1a8      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4925      	ldr	r1, [pc, #148]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <HAL_RCC_OscConfig+0x244>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc7a 	bl	8000acc <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc76 	bl	8000acc <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e187      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d036      	beq.n	8001274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d016      	beq.n	800123c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_RCC_OscConfig+0x248>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fc5a 	bl	8000acc <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fc56 	bl	8000acc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e167      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_RCC_OscConfig+0x240>)
 8001230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x200>
 800123a:	e01b      	b.n	8001274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_RCC_OscConfig+0x248>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fc43 	bl	8000acc <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001248:	e00e      	b.n	8001268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124a:	f7ff fc3f 	bl	8000acc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d907      	bls.n	8001268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e150      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
 800125c:	40023800 	.word	0x40023800
 8001260:	42470000 	.word	0x42470000
 8001264:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800126a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ea      	bne.n	800124a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8097 	beq.w	80013b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001286:	4b81      	ldr	r3, [pc, #516]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10f      	bne.n	80012b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b7d      	ldr	r3, [pc, #500]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a7c      	ldr	r2, [pc, #496]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b2:	4b77      	ldr	r3, [pc, #476]	@ (8001490 <HAL_RCC_OscConfig+0x474>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012be:	4b74      	ldr	r3, [pc, #464]	@ (8001490 <HAL_RCC_OscConfig+0x474>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a73      	ldr	r2, [pc, #460]	@ (8001490 <HAL_RCC_OscConfig+0x474>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fbff 	bl	8000acc <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d2:	f7ff fbfb 	bl	8000acc <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e10c      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001490 <HAL_RCC_OscConfig+0x474>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x2ea>
 80012f8:	4b64      	ldr	r3, [pc, #400]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fc:	4a63      	ldr	r2, [pc, #396]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	@ 0x70
 8001304:	e01c      	b.n	8001340 <HAL_RCC_OscConfig+0x324>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b05      	cmp	r3, #5
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x30c>
 800130e:	4b5f      	ldr	r3, [pc, #380]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001312:	4a5e      	ldr	r2, [pc, #376]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6713      	str	r3, [r2, #112]	@ 0x70
 800131a:	4b5c      	ldr	r3, [pc, #368]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131e:	4a5b      	ldr	r2, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6713      	str	r3, [r2, #112]	@ 0x70
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0x324>
 8001328:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132c:	4a57      	ldr	r2, [pc, #348]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6713      	str	r3, [r2, #112]	@ 0x70
 8001334:	4b55      	ldr	r3, [pc, #340]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001338:	4a54      	ldr	r2, [pc, #336]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 0304 	bic.w	r3, r3, #4
 800133e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d015      	beq.n	8001374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fbc0 	bl	8000acc <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fbbc 	bl	8000acc <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e0cb      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001366:	4b49      	ldr	r3, [pc, #292]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0ee      	beq.n	8001350 <HAL_RCC_OscConfig+0x334>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fbaa 	bl	8000acc <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fba6 	bl	8000acc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e0b5      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001392:	4b3e      	ldr	r3, [pc, #248]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ee      	bne.n	800137c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a4:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a38      	ldr	r2, [pc, #224]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a1 	beq.w	80014fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ba:	4b34      	ldr	r3, [pc, #208]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d05c      	beq.n	8001480 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d141      	bne.n	8001452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b31      	ldr	r3, [pc, #196]	@ (8001494 <HAL_RCC_OscConfig+0x478>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb7a 	bl	8000acc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fb76 	bl	8000acc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e087      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	4b27      	ldr	r3, [pc, #156]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69da      	ldr	r2, [r3, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	019b      	lsls	r3, r3, #6
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	3b01      	subs	r3, #1
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	491b      	ldr	r1, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x478>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fb4f 	bl	8000acc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fb4b 	bl	8000acc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e05c      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x416>
 8001450:	e054      	b.n	80014fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_RCC_OscConfig+0x478>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb38 	bl	8000acc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb34 	bl	8000acc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e045      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_RCC_OscConfig+0x470>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x444>
 800147e:	e03d      	b.n	80014fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e038      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000
 8001494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x4ec>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d028      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d121      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014be:	429a      	cmp	r2, r3
 80014c0:	d11a      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014c8:	4013      	ands	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d111      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	3b01      	subs	r3, #1
 80014e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0cc      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b68      	ldr	r3, [pc, #416]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d90c      	bls.n	8001548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b65      	ldr	r3, [pc, #404]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b63      	ldr	r3, [pc, #396]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0b8      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001560:	4b59      	ldr	r3, [pc, #356]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a58      	ldr	r2, [pc, #352]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800156a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4a52      	ldr	r2, [pc, #328]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b50      	ldr	r3, [pc, #320]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	494d      	ldr	r1, [pc, #308]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d044      	beq.n	800162c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b47      	ldr	r3, [pc, #284]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d119      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e07f      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d003      	beq.n	80015ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b3f      	ldr	r3, [pc, #252]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e06f      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b3b      	ldr	r3, [pc, #236]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e067      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4934      	ldr	r1, [pc, #208]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff fa66 	bl	8000acc <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff fa62 	bl	8000acc <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e04f      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d20c      	bcs.n	8001654 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e032      	b.n	80016ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4916      	ldr	r1, [pc, #88]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	490e      	ldr	r1, [pc, #56]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001692:	f000 f821 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8001696:	4602      	mov	r2, r0
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	490a      	ldr	r1, [pc, #40]	@ (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	5ccb      	ldrb	r3, [r1, r3]
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff f9c6 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00
 80016c8:	40023800 	.word	0x40023800
 80016cc:	0800514c 	.word	0x0800514c
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016dc:	b094      	sub	sp, #80	@ 0x50
 80016de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f0:	4b79      	ldr	r3, [pc, #484]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d00d      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x40>
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	f200 80e1 	bhi.w	80018c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x34>
 8001706:	2b04      	cmp	r3, #4
 8001708:	d003      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x3a>
 800170a:	e0db      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b73      	ldr	r3, [pc, #460]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x204>)
 800170e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001710:	e0db      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001712:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001716:	e0d8      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001718:	4b6f      	ldr	r3, [pc, #444]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001722:	4b6d      	ldr	r3, [pc, #436]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172e:	4b6a      	ldr	r3, [pc, #424]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	099b      	lsrs	r3, r3, #6
 8001734:	2200      	movs	r2, #0
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001738:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800173a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800173c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001740:	633b      	str	r3, [r7, #48]	@ 0x30
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	@ 0x34
 8001746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800174a:	4622      	mov	r2, r4
 800174c:	462b      	mov	r3, r5
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	0159      	lsls	r1, r3, #5
 8001758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800175c:	0150      	lsls	r0, r2, #5
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4621      	mov	r1, r4
 8001764:	1a51      	subs	r1, r2, r1
 8001766:	6139      	str	r1, [r7, #16]
 8001768:	4629      	mov	r1, r5
 800176a:	eb63 0301 	sbc.w	r3, r3, r1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800177c:	4659      	mov	r1, fp
 800177e:	018b      	lsls	r3, r1, #6
 8001780:	4651      	mov	r1, sl
 8001782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001786:	4651      	mov	r1, sl
 8001788:	018a      	lsls	r2, r1, #6
 800178a:	4651      	mov	r1, sl
 800178c:	ebb2 0801 	subs.w	r8, r2, r1
 8001790:	4659      	mov	r1, fp
 8001792:	eb63 0901 	sbc.w	r9, r3, r1
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017aa:	4690      	mov	r8, r2
 80017ac:	4699      	mov	r9, r3
 80017ae:	4623      	mov	r3, r4
 80017b0:	eb18 0303 	adds.w	r3, r8, r3
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	462b      	mov	r3, r5
 80017b8:	eb49 0303 	adc.w	r3, r9, r3
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017ca:	4629      	mov	r1, r5
 80017cc:	024b      	lsls	r3, r1, #9
 80017ce:	4621      	mov	r1, r4
 80017d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017d4:	4621      	mov	r1, r4
 80017d6:	024a      	lsls	r2, r1, #9
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017de:	2200      	movs	r2, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017e8:	f7fe fcfa 	bl	80001e0 <__aeabi_uldivmod>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4613      	mov	r3, r2
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017f4:	e058      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	099b      	lsrs	r3, r3, #6
 80017fc:	2200      	movs	r2, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	4611      	mov	r1, r2
 8001802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001810:	4642      	mov	r2, r8
 8001812:	464b      	mov	r3, r9
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	0159      	lsls	r1, r3, #5
 800181e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001822:	0150      	lsls	r0, r2, #5
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4641      	mov	r1, r8
 800182a:	ebb2 0a01 	subs.w	sl, r2, r1
 800182e:	4649      	mov	r1, r9
 8001830:	eb63 0b01 	sbc.w	fp, r3, r1
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001848:	ebb2 040a 	subs.w	r4, r2, sl
 800184c:	eb63 050b 	sbc.w	r5, r3, fp
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	4643      	mov	r3, r8
 8001866:	18e3      	adds	r3, r4, r3
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	464b      	mov	r3, r9
 800186c:	eb45 0303 	adc.w	r3, r5, r3
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187e:	4629      	mov	r1, r5
 8001880:	028b      	lsls	r3, r1, #10
 8001882:	4621      	mov	r1, r4
 8001884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001888:	4621      	mov	r1, r4
 800188a:	028a      	lsls	r2, r1, #10
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001892:	2200      	movs	r2, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	61fa      	str	r2, [r7, #28]
 8001898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800189c:	f7fe fca0 	bl	80001e0 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	3301      	adds	r3, #1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c2:	e002      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x204>)
 80018c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3750      	adds	r7, #80	@ 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	00f42400 	.word	0x00f42400
 80018e0:	007a1200 	.word	0x007a1200

080018e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000

080018fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001900:	f7ff fff0 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	@ (8001920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	0800515c 	.word	0x0800515c

08001924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001928:	f7ff ffdc 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0b5b      	lsrs	r3, r3, #13
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	@ (8001948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	0800515c 	.word	0x0800515c

0800194c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e042      	b.n	80019e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe ff98 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	@ 0x24
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800198e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f82b 	bl	80019ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f0:	b0c0      	sub	sp, #256	@ 0x100
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	ea40 0301 	orr.w	r3, r0, r1
 8001a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001a44:	f021 010c 	bic.w	r1, r1, #12
 8001a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a52:	430b      	orrs	r3, r1
 8001a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a66:	6999      	ldr	r1, [r3, #24]
 8001a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	ea40 0301 	orr.w	r3, r0, r1
 8001a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb8 <UART_SetConfig+0x2cc>)
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d005      	beq.n	8001a8c <UART_SetConfig+0xa0>
 8001a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b8d      	ldr	r3, [pc, #564]	@ (8001cbc <UART_SetConfig+0x2d0>)
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d104      	bne.n	8001a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a8c:	f7ff ff4a 	bl	8001924 <HAL_RCC_GetPCLK2Freq>
 8001a90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001a94:	e003      	b.n	8001a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a96:	f7ff ff31 	bl	80018fc <HAL_RCC_GetPCLK1Freq>
 8001a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa8:	f040 810c 	bne.w	8001cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001abe:	4622      	mov	r2, r4
 8001ac0:	462b      	mov	r3, r5
 8001ac2:	1891      	adds	r1, r2, r2
 8001ac4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ac6:	415b      	adcs	r3, r3
 8001ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ace:	4621      	mov	r1, r4
 8001ad0:	eb12 0801 	adds.w	r8, r2, r1
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	eb43 0901 	adc.w	r9, r3, r1
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aee:	4690      	mov	r8, r2
 8001af0:	4699      	mov	r9, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	eb18 0303 	adds.w	r3, r8, r3
 8001af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001afc:	462b      	mov	r3, r5
 8001afe:	eb49 0303 	adc.w	r3, r9, r3
 8001b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001b12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	18db      	adds	r3, r3, r3
 8001b1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b20:	4613      	mov	r3, r2
 8001b22:	eb42 0303 	adc.w	r3, r2, r3
 8001b26:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001b30:	f7fe fb56 	bl	80001e0 <__aeabi_uldivmod>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4b61      	ldr	r3, [pc, #388]	@ (8001cc0 <UART_SetConfig+0x2d4>)
 8001b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	011c      	lsls	r4, r3, #4
 8001b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b46:	2200      	movs	r2, #0
 8001b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001b54:	4642      	mov	r2, r8
 8001b56:	464b      	mov	r3, r9
 8001b58:	1891      	adds	r1, r2, r2
 8001b5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001b5c:	415b      	adcs	r3, r3
 8001b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b64:	4641      	mov	r1, r8
 8001b66:	eb12 0a01 	adds.w	sl, r2, r1
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b84:	4692      	mov	sl, r2
 8001b86:	469b      	mov	fp, r3
 8001b88:	4643      	mov	r3, r8
 8001b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8001b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001b92:	464b      	mov	r3, r9
 8001b94:	eb4b 0303 	adc.w	r3, fp, r3
 8001b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	18db      	adds	r3, r3, r3
 8001bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	eb42 0303 	adc.w	r3, r2, r3
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001bc6:	f7fe fb0b 	bl	80001e0 <__aeabi_uldivmod>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <UART_SetConfig+0x2d4>)
 8001bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2264      	movs	r2, #100	@ 0x64
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	1acb      	subs	r3, r1, r3
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001be6:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <UART_SetConfig+0x2d4>)
 8001be8:	fba3 2302 	umull	r2, r3, r3, r2
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001bf4:	441c      	add	r4, r3
 8001bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001c08:	4642      	mov	r2, r8
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	1891      	adds	r1, r2, r2
 8001c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c10:	415b      	adcs	r3, r3
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c18:	4641      	mov	r1, r8
 8001c1a:	1851      	adds	r1, r2, r1
 8001c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c1e:	4649      	mov	r1, r9
 8001c20:	414b      	adcs	r3, r1
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001c30:	4659      	mov	r1, fp
 8001c32:	00cb      	lsls	r3, r1, #3
 8001c34:	4651      	mov	r1, sl
 8001c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	00ca      	lsls	r2, r1, #3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	4642      	mov	r2, r8
 8001c46:	189b      	adds	r3, r3, r2
 8001c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	460a      	mov	r2, r1
 8001c50:	eb42 0303 	adc.w	r3, r2, r3
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	18db      	adds	r3, r3, r3
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	4613      	mov	r3, r2
 8001c74:	eb42 0303 	adc.w	r3, r2, r3
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001c82:	f7fe faad 	bl	80001e0 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <UART_SetConfig+0x2d4>)
 8001c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	2164      	movs	r1, #100	@ 0x64
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	3332      	adds	r3, #50	@ 0x32
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <UART_SetConfig+0x2d4>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	f003 0207 	and.w	r2, r3, #7
 8001caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4422      	add	r2, r4
 8001cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cb4:	e106      	b.n	8001ec4 <UART_SetConfig+0x4d8>
 8001cb6:	bf00      	nop
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40011400 	.word	0x40011400
 8001cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001cce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	464b      	mov	r3, r9
 8001cda:	1891      	adds	r1, r2, r2
 8001cdc:	6239      	str	r1, [r7, #32]
 8001cde:	415b      	adcs	r3, r3
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	1854      	adds	r4, r2, r1
 8001cea:	4649      	mov	r1, r9
 8001cec:	eb43 0501 	adc.w	r5, r3, r1
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	00eb      	lsls	r3, r5, #3
 8001cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	18e3      	adds	r3, r4, r3
 8001d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	eb45 0303 	adc.w	r3, r5, r3
 8001d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d32:	4629      	mov	r1, r5
 8001d34:	008b      	lsls	r3, r1, #2
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	008a      	lsls	r2, r1, #2
 8001d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001d44:	f7fe fa4c 	bl	80001e0 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4b60      	ldr	r3, [pc, #384]	@ (8001ed0 <UART_SetConfig+0x4e4>)
 8001d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	011c      	lsls	r4, r3, #4
 8001d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001d68:	4642      	mov	r2, r8
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	1891      	adds	r1, r2, r2
 8001d6e:	61b9      	str	r1, [r7, #24]
 8001d70:	415b      	adcs	r3, r3
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d78:	4641      	mov	r1, r8
 8001d7a:	1851      	adds	r1, r2, r1
 8001d7c:	6139      	str	r1, [r7, #16]
 8001d7e:	4649      	mov	r1, r9
 8001d80:	414b      	adcs	r3, r1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d90:	4659      	mov	r1, fp
 8001d92:	00cb      	lsls	r3, r1, #3
 8001d94:	4651      	mov	r1, sl
 8001d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	00ca      	lsls	r2, r1, #3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	4642      	mov	r2, r8
 8001da6:	189b      	adds	r3, r3, r2
 8001da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dac:	464b      	mov	r3, r9
 8001dae:	460a      	mov	r2, r1
 8001db0:	eb42 0303 	adc.w	r3, r2, r3
 8001db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	008b      	lsls	r3, r1, #2
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dda:	4641      	mov	r1, r8
 8001ddc:	008a      	lsls	r2, r1, #2
 8001dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001de2:	f7fe f9fd 	bl	80001e0 <__aeabi_uldivmod>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <UART_SetConfig+0x4e4>)
 8001dee:	fba3 2301 	umull	r2, r3, r3, r1
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2264      	movs	r2, #100	@ 0x64
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	1acb      	subs	r3, r1, r3
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	3332      	adds	r3, #50	@ 0x32
 8001e00:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <UART_SetConfig+0x4e4>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e0c:	441c      	add	r4, r3
 8001e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e12:	2200      	movs	r2, #0
 8001e14:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e16:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	1891      	adds	r1, r2, r2
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	415b      	adcs	r3, r3
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	4649      	mov	r1, r9
 8001e34:	414b      	adcs	r3, r1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e44:	4659      	mov	r1, fp
 8001e46:	00cb      	lsls	r3, r1, #3
 8001e48:	4651      	mov	r1, sl
 8001e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e4e:	4651      	mov	r1, sl
 8001e50:	00ca      	lsls	r2, r1, #3
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	4642      	mov	r2, r8
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e5e:	464b      	mov	r3, r9
 8001e60:	460a      	mov	r2, r1
 8001e62:	eb42 0303 	adc.w	r3, r2, r3
 8001e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e72:	667a      	str	r2, [r7, #100]	@ 0x64
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001e80:	4649      	mov	r1, r9
 8001e82:	008b      	lsls	r3, r1, #2
 8001e84:	4641      	mov	r1, r8
 8001e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	008a      	lsls	r2, r1, #2
 8001e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e92:	f7fe f9a5 	bl	80001e0 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <UART_SetConfig+0x4e4>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	2164      	movs	r1, #100	@ 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	3332      	adds	r3, #50	@ 0x32
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <UART_SetConfig+0x4e4>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4422      	add	r2, r4
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed0:	51eb851f 	.word	0x51eb851f

08001ed4 <__NVIC_SetPriority>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f06f 0004 	mvn.w	r0, #4
 8001f32:	f7ff ffcf 	bl	8001ed4 <__NVIC_SetPriority>
#endif
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f42:	f3ef 8305 	mrs	r3, IPSR
 8001f46:	603b      	str	r3, [r7, #0]
  return(result);
 8001f48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f4e:	f06f 0305 	mvn.w	r3, #5
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	e00c      	b.n	8001f70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <osKernelInitialize+0x44>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <osKernelInitialize+0x44>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e002      	b.n	8001f70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000084 	.word	0x20000084

08001f84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f8a:	f3ef 8305 	mrs	r3, IPSR
 8001f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f96:	f06f 0305 	mvn.w	r3, #5
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	e010      	b.n	8001fc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <osKernelStart+0x48>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d109      	bne.n	8001fba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fa6:	f7ff ffbf 	bl	8001f28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <osKernelStart+0x48>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fb0:	f001 f95e 	bl	8003270 <vTaskStartScheduler>
      stat = osOK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	e002      	b.n	8001fc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000084 	.word	0x20000084

08001fd0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd6:	f3ef 8305 	mrs	r3, IPSR
 8001fda:	603b      	str	r3, [r7, #0]
  return(result);
 8001fdc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8001fe2:	f001 fa69 	bl	80034b8 <xTaskGetTickCountFromISR>
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	e002      	b.n	8001ff0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8001fea:	f001 fa55 	bl	8003498 <xTaskGetTickCount>
 8001fee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b08e      	sub	sp, #56	@ 0x38
 8001ffe:	af04      	add	r7, sp, #16
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200a:	f3ef 8305 	mrs	r3, IPSR
 800200e:	617b      	str	r3, [r7, #20]
  return(result);
 8002010:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002012:	2b00      	cmp	r3, #0
 8002014:	d17e      	bne.n	8002114 <osThreadNew+0x11a>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d07b      	beq.n	8002114 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002020:	2318      	movs	r3, #24
 8002022:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d045      	beq.n	80020c0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <osThreadNew+0x48>
        name = attr->name;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <osThreadNew+0x6e>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b38      	cmp	r3, #56	@ 0x38
 800205a:	d805      	bhi.n	8002068 <osThreadNew+0x6e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <osThreadNew+0x72>
        return (NULL);
 8002068:	2300      	movs	r3, #0
 800206a:	e054      	b.n	8002116 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <osThreadNew+0xa8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b5b      	cmp	r3, #91	@ 0x5b
 800208a:	d90a      	bls.n	80020a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <osThreadNew+0xa8>
        mem = 1;
 800209c:	2301      	movs	r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e010      	b.n	80020c4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <osThreadNew+0xca>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <osThreadNew+0xca>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <osThreadNew+0xca>
          mem = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e001      	b.n	80020c4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d110      	bne.n	80020ec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020d2:	9202      	str	r2, [sp, #8]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6a3a      	ldr	r2, [r7, #32]
 80020de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fee9 	bl	8002eb8 <xTaskCreateStatic>
 80020e6:	4603      	mov	r3, r0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d110      	bne.n	8002114 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 ff37 	bl	8002f78 <xTaskCreate>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <osThreadNew+0x11a>
            hTask = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002114:	693b      	ldr	r3, [r7, #16]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3728      	adds	r7, #40	@ 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <osThreadFlagsSet+0x1a>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	da03      	bge.n	8002142 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800213a:	f06f 0303 	mvn.w	r3, #3
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e035      	b.n	80021ae <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002148:	f3ef 8305 	mrs	r3, IPSR
 800214c:	613b      	str	r3, [r7, #16]
  return(result);
 800214e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01f      	beq.n	8002194 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	2201      	movs	r2, #1
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f001 fe85 	bl	8003e74 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2200      	movs	r2, #0
 8002170:	9200      	str	r2, [sp, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f001 fe7c 	bl	8003e74 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d015      	beq.n	80021ae <osThreadFlagsSet+0x8e>
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <osThreadFlagsSet+0x98>)
 8002184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	e00c      	b.n	80021ae <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8002194:	2300      	movs	r3, #0
 8002196:	2201      	movs	r2, #1
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f001 fdb0 	bl	8003d00 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f001 fda9 	bl	8003d00 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021c8:	f3ef 8305 	mrs	r3, IPSR
 80021cc:	617b      	str	r3, [r7, #20]
  return(result);
 80021ce:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80021d4:	f06f 0305 	mvn.w	r3, #5
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021da:	e06b      	b.n	80022b4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da03      	bge.n	80021ea <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80021e2:	f06f 0303 	mvn.w	r3, #3
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e8:	e064      	b.n	80022b4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <osThreadFlagsWait+0x3e>
      clear = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f8:	e001      	b.n	80021fe <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8002206:	f001 f947 	bl	8003498 <xTaskGetTickCount>
 800220a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800220c:	f107 0210 	add.w	r2, r7, #16
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002214:	2000      	movs	r0, #0
 8002216:	f001 fd19 	bl	8003c4c <xTaskNotifyWait>
 800221a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d137      	bne.n	8002292 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8002222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222e:	4313      	orrs	r3, r2
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	4013      	ands	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d032      	beq.n	80022ae <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800224e:	f06f 0302 	mvn.w	r3, #2
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8002254:	e02e      	b.n	80022b4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d128      	bne.n	80022b2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8002266:	f06f 0302 	mvn.w	r3, #2
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800226c:	e022      	b.n	80022b4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800226e:	f001 f913 	bl	8003498 <xTaskGetTickCount>
 8002272:	4602      	mov	r2, r0
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	429a      	cmp	r2, r3
 8002280:	d902      	bls.n	8002288 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
 8002286:	e00e      	b.n	80022a6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8002288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002290:	e009      	b.n	80022a6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8002298:	f06f 0302 	mvn.w	r3, #2
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800229e:	e002      	b.n	80022a6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80022a0:	f06f 0301 	mvn.w	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1af      	bne.n	800220c <osThreadFlagsWait+0x50>
 80022ac:	e002      	b.n	80022b4 <osThreadFlagsWait+0xf8>
            break;
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <osThreadFlagsWait+0xf8>
            break;
 80022b2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80022b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3730      	adds	r7, #48	@ 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c6:	f3ef 8305 	mrs	r3, IPSR
 80022ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80022cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <osDelay+0x1c>
    stat = osErrorISR;
 80022d2:	f06f 0305 	mvn.w	r3, #5
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e007      	b.n	80022ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 ff8d 	bl	8003204 <vTaskDelay>
    }
  }

  return (stat);
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <vApplicationGetIdleTaskMemory+0x2c>)
 8002304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <vApplicationGetIdleTaskMemory+0x30>)
 800230a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2280      	movs	r2, #128	@ 0x80
 8002310:	601a      	str	r2, [r3, #0]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000088 	.word	0x20000088
 8002324:	200000e4 	.word	0x200000e4

08002328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <vApplicationGetTimerTaskMemory+0x2c>)
 8002338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4a06      	ldr	r2, [pc, #24]	@ (8002358 <vApplicationGetTimerTaskMemory+0x30>)
 800233e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200002e4 	.word	0x200002e4
 8002358:	20000340 	.word	0x20000340

0800235c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f103 0208 	add.w	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f103 0208 	add.w	r2, r3, #8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f103 0208 	add.w	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d103      	bne.n	800241e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e00c      	b.n	8002438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3308      	adds	r3, #8
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e002      	b.n	800242c <vListInsert+0x2e>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	d2f6      	bcs.n	8002426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6852      	ldr	r2, [r2, #4]
 8002490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d103      	bne.n	80024a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1e5a      	subs	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024f0:	f002 fa82 	bl	80049f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	441a      	add	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	3b01      	subs	r3, #1
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	22ff      	movs	r2, #255	@ 0xff
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	22ff      	movs	r2, #255	@ 0xff
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d114      	bne.n	8002570 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3310      	adds	r3, #16
 8002552:	4618      	mov	r0, r3
 8002554:	f001 f92c 	bl	80037b0 <xTaskRemoveFromEventList>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d012      	beq.n	8002584 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <xQueueGenericReset+0xd0>)
 8002560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	e009      	b.n	8002584 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3310      	adds	r3, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fef1 	bl	800235c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3324      	adds	r3, #36	@ 0x24
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff feec 	bl	800235c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002584:	f002 fa6a 	bl	8004a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	e7fd      	b.n	80025de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <xQueueGenericCreateStatic+0x56>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <xQueueGenericCreateStatic+0x5a>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xQueueGenericCreateStatic+0x5c>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	623b      	str	r3, [r7, #32]
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <xQueueGenericCreateStatic+0x84>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <xQueueGenericCreateStatic+0x88>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <xQueueGenericCreateStatic+0x8a>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	61fb      	str	r3, [r7, #28]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800263e:	2350      	movs	r3, #80	@ 0x50
 8002640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b50      	cmp	r3, #80	@ 0x50
 8002646:	d00b      	beq.n	8002660 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61bb      	str	r3, [r7, #24]
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002660:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002674:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f805 	bl	8002692 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800268a:	4618      	mov	r0, r3
 800268c:	3730      	adds	r7, #48	@ 0x30
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026c0:	2101      	movs	r1, #1
 80026c2:	69b8      	ldr	r0, [r7, #24]
 80026c4:	f7ff fefe 	bl	80024c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026e6:	2300      	movs	r3, #0
 80026e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <xQueueGenericSend+0x34>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <xQueueGenericSend+0x42>
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <xQueueGenericSend+0x46>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueGenericSend+0x48>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <xQueueGenericSend+0x64>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x72>
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <xQueueGenericSend+0x76>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericSend+0x78>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <xQueueGenericSend+0x94>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	623b      	str	r3, [r7, #32]
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800276c:	f001 f9e0 	bl	8003b30 <xTaskGetSchedulerState>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <xQueueGenericSend+0xa4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <xQueueGenericSend+0xa8>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <xQueueGenericSend+0xaa>
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <xQueueGenericSend+0xc6>
	__asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	61fb      	str	r3, [r7, #28]
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	e7fd      	b.n	800279a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800279e:	f002 f92b 	bl	80049f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <xQueueGenericSend+0xdc>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d129      	bne.n	8002808 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ba:	f000 fa0f 	bl	8002bdc <prvCopyDataToQueue>
 80027be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	3324      	adds	r3, #36	@ 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 ffef 	bl	80037b0 <xTaskRemoveFromEventList>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027d8:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <xQueueGenericSend+0x200>)
 80027da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	e00a      	b.n	8002800 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <xQueueGenericSend+0x200>)
 80027f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002800:	f002 f92c 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8002804:	2301      	movs	r3, #1
 8002806:	e063      	b.n	80028d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800280e:	f002 f925 	bl	8004a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002812:	2300      	movs	r3, #0
 8002814:	e05c      	b.n	80028d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4618      	mov	r0, r3
 8002822:	f001 f829 	bl	8003878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002826:	2301      	movs	r3, #1
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800282a:	f002 f917 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800282e:	f000 fd87 	bl	8003340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002832:	f002 f8e1 	bl	80049f8 <vPortEnterCritical>
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800283c:	b25b      	sxtb	r3, r3
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d103      	bne.n	800284c <xQueueGenericSend+0x174>
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d103      	bne.n	8002862 <xQueueGenericSend+0x18a>
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002862:	f002 f8fb 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002866:	1d3a      	adds	r2, r7, #4
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f818 	bl	80038a4 <xTaskCheckForTimeOut>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d124      	bne.n	80028c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800287a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800287c:	f000 faa6 	bl	8002dcc <prvIsQueueFull>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002888:	3310      	adds	r3, #16
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 ff3c 	bl	800370c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002896:	f000 fa31 	bl	8002cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800289a:	f000 fd5f 	bl	800335c <xTaskResumeAll>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f af7c 	bne.w	800279e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80028a6:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <xQueueGenericSend+0x200>)
 80028a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	e772      	b.n	800279e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028ba:	f000 fa1f 	bl	8002cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028be:	f000 fd4d 	bl	800335c <xTaskResumeAll>
 80028c2:	e76c      	b.n	800279e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028c6:	f000 fa19 	bl	8002cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028ca:	f000 fd47 	bl	800335c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3738      	adds	r7, #56	@ 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b090      	sub	sp, #64	@ 0x40
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80028ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <xQueueGenericSendFromISR+0x3e>
 8002912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueGenericSendFromISR+0x42>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericSendFromISR+0x44>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d103      	bne.n	800294a <xQueueGenericSendFromISR+0x6e>
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <xQueueGenericSendFromISR+0x72>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <xQueueGenericSendFromISR+0x74>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	623b      	str	r3, [r7, #32]
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800296c:	f002 f924 	bl	8004bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002970:	f3ef 8211 	mrs	r2, BASEPRI
 8002974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	61fa      	str	r2, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002988:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <xQueueGenericSendFromISR+0xc2>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d12f      	bne.n	80029fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800299e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029b4:	f000 f912 	bl	8002bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d112      	bne.n	80029e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029cc:	3324      	adds	r3, #36	@ 0x24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 feee 	bl	80037b0 <xTaskRemoveFromEventList>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e007      	b.n	80029f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ec:	3301      	adds	r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	b25a      	sxtb	r2, r3
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80029f8:	2301      	movs	r3, #1
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80029fc:	e001      	b.n	8002a02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3740      	adds	r7, #64	@ 0x40
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <xQueueReceive+0x32>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	623b      	str	r3, [r7, #32]
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <xQueueReceive+0x40>
 8002a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <xQueueReceive+0x44>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <xQueueReceive+0x46>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <xQueueReceive+0x62>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	61fb      	str	r3, [r7, #28]
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7a:	f001 f859 	bl	8003b30 <xTaskGetSchedulerState>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <xQueueReceive+0x72>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <xQueueReceive+0x76>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueReceive+0x78>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueReceive+0x94>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	61bb      	str	r3, [r7, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aac:	f001 ffa4 	bl	80049f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01f      	beq.n	8002afc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ac0:	f000 f8f6 	bl	8002cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	1e5a      	subs	r2, r3, #1
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00f      	beq.n	8002af4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad6:	3310      	adds	r3, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fe69 	bl	80037b0 <xTaskRemoveFromEventList>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd8 <xQueueReceive+0x1c0>)
 8002ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002af4:	f001 ffb2 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e069      	b.n	8002bd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b02:	f001 ffab 	bl	8004a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e062      	b.n	8002bd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 feaf 	bl	8003878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b1e:	f001 ff9d 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b22:	f000 fc0d 	bl	8003340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b26:	f001 ff67 	bl	80049f8 <vPortEnterCritical>
 8002b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d103      	bne.n	8002b40 <xQueueReceive+0x128>
 8002b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d103      	bne.n	8002b56 <xQueueReceive+0x13e>
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b56:	f001 ff81 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b5a:	1d3a      	adds	r2, r7, #4
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fe9e 	bl	80038a4 <xTaskCheckForTimeOut>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d123      	bne.n	8002bb6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b70:	f000 f916 	bl	8002da0 <prvIsQueueEmpty>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	3324      	adds	r3, #36	@ 0x24
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fdc2 	bl	800370c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b8a:	f000 f8b7 	bl	8002cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b8e:	f000 fbe5 	bl	800335c <xTaskResumeAll>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d189      	bne.n	8002aac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <xQueueReceive+0x1c0>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	e780      	b.n	8002aac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bac:	f000 f8a6 	bl	8002cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bb0:	f000 fbd4 	bl	800335c <xTaskResumeAll>
 8002bb4:	e77a      	b.n	8002aac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb8:	f000 f8a0 	bl	8002cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bbc:	f000 fbce 	bl	800335c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bc2:	f000 f8ed 	bl	8002da0 <prvIsQueueEmpty>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f43f af6f 	beq.w	8002aac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	@ 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d14d      	bne.n	8002c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 ffb0 	bl	8003b6c <xTaskPriorityDisinherit>
 8002c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	e043      	b.n	8002c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d119      	bne.n	8002c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6858      	ldr	r0, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	461a      	mov	r2, r3
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	f002 fa22 	bl	8005070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d32b      	bcc.n	8002c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e026      	b.n	8002c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68d8      	ldr	r0, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	f002 fa08 	bl	8005070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	425b      	negs	r3, r3
 8002c6a:	441a      	add	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	425b      	negs	r3, r3
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d105      	bne.n	8002c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002ca6:	697b      	ldr	r3, [r7, #20]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	441a      	add	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d303      	bcc.n	8002ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68d9      	ldr	r1, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	461a      	mov	r2, r3
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f002 f9be 	bl	8005070 <memcpy>
	}
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d04:	f001 fe78 	bl	80049f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d10:	e011      	b.n	8002d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3324      	adds	r3, #36	@ 0x24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fd46 	bl	80037b0 <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d2a:	f000 fe1f 	bl	800396c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dce9      	bgt.n	8002d12 <prvUnlockQueue+0x16>
 8002d3e:	e000      	b.n	8002d42 <prvUnlockQueue+0x46>
					break;
 8002d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	22ff      	movs	r2, #255	@ 0xff
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002d4a:	f001 fe87 	bl	8004a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d4e:	f001 fe53 	bl	80049f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5a:	e011      	b.n	8002d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3310      	adds	r3, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fd21 	bl	80037b0 <xTaskRemoveFromEventList>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d74:	f000 fdfa 	bl	800396c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	dce9      	bgt.n	8002d5c <prvUnlockQueue+0x60>
 8002d88:	e000      	b.n	8002d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002d94:	f001 fe62 	bl	8004a5c <vPortExitCritical>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002da8:	f001 fe26 	bl	80049f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e001      	b.n	8002dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dbe:	f001 fe4d 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dd4:	f001 fe10 	bl	80049f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d102      	bne.n	8002dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e001      	b.n	8002dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dee:	f001 fe35 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e014      	b.n	8002e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <vQueueAddToRegistry+0x50>)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <vQueueAddToRegistry+0x50>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <vQueueAddToRegistry+0x50>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e2e:	e006      	b.n	8002e3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b07      	cmp	r3, #7
 8002e3a:	d9e7      	bls.n	8002e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000740 	.word	0x20000740

08002e50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e60:	f001 fdca 	bl	80049f8 <vPortEnterCritical>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d103      	bne.n	8002e7a <vQueueWaitForMessageRestricted+0x2a>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <vQueueWaitForMessageRestricted+0x40>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e90:	f001 fde4 	bl	8004a5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3324      	adds	r3, #36	@ 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fc57 	bl	8003758 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff26 	bl	8002cfc <prvUnlockQueue>
	}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	@ 0x38
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	623b      	str	r3, [r7, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	61fb      	str	r3, [r7, #28]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f02:	235c      	movs	r3, #92	@ 0x5c
 8002f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b5c      	cmp	r3, #92	@ 0x5c
 8002f0a:	d00b      	beq.n	8002f24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	61bb      	str	r3, [r7, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01e      	beq.n	8002f6a <xTaskCreateStatic+0xb2>
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01b      	beq.n	8002f6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f44:	2300      	movs	r3, #0
 8002f46:	9303      	str	r3, [sp, #12]
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f850 	bl	8003002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f64:	f000 f8de 	bl	8003124 <prvAddNewTaskToReadyList>
 8002f68:	e001      	b.n	8002f6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f6e:	697b      	ldr	r3, [r7, #20]
	}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	@ 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08c      	sub	sp, #48	@ 0x30
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fe55 	bl	8004c3c <pvPortMalloc>
 8002f92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f9a:	205c      	movs	r0, #92	@ 0x5c
 8002f9c:	f001 fe4e 	bl	8004c3c <pvPortMalloc>
 8002fa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fae:	e005      	b.n	8002fbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fb0:	6978      	ldr	r0, [r7, #20]
 8002fb2:	f001 ff11 	bl	8004dd8 <vPortFree>
 8002fb6:	e001      	b.n	8002fbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9303      	str	r3, [sp, #12]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9302      	str	r3, [sp, #8]
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f80e 	bl	8003002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe6:	69f8      	ldr	r0, [r7, #28]
 8002fe8:	f000 f89c 	bl	8003124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fec:	2301      	movs	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e002      	b.n	8002ff8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b088      	sub	sp, #32
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	21a5      	movs	r1, #165	@ 0xa5
 800301c:	f001 fffc 	bl	8005018 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800302a:	3b01      	subs	r3, #1
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f023 0307 	bic.w	r3, r3, #7
 8003038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	617b      	str	r3, [r7, #20]
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e012      	b.n	800308e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	7819      	ldrb	r1, [r3, #0]
 8003070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	3334      	adds	r3, #52	@ 0x34
 8003078:	460a      	mov	r2, r1
 800307a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d9e9      	bls.n	8003068 <prvInitialiseNewTask+0x66>
 8003094:	e000      	b.n	8003098 <prvInitialiseNewTask+0x96>
			{
				break;
 8003096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030a0:	e003      	b.n	80030aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	2b37      	cmp	r3, #55	@ 0x37
 80030ae:	d901      	bls.n	80030b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030b0:	2337      	movs	r3, #55	@ 0x37
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	2200      	movs	r2, #0
 80030c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	3304      	adds	r3, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f966 	bl	800239c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	3318      	adds	r3, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f961 	bl	800239c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	69b8      	ldr	r0, [r7, #24]
 8003104:	f001 fb44 	bl	8004790 <pxPortInitialiseStack>
 8003108:	4602      	mov	r2, r0
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800311a:	bf00      	nop
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800312c:	f001 fc64 	bl	80049f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003130:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <prvAddNewTaskToReadyList+0xc4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a2c      	ldr	r2, [pc, #176]	@ (80031e8 <prvAddNewTaskToReadyList+0xc4>)
 8003138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800313a:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <prvAddNewTaskToReadyList+0xc8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <prvAddNewTaskToReadyList+0xc8>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <prvAddNewTaskToReadyList+0xc4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003150:	f000 fc30 	bl	80039b4 <prvInitialiseTaskLists>
 8003154:	e00d      	b.n	8003172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <prvAddNewTaskToReadyList+0xcc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315e:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <prvAddNewTaskToReadyList+0xc8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800316c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <prvAddNewTaskToReadyList+0xc8>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003172:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <prvAddNewTaskToReadyList+0xd0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a1e      	ldr	r2, [pc, #120]	@ (80031f4 <prvAddNewTaskToReadyList+0xd0>)
 800317a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800317c:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <prvAddNewTaskToReadyList+0xd0>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003188:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <prvAddNewTaskToReadyList+0xd4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d903      	bls.n	8003198 <prvAddNewTaskToReadyList+0x74>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <prvAddNewTaskToReadyList+0xd4>)
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4a15      	ldr	r2, [pc, #84]	@ (80031fc <prvAddNewTaskToReadyList+0xd8>)
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7ff f901 	bl	80023b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031b4:	f001 fc52 	bl	8004a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <prvAddNewTaskToReadyList+0xcc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <prvAddNewTaskToReadyList+0xc8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d207      	bcs.n	80031de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <prvAddNewTaskToReadyList+0xdc>)
 80031d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000c54 	.word	0x20000c54
 80031ec:	20000780 	.word	0x20000780
 80031f0:	20000c60 	.word	0x20000c60
 80031f4:	20000c70 	.word	0x20000c70
 80031f8:	20000c5c 	.word	0x20000c5c
 80031fc:	20000784 	.word	0x20000784
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <vTaskDelay+0x64>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <vTaskDelay+0x32>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	60bb      	str	r3, [r7, #8]
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	e7fd      	b.n	8003232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003236:	f000 f883 	bl	8003340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800323a:	2100      	movs	r1, #0
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fef9 	bl	8004034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003242:	f000 f88b 	bl	800335c <xTaskResumeAll>
 8003246:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <vTaskDelay+0x68>)
 8003250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000c7c 	.word	0x20000c7c
 800326c:	e000ed04 	.word	0xe000ed04

08003270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800327e:	463a      	mov	r2, r7
 8003280:	1d39      	adds	r1, r7, #4
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f834 	bl	80022f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	9202      	str	r2, [sp, #8]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	460a      	mov	r2, r1
 800329e:	4922      	ldr	r1, [pc, #136]	@ (8003328 <vTaskStartScheduler+0xb8>)
 80032a0:	4822      	ldr	r0, [pc, #136]	@ (800332c <vTaskStartScheduler+0xbc>)
 80032a2:	f7ff fe09 	bl	8002eb8 <xTaskCreateStatic>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a21      	ldr	r2, [pc, #132]	@ (8003330 <vTaskStartScheduler+0xc0>)
 80032aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <vTaskStartScheduler+0xc0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e001      	b.n	80032be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032c4:	f000 ff0a 	bl	80040dc <xTimerCreateTimerTask>
 80032c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d116      	bne.n	80032fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	613b      	str	r3, [r7, #16]
}
 80032e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <vTaskStartScheduler+0xc4>)
 80032e6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <vTaskStartScheduler+0xc8>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <vTaskStartScheduler+0xcc>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032f8:	f001 fada 	bl	80048b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032fc:	e00f      	b.n	800331e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d10b      	bne.n	800331e <vTaskStartScheduler+0xae>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	60fb      	str	r3, [r7, #12]
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	e7fd      	b.n	800331a <vTaskStartScheduler+0xaa>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	080050c8 	.word	0x080050c8
 800332c:	08003985 	.word	0x08003985
 8003330:	20000c78 	.word	0x20000c78
 8003334:	20000c74 	.word	0x20000c74
 8003338:	20000c60 	.word	0x20000c60
 800333c:	20000c58 	.word	0x20000c58

08003340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <vTaskSuspendAll+0x18>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a03      	ldr	r2, [pc, #12]	@ (8003358 <vTaskSuspendAll+0x18>)
 800334c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20000c7c 	.word	0x20000c7c

0800335c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800336a:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <xTaskResumeAll+0x118>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <xTaskResumeAll+0x2e>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	603b      	str	r3, [r7, #0]
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	e7fd      	b.n	8003386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800338a:	f001 fb35 	bl	80049f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <xTaskResumeAll+0x118>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3b01      	subs	r3, #1
 8003394:	4a37      	ldr	r2, [pc, #220]	@ (8003474 <xTaskResumeAll+0x118>)
 8003396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003398:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <xTaskResumeAll+0x118>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d162      	bne.n	8003466 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033a0:	4b35      	ldr	r3, [pc, #212]	@ (8003478 <xTaskResumeAll+0x11c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05e      	beq.n	8003466 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033a8:	e02f      	b.n	800340a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033aa:	4b34      	ldr	r3, [pc, #208]	@ (800347c <xTaskResumeAll+0x120>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3318      	adds	r3, #24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f85a 	bl	8002470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f855 	bl	8002470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <xTaskResumeAll+0x124>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <xTaskResumeAll+0x7e>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <xTaskResumeAll+0x124>)
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <xTaskResumeAll+0x128>)
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f7fe ffe0 	bl	80023b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fa:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <xTaskResumeAll+0x12c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003404:	4b21      	ldr	r3, [pc, #132]	@ (800348c <xTaskResumeAll+0x130>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800340a:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <xTaskResumeAll+0x120>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1cb      	bne.n	80033aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003418:	f000 fb6a 	bl	8003af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800341c:	4b1c      	ldr	r3, [pc, #112]	@ (8003490 <xTaskResumeAll+0x134>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003428:	f000 f858 	bl	80034dc <xTaskIncrementTick>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003432:	4b16      	ldr	r3, [pc, #88]	@ (800348c <xTaskResumeAll+0x130>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f1      	bne.n	8003428 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <xTaskResumeAll+0x134>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <xTaskResumeAll+0x130>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <xTaskResumeAll+0x138>)
 8003458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003466:	f001 faf9 	bl	8004a5c <vPortExitCritical>

	return xAlreadyYielded;
 800346a:	68bb      	ldr	r3, [r7, #8]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000c7c 	.word	0x20000c7c
 8003478:	20000c54 	.word	0x20000c54
 800347c:	20000c14 	.word	0x20000c14
 8003480:	20000c5c 	.word	0x20000c5c
 8003484:	20000784 	.word	0x20000784
 8003488:	20000780 	.word	0x20000780
 800348c:	20000c68 	.word	0x20000c68
 8003490:	20000c64 	.word	0x20000c64
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <xTaskGetTickCount+0x1c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034a4:	687b      	ldr	r3, [r7, #4]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000c58 	.word	0x20000c58

080034b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034be:	f001 fb7b 	bl	8004bb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <xTaskGetTickCountFromISR+0x20>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034cc:	683b      	ldr	r3, [r7, #0]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000c58 	.word	0x20000c58

080034dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003624 <xTaskIncrementTick+0x148>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8090 	bne.w	8003610 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <xTaskIncrementTick+0x14c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003628 <xTaskIncrementTick+0x14c>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d121      	bne.n	8003548 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003504:	4b49      	ldr	r3, [pc, #292]	@ (800362c <xTaskIncrementTick+0x150>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <xTaskIncrementTick+0x4a>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	603b      	str	r3, [r7, #0]
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <xTaskIncrementTick+0x46>
 8003526:	4b41      	ldr	r3, [pc, #260]	@ (800362c <xTaskIncrementTick+0x150>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <xTaskIncrementTick+0x154>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3e      	ldr	r2, [pc, #248]	@ (800362c <xTaskIncrementTick+0x150>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4a3e      	ldr	r2, [pc, #248]	@ (8003630 <xTaskIncrementTick+0x154>)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b3e      	ldr	r3, [pc, #248]	@ (8003634 <xTaskIncrementTick+0x158>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a3c      	ldr	r2, [pc, #240]	@ (8003634 <xTaskIncrementTick+0x158>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	f000 fad4 	bl	8003af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003548:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <xTaskIncrementTick+0x15c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d349      	bcc.n	80035e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003552:	4b36      	ldr	r3, [pc, #216]	@ (800362c <xTaskIncrementTick+0x150>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355c:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <xTaskIncrementTick+0x15c>)
 800355e:	f04f 32ff 	mov.w	r2, #4294967295
 8003562:	601a      	str	r2, [r3, #0]
					break;
 8003564:	e03f      	b.n	80035e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003566:	4b31      	ldr	r3, [pc, #196]	@ (800362c <xTaskIncrementTick+0x150>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d203      	bcs.n	8003586 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800357e:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <xTaskIncrementTick+0x15c>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003584:	e02f      	b.n	80035e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe ff70 	bl	8002470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3318      	adds	r3, #24
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe ff67 	bl	8002470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <xTaskIncrementTick+0x160>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d903      	bls.n	80035b6 <xTaskIncrementTick+0xda>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	4a22      	ldr	r2, [pc, #136]	@ (800363c <xTaskIncrementTick+0x160>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003640 <xTaskIncrementTick+0x164>)
 80035c4:	441a      	add	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f7fe fef2 	bl	80023b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <xTaskIncrementTick+0x168>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3b8      	bcc.n	8003552 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035e4:	e7b5      	b.n	8003552 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <xTaskIncrementTick+0x168>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ec:	4914      	ldr	r1, [pc, #80]	@ (8003640 <xTaskIncrementTick+0x164>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d901      	bls.n	8003602 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80035fe:	2301      	movs	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003602:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <xTaskIncrementTick+0x16c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800360a:	2301      	movs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e004      	b.n	800361a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003610:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <xTaskIncrementTick+0x170>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a0d      	ldr	r2, [pc, #52]	@ (800364c <xTaskIncrementTick+0x170>)
 8003618:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800361a:	697b      	ldr	r3, [r7, #20]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000c7c 	.word	0x20000c7c
 8003628:	20000c58 	.word	0x20000c58
 800362c:	20000c0c 	.word	0x20000c0c
 8003630:	20000c10 	.word	0x20000c10
 8003634:	20000c6c 	.word	0x20000c6c
 8003638:	20000c74 	.word	0x20000c74
 800363c:	20000c5c 	.word	0x20000c5c
 8003640:	20000784 	.word	0x20000784
 8003644:	20000780 	.word	0x20000780
 8003648:	20000c68 	.word	0x20000c68
 800364c:	20000c64 	.word	0x20000c64

08003650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003656:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <vTaskSwitchContext+0xa8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <vTaskSwitchContext+0xac>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003664:	e042      	b.n	80036ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <vTaskSwitchContext+0xac>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366c:	4b24      	ldr	r3, [pc, #144]	@ (8003700 <vTaskSwitchContext+0xb0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e011      	b.n	8003698 <vTaskSwitchContext+0x48>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <vTaskSwitchContext+0x42>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	607b      	str	r3, [r7, #4]
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <vTaskSwitchContext+0x3e>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	491a      	ldr	r1, [pc, #104]	@ (8003704 <vTaskSwitchContext+0xb4>)
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0e3      	beq.n	8003674 <vTaskSwitchContext+0x24>
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <vTaskSwitchContext+0xb4>)
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3308      	adds	r3, #8
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d104      	bne.n	80036dc <vTaskSwitchContext+0x8c>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <vTaskSwitchContext+0xb8>)
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4a06      	ldr	r2, [pc, #24]	@ (8003700 <vTaskSwitchContext+0xb0>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	20000c7c 	.word	0x20000c7c
 80036fc:	20000c68 	.word	0x20000c68
 8003700:	20000c5c 	.word	0x20000c5c
 8003704:	20000784 	.word	0x20000784
 8003708:	20000780 	.word	0x20000780

0800370c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	60fb      	str	r3, [r7, #12]
}
 800372e:	bf00      	nop
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003734:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <vTaskPlaceOnEventList+0x48>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3318      	adds	r3, #24
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fe fe5e 	bl	80023fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003742:	2101      	movs	r1, #1
 8003744:	6838      	ldr	r0, [r7, #0]
 8003746:	f000 fc75 	bl	8004034 <prvAddCurrentTaskToDelayedList>
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000780 	.word	0x20000780

08003758 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	617b      	str	r3, [r7, #20]
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <vTaskPlaceOnEventListRestricted+0x54>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3318      	adds	r3, #24
 8003788:	4619      	mov	r1, r3
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7fe fe13 	bl	80023b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	68b8      	ldr	r0, [r7, #8]
 80037a0:	f000 fc48 	bl	8004034 <prvAddCurrentTaskToDelayedList>
	}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000780 	.word	0x20000780

080037b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	60fb      	str	r3, [r7, #12]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3318      	adds	r3, #24
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fe44 	bl	8002470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <xTaskRemoveFromEventList+0xb0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11d      	bne.n	800382c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fe3b 	bl	8002470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <xTaskRemoveFromEventList+0xb4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d903      	bls.n	800380e <xTaskRemoveFromEventList+0x5e>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	4a16      	ldr	r2, [pc, #88]	@ (8003864 <xTaskRemoveFromEventList+0xb4>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4a13      	ldr	r2, [pc, #76]	@ (8003868 <xTaskRemoveFromEventList+0xb8>)
 800381c:	441a      	add	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe fdc6 	bl	80023b6 <vListInsertEnd>
 800382a:	e005      	b.n	8003838 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3318      	adds	r3, #24
 8003830:	4619      	mov	r1, r3
 8003832:	480e      	ldr	r0, [pc, #56]	@ (800386c <xTaskRemoveFromEventList+0xbc>)
 8003834:	f7fe fdbf 	bl	80023b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <xTaskRemoveFromEventList+0xc0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	429a      	cmp	r2, r3
 8003844:	d905      	bls.n	8003852 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <xTaskRemoveFromEventList+0xc4>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e001      	b.n	8003856 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000c7c 	.word	0x20000c7c
 8003864:	20000c5c 	.word	0x20000c5c
 8003868:	20000784 	.word	0x20000784
 800386c:	20000c14 	.word	0x20000c14
 8003870:	20000780 	.word	0x20000780
 8003874:	20000c68 	.word	0x20000c68

08003878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <vTaskInternalSetTimeOutState+0x24>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <vTaskInternalSetTimeOutState+0x28>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	605a      	str	r2, [r3, #4]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	20000c6c 	.word	0x20000c6c
 80038a0:	20000c58 	.word	0x20000c58

080038a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	613b      	str	r3, [r7, #16]
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	e7fd      	b.n	80038e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80038ea:	f001 f885 	bl	80049f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <xTaskCheckForTimeOut+0xc0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d102      	bne.n	800390e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	e023      	b.n	8003956 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <xTaskCheckForTimeOut+0xc4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d007      	beq.n	800392a <xTaskCheckForTimeOut+0x86>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	e015      	b.n	8003956 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d20b      	bcs.n	800394c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff99 	bl	8003878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	e004      	b.n	8003956 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003952:	2301      	movs	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003956:	f001 f881 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 800395a:	69fb      	ldr	r3, [r7, #28]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000c58 	.word	0x20000c58
 8003968:	20000c6c 	.word	0x20000c6c

0800396c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <vTaskMissedYield+0x14>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000c68 	.word	0x20000c68

08003984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800398c:	f000 f852 	bl	8003a34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <prvIdleTask+0x28>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d9f9      	bls.n	800398c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <prvIdleTask+0x2c>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039a8:	e7f0      	b.n	800398c <prvIdleTask+0x8>
 80039aa:	bf00      	nop
 80039ac:	20000784 	.word	0x20000784
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	e00c      	b.n	80039da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a12      	ldr	r2, [pc, #72]	@ (8003a14 <prvInitialiseTaskLists+0x60>)
 80039cc:	4413      	add	r3, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fcc4 	bl	800235c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3301      	adds	r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b37      	cmp	r3, #55	@ 0x37
 80039de:	d9ef      	bls.n	80039c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039e0:	480d      	ldr	r0, [pc, #52]	@ (8003a18 <prvInitialiseTaskLists+0x64>)
 80039e2:	f7fe fcbb 	bl	800235c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039e6:	480d      	ldr	r0, [pc, #52]	@ (8003a1c <prvInitialiseTaskLists+0x68>)
 80039e8:	f7fe fcb8 	bl	800235c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039ec:	480c      	ldr	r0, [pc, #48]	@ (8003a20 <prvInitialiseTaskLists+0x6c>)
 80039ee:	f7fe fcb5 	bl	800235c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039f2:	480c      	ldr	r0, [pc, #48]	@ (8003a24 <prvInitialiseTaskLists+0x70>)
 80039f4:	f7fe fcb2 	bl	800235c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039f8:	480b      	ldr	r0, [pc, #44]	@ (8003a28 <prvInitialiseTaskLists+0x74>)
 80039fa:	f7fe fcaf 	bl	800235c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <prvInitialiseTaskLists+0x78>)
 8003a00:	4a05      	ldr	r2, [pc, #20]	@ (8003a18 <prvInitialiseTaskLists+0x64>)
 8003a02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <prvInitialiseTaskLists+0x7c>)
 8003a06:	4a05      	ldr	r2, [pc, #20]	@ (8003a1c <prvInitialiseTaskLists+0x68>)
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000784 	.word	0x20000784
 8003a18:	20000be4 	.word	0x20000be4
 8003a1c:	20000bf8 	.word	0x20000bf8
 8003a20:	20000c14 	.word	0x20000c14
 8003a24:	20000c28 	.word	0x20000c28
 8003a28:	20000c40 	.word	0x20000c40
 8003a2c:	20000c0c 	.word	0x20000c0c
 8003a30:	20000c10 	.word	0x20000c10

08003a34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a3a:	e019      	b.n	8003a70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a3c:	f000 ffdc 	bl	80049f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <prvCheckTasksWaitingTermination+0x50>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fd0f 	bl	8002470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a52:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <prvCheckTasksWaitingTermination+0x54>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	4a0b      	ldr	r2, [pc, #44]	@ (8003a88 <prvCheckTasksWaitingTermination+0x54>)
 8003a5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <prvCheckTasksWaitingTermination+0x58>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <prvCheckTasksWaitingTermination+0x58>)
 8003a64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a66:	f000 fff9 	bl	8004a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f810 	bl	8003a90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <prvCheckTasksWaitingTermination+0x58>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e1      	bne.n	8003a3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000c28 	.word	0x20000c28
 8003a88:	20000c54 	.word	0x20000c54
 8003a8c:	20000c3c 	.word	0x20000c3c

08003a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 f996 	bl	8004dd8 <vPortFree>
				vPortFree( pxTCB );
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 f993 	bl	8004dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ab2:	e019      	b.n	8003ae8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d103      	bne.n	8003ac6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f001 f98a 	bl	8004dd8 <vPortFree>
	}
 8003ac4:	e010      	b.n	8003ae8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d00b      	beq.n	8003ae8 <prvDeleteTCB+0x58>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60fb      	str	r3, [r7, #12]
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <prvDeleteTCB+0x54>
	}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <prvResetNextTaskUnblockTime+0x38>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <prvResetNextTaskUnblockTime+0x3c>)
 8003b02:	f04f 32ff 	mov.w	r2, #4294967295
 8003b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b08:	e008      	b.n	8003b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <prvResetNextTaskUnblockTime+0x38>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <prvResetNextTaskUnblockTime+0x3c>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000c0c 	.word	0x20000c0c
 8003b2c:	20000c74 	.word	0x20000c74

08003b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <xTaskGetSchedulerState+0x34>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e008      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b44:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <xTaskGetSchedulerState+0x38>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	e001      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b56:	687b      	ldr	r3, [r7, #4]
	}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	20000c60 	.word	0x20000c60
 8003b68:	20000c7c 	.word	0x20000c7c

08003b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d058      	beq.n	8003c34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b82:	4b2f      	ldr	r3, [pc, #188]	@ (8003c40 <xTaskPriorityDisinherit+0xd4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d00b      	beq.n	8003ba4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	60fb      	str	r3, [r7, #12]
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	60bb      	str	r3, [r7, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d02c      	beq.n	8003c34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d128      	bne.n	8003c34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fc42 	bl	8002470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <xTaskPriorityDisinherit+0xd8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d903      	bls.n	8003c14 <xTaskPriorityDisinherit+0xa8>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4a0c      	ldr	r2, [pc, #48]	@ (8003c44 <xTaskPriorityDisinherit+0xd8>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <xTaskPriorityDisinherit+0xdc>)
 8003c22:	441a      	add	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7fe fbc3 	bl	80023b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c34:	697b      	ldr	r3, [r7, #20]
	}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000780 	.word	0x20000780
 8003c44:	20000c5c 	.word	0x20000c5c
 8003c48:	20000784 	.word	0x20000784

08003c4c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003c5a:	f000 fecd 	bl	80049f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d01a      	beq.n	8003ca2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003c6c:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	43d2      	mvns	r2, r2
 8003c76:	400a      	ands	r2, r1
 8003c78:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	6838      	ldr	r0, [r7, #0]
 8003c8e:	f000 f9d1 	bl	8004034 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <xTaskNotifyWait+0xb0>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003ca2:	f000 fedb 	bl	8004a5c <vPortExitCritical>

		taskENTER_CRITICAL();
 8003ca6:	f000 fea7 	bl	80049f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003cb0:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d002      	beq.n	8003cce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e008      	b.n	8003ce0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	43d2      	mvns	r2, r2
 8003cd8:	400a      	ands	r2, r1
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <xTaskNotifyWait+0xac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8003cea:	f000 feb7 	bl	8004a5c <vPortExitCritical>

		return xReturn;
 8003cee:	697b      	ldr	r3, [r7, #20]
	}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000780 	.word	0x20000780
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <xTaskGenericNotify+0x32>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	61bb      	str	r3, [r7, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003d36:	f000 fe5f 	bl	80049f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d4e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d827      	bhi.n	8003dae <xTaskGenericNotify+0xae>
 8003d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <xTaskGenericNotify+0x64>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003dd1 	.word	0x08003dd1
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d87 	.word	0x08003d87
 8003d70:	08003d93 	.word	0x08003d93
 8003d74:	08003d9b 	.word	0x08003d9b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003d84:	e027      	b.n	8003dd6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003d90:	e021      	b.n	8003dd6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003d98:	e01d      	b.n	8003dd6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d003      	beq.n	8003da8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003da6:	e016      	b.n	8003dd6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003dac:	e013      	b.n	8003dd6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d00d      	beq.n	8003dd4 <xTaskGenericNotify+0xd4>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	617b      	str	r3, [r7, #20]
}
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <xTaskGenericNotify+0xcc>
					break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <xTaskGenericNotify+0xd6>

					break;
 8003dd4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d13b      	bne.n	8003e54 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fb45 	bl	8002470 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dea:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <xTaskGenericNotify+0x164>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d903      	bls.n	8003dfa <xTaskGenericNotify+0xfa>
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <xTaskGenericNotify+0x164>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <xTaskGenericNotify+0x168>)
 8003e08:	441a      	add	r2, r3
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4610      	mov	r0, r2
 8003e12:	f7fe fad0 	bl	80023b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <xTaskGenericNotify+0x136>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	613b      	str	r3, [r7, #16]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <xTaskGenericNotify+0x16c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d907      	bls.n	8003e54 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003e44:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <xTaskGenericNotify+0x170>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003e54:	f000 fe02 	bl	8004a5c <vPortExitCritical>

		return xReturn;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3728      	adds	r7, #40	@ 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000c5c 	.word	0x20000c5c
 8003e68:	20000784 	.word	0x20000784
 8003e6c:	20000780 	.word	0x20000780
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	@ 0x38
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003e84:	2301      	movs	r3, #1
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ea6:	f000 fe87 	bl	8004bb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8003eae:	f3ef 8211 	mrs	r2, BASEPRI
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	623a      	str	r2, [r7, #32]
 8003ec4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8003ec6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d829      	bhi.n	8003f44 <xTaskGenericNotifyFromISR+0xd0>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <xTaskGenericNotifyFromISR+0x84>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f67 	.word	0x08003f67
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f1b 	.word	0x08003f1b
 8003f04:	08003f27 	.word	0x08003f27
 8003f08:	08003f2f 	.word	0x08003f2f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003f18:	e028      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003f24:	e022      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8003f2c:	e01e      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d003      	beq.n	8003f3e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003f3c:	e016      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8003f42:	e013      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d00d      	beq.n	8003f6a <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61bb      	str	r3, [r7, #24]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <xTaskGenericNotifyFromISR+0xee>
					break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <xTaskGenericNotifyFromISR+0xf8>
					break;
 8003f6a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d147      	bne.n	8004004 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	617b      	str	r3, [r7, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f94:	4b21      	ldr	r3, [pc, #132]	@ (800401c <xTaskGenericNotifyFromISR+0x1a8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fa65 	bl	8002470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <xTaskGenericNotifyFromISR+0x1ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d903      	bls.n	8003fba <xTaskGenericNotifyFromISR+0x146>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <xTaskGenericNotifyFromISR+0x1ac>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a17      	ldr	r2, [pc, #92]	@ (8004024 <xTaskGenericNotifyFromISR+0x1b0>)
 8003fc8:	441a      	add	r2, r3
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fe f9f0 	bl	80023b6 <vListInsertEnd>
 8003fd6:	e005      	b.n	8003fe4 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	3318      	adds	r3, #24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4812      	ldr	r0, [pc, #72]	@ (8004028 <xTaskGenericNotifyFromISR+0x1b4>)
 8003fe0:	f7fe f9e9 	bl	80023b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe8:	4b10      	ldr	r3, [pc, #64]	@ (800402c <xTaskGenericNotifyFromISR+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d908      	bls.n	8004004 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <xTaskGenericNotifyFromISR+0x1bc>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f383 8811 	msr	BASEPRI, r3
}
 800400e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	@ 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000c7c 	.word	0x20000c7c
 8004020:	20000c5c 	.word	0x20000c5c
 8004024:	20000784 	.word	0x20000784
 8004028:	20000c14 	.word	0x20000c14
 800402c:	20000780 	.word	0x20000780
 8004030:	20000c68 	.word	0x20000c68

08004034 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800403e:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004044:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fa10 	bl	8002470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d10a      	bne.n	800406e <prvAddCurrentTaskToDelayedList+0x3a>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405e:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4819      	ldr	r0, [pc, #100]	@ (80040cc <prvAddCurrentTaskToDelayedList+0x98>)
 8004068:	f7fe f9a5 	bl	80023b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800406c:	e026      	b.n	80040bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004076:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	429a      	cmp	r2, r3
 8004084:	d209      	bcs.n	800409a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004086:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b0f      	ldr	r3, [pc, #60]	@ (80040c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f7fe f9b3 	bl	80023fe <vListInsert>
}
 8004098:	e010      	b.n	80040bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7fe f9a9 	bl	80023fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d202      	bcs.n	80040bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040b6:	4a08      	ldr	r2, [pc, #32]	@ (80040d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000c58 	.word	0x20000c58
 80040c8:	20000780 	.word	0x20000780
 80040cc:	20000c40 	.word	0x20000c40
 80040d0:	20000c10 	.word	0x20000c10
 80040d4:	20000c0c 	.word	0x20000c0c
 80040d8:	20000c74 	.word	0x20000c74

080040dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040e6:	f000 fb13 	bl	8004710 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <xTimerCreateTimerTask+0x84>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d021      	beq.n	8004136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040fa:	1d3a      	adds	r2, r7, #4
 80040fc:	f107 0108 	add.w	r1, r7, #8
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f90f 	bl	8002328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	9202      	str	r2, [sp, #8]
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	2302      	movs	r3, #2
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2300      	movs	r3, #0
 800411a:	460a      	mov	r2, r1
 800411c:	4911      	ldr	r1, [pc, #68]	@ (8004164 <xTimerCreateTimerTask+0x88>)
 800411e:	4812      	ldr	r0, [pc, #72]	@ (8004168 <xTimerCreateTimerTask+0x8c>)
 8004120:	f7fe feca 	bl	8002eb8 <xTaskCreateStatic>
 8004124:	4603      	mov	r3, r0
 8004126:	4a11      	ldr	r2, [pc, #68]	@ (800416c <xTimerCreateTimerTask+0x90>)
 8004128:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <xTimerCreateTimerTask+0x90>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004154:	697b      	ldr	r3, [r7, #20]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000cb0 	.word	0x20000cb0
 8004164:	080050d0 	.word	0x080050d0
 8004168:	080042a9 	.word	0x080042a9
 800416c:	20000cb4 	.word	0x20000cb4

08004170 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	623b      	str	r3, [r7, #32]
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <xTimerGenericCommand+0x98>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02a      	beq.n	80041fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	dc18      	bgt.n	80041ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041ba:	f7ff fcb9 	bl	8003b30 <xTaskGetSchedulerState>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d109      	bne.n	80041d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041c4:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <xTimerGenericCommand+0x98>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	f107 0110 	add.w	r1, r7, #16
 80041cc:	2300      	movs	r3, #0
 80041ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d0:	f7fe fa82 	bl	80026d8 <xQueueGenericSend>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80041d6:	e012      	b.n	80041fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <xTimerGenericCommand+0x98>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	f107 0110 	add.w	r1, r7, #16
 80041e0:	2300      	movs	r3, #0
 80041e2:	2200      	movs	r2, #0
 80041e4:	f7fe fa78 	bl	80026d8 <xQueueGenericSend>
 80041e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80041ea:	e008      	b.n	80041fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <xTimerGenericCommand+0x98>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	f107 0110 	add.w	r1, r7, #16
 80041f4:	2300      	movs	r3, #0
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	f7fe fb70 	bl	80028dc <xQueueGenericSendFromISR>
 80041fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	@ 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000cb0 	.word	0x20000cb0

0800420c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <prvProcessExpiredTimer+0x98>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f923 	bl	8002470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d023      	beq.n	8004280 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	18d1      	adds	r1, r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f000 f8d5 	bl	80043f4 <prvInsertTimerInActiveList>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	2100      	movs	r1, #0
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff88 	bl	8004170 <xTimerGenericCommand>
 8004260:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d114      	bne.n	8004292 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	60fb      	str	r3, [r7, #12]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	b2da      	uxtb	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	4798      	blx	r3
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000ca8 	.word	0x20000ca8

080042a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 f859 	bl	800436c <prvGetNextExpireTime>
 80042ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f805 	bl	80042d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042c6:	f000 f8d7 	bl	8004478 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ca:	bf00      	nop
 80042cc:	e7f0      	b.n	80042b0 <prvTimerTask+0x8>
	...

080042d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042da:	f7ff f831 	bl	8003340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f866 	bl	80043b4 <prvSampleTimeNow>
 80042e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d130      	bne.n	8004352 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <prvProcessTimerOrBlockTask+0x3c>
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d806      	bhi.n	800430c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042fe:	f7ff f82d 	bl	800335c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff81 	bl	800420c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800430a:	e024      	b.n	8004356 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004312:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <prvProcessTimerOrBlockTask+0x90>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <prvProcessTimerOrBlockTask+0x50>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <prvProcessTimerOrBlockTask+0x52>
 8004320:	2300      	movs	r3, #0
 8004322:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <prvProcessTimerOrBlockTask+0x94>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f7fe fd8d 	bl	8002e50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004336:	f7ff f811 	bl	800335c <xTaskResumeAll>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <prvProcessTimerOrBlockTask+0x98>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
}
 8004350:	e001      	b.n	8004356 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004352:	f7ff f803 	bl	800335c <xTaskResumeAll>
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000cac 	.word	0x20000cac
 8004364:	20000cb0 	.word	0x20000cb0
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004374:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <prvGetNextExpireTime+0x44>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <prvGetNextExpireTime+0x16>
 800437e:	2201      	movs	r2, #1
 8004380:	e000      	b.n	8004384 <prvGetNextExpireTime+0x18>
 8004382:	2200      	movs	r2, #0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <prvGetNextExpireTime+0x44>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e001      	b.n	80043a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000ca8 	.word	0x20000ca8

080043b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043bc:	f7ff f86c 	bl	8003498 <xTaskGetTickCount>
 80043c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <prvSampleTimeNow+0x3c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d205      	bcs.n	80043d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043cc:	f000 f93a 	bl	8004644 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e002      	b.n	80043de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043de:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <prvSampleTimeNow+0x3c>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043e4:	68fb      	ldr	r3, [r7, #12]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000cb8 	.word	0x20000cb8

080043f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d812      	bhi.n	8004440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e01b      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <prvInsertTimerInActiveList+0x7c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fd ffe0 	bl	80023fe <vListInsert>
 800443e:	e012      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d206      	bcs.n	8004456 <prvInsertTimerInActiveList+0x62>
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e007      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004456:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <prvInsertTimerInActiveList+0x80>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fd ffcc 	bl	80023fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004466:	697b      	ldr	r3, [r7, #20]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000cac 	.word	0x20000cac
 8004474:	20000ca8 	.word	0x20000ca8

08004478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08e      	sub	sp, #56	@ 0x38
 800447c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800447e:	e0ce      	b.n	800461e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da19      	bge.n	80044ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004486:	1d3b      	adds	r3, r7, #4
 8004488:	3304      	adds	r3, #4
 800448a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	61fb      	str	r3, [r7, #28]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b0:	6850      	ldr	r0, [r2, #4]
 80044b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b4:	6892      	ldr	r2, [r2, #8]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f2c0 80ae 	blt.w	800461e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd ffcc 	bl	8002470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044d8:	463b      	mov	r3, r7
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff6a 	bl	80043b4 <prvSampleTimeNow>
 80044e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b09      	cmp	r3, #9
 80044e6:	f200 8097 	bhi.w	8004618 <prvProcessReceivedCommands+0x1a0>
 80044ea:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <prvProcessReceivedCommands+0x78>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004519 	.word	0x08004519
 80044fc:	0800458f 	.word	0x0800458f
 8004500:	080045a3 	.word	0x080045a3
 8004504:	080045ef 	.word	0x080045ef
 8004508:	08004519 	.word	0x08004519
 800450c:	08004519 	.word	0x08004519
 8004510:	0800458f 	.word	0x0800458f
 8004514:	080045a3 	.word	0x080045a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	18d1      	adds	r1, r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004538:	f7ff ff5c 	bl	80043f4 <prvInsertTimerInActiveList>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d06c      	beq.n	800461c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d061      	beq.n	800461c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	441a      	add	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	2100      	movs	r1, #0
 8004568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800456a:	f7ff fe01 	bl	8004170 <xTimerGenericCommand>
 800456e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d152      	bne.n	800461c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61bb      	str	r3, [r7, #24]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80045a0:	e03d      	b.n	800461e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	617b      	str	r3, [r7, #20]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	18d1      	adds	r1, r2, r3
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e8:	f7ff ff04 	bl	80043f4 <prvInsertTimerInActiveList>
					break;
 80045ec:	e017      	b.n	800461e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80045fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045fe:	f000 fbeb 	bl	8004dd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004602:	e00c      	b.n	800461e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004616:	e002      	b.n	800461e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <prvProcessReceivedCommands+0x1a6>
					break;
 800461c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800461e:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <prvProcessReceivedCommands+0x1c8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	1d39      	adds	r1, r7, #4
 8004624:	2200      	movs	r2, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f9f6 	bl	8002a18 <xQueueReceive>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	f47f af26 	bne.w	8004480 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3730      	adds	r7, #48	@ 0x30
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000cb0 	.word	0x20000cb0

08004644 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800464a:	e049      	b.n	80046e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800464c:	4b2e      	ldr	r3, [pc, #184]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004656:	4b2c      	ldr	r3, [pc, #176]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3304      	adds	r3, #4
 8004664:	4618      	mov	r0, r3
 8004666:	f7fd ff03 	bl	8002470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02f      	beq.n	80046e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90e      	bls.n	80046b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800469e:	4b1a      	ldr	r3, [pc, #104]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fd fea8 	bl	80023fe <vListInsert>
 80046ae:	e017      	b.n	80046e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	2100      	movs	r1, #0
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fd58 	bl	8004170 <xTimerGenericCommand>
 80046c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	603b      	str	r3, [r7, #0]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1b0      	bne.n	800464c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046ea:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <prvSwitchTimerLists+0xc8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <prvSwitchTimerLists+0xc4>)
 80046f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046f8:	4a04      	ldr	r2, [pc, #16]	@ (800470c <prvSwitchTimerLists+0xc8>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000ca8 	.word	0x20000ca8
 800470c:	20000cac 	.word	0x20000cac

08004710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004716:	f000 f96f 	bl	80049f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <prvCheckForValidListAndQueue+0x60>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d120      	bne.n	8004764 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004722:	4814      	ldr	r0, [pc, #80]	@ (8004774 <prvCheckForValidListAndQueue+0x64>)
 8004724:	f7fd fe1a 	bl	800235c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004728:	4813      	ldr	r0, [pc, #76]	@ (8004778 <prvCheckForValidListAndQueue+0x68>)
 800472a:	f7fd fe17 	bl	800235c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800472e:	4b13      	ldr	r3, [pc, #76]	@ (800477c <prvCheckForValidListAndQueue+0x6c>)
 8004730:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <prvCheckForValidListAndQueue+0x64>)
 8004732:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004734:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <prvCheckForValidListAndQueue+0x70>)
 8004736:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <prvCheckForValidListAndQueue+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800473a:	2300      	movs	r3, #0
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <prvCheckForValidListAndQueue+0x74>)
 8004740:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <prvCheckForValidListAndQueue+0x78>)
 8004742:	2110      	movs	r1, #16
 8004744:	200a      	movs	r0, #10
 8004746:	f7fd ff27 	bl	8002598 <xQueueGenericCreateStatic>
 800474a:	4603      	mov	r3, r0
 800474c:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <prvCheckForValidListAndQueue+0x60>)
 800474e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <prvCheckForValidListAndQueue+0x60>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <prvCheckForValidListAndQueue+0x60>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	490b      	ldr	r1, [pc, #44]	@ (800478c <prvCheckForValidListAndQueue+0x7c>)
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fb4c 	bl	8002dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004764:	f000 f97a 	bl	8004a5c <vPortExitCritical>
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000cb0 	.word	0x20000cb0
 8004774:	20000c80 	.word	0x20000c80
 8004778:	20000c94 	.word	0x20000c94
 800477c:	20000ca8 	.word	0x20000ca8
 8004780:	20000cac 	.word	0x20000cac
 8004784:	20000d5c 	.word	0x20000d5c
 8004788:	20000cbc 	.word	0x20000cbc
 800478c:	080050d8 	.word	0x080050d8

08004790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3b04      	subs	r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3b04      	subs	r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b04      	subs	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047c0:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <pxPortInitialiseStack+0x64>)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b14      	subs	r3, #20
 80047ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b04      	subs	r3, #4
 80047d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f06f 0202 	mvn.w	r2, #2
 80047de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3b20      	subs	r3, #32
 80047e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	080047f9 	.word	0x080047f9

080047f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004802:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <prvTaskExitError+0x58>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d00b      	beq.n	8004824 <prvTaskExitError+0x2c>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	60fb      	str	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <prvTaskExitError+0x28>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60bb      	str	r3, [r7, #8]
}
 8004836:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004838:	bf00      	nop
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0fc      	beq.n	800483a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c
	...

08004860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <pxCurrentTCBConst2>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	f380 8809 	msr	PSP, r0
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8811 	msr	BASEPRI, r0
 800487a:	4770      	bx	lr
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst2>:
 8004880:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004888:	4808      	ldr	r0, [pc, #32]	@ (80048ac <prvPortStartFirstTask+0x24>)
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f380 8808 	msr	MSP, r0
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8814 	msr	CONTROL, r0
 800489a:	b662      	cpsie	i
 800489c:	b661      	cpsie	f
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	df00      	svc	0
 80048a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048aa:	bf00      	nop
 80048ac:	e000ed08 	.word	0xe000ed08

080048b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048b6:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <xPortStartScheduler+0x124>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a47      	ldr	r2, [pc, #284]	@ (80049d8 <xPortStartScheduler+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10b      	bne.n	80048d8 <xPortStartScheduler+0x28>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048d8:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <xPortStartScheduler+0x124>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3f      	ldr	r2, [pc, #252]	@ (80049dc <xPortStartScheduler+0x12c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10b      	bne.n	80048fa <xPortStartScheduler+0x4a>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	613b      	str	r3, [r7, #16]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <xPortStartScheduler+0x130>)
 80048fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	22ff      	movs	r2, #255	@ 0xff
 800490a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800491c:	b2da      	uxtb	r2, r3
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <xPortStartScheduler+0x134>)
 8004920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004922:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <xPortStartScheduler+0x138>)
 8004924:	2207      	movs	r2, #7
 8004926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004928:	e009      	b.n	800493e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800492a:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <xPortStartScheduler+0x138>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3b01      	subs	r3, #1
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <xPortStartScheduler+0x138>)
 8004932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b80      	cmp	r3, #128	@ 0x80
 8004948:	d0ef      	beq.n	800492a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800494a:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <xPortStartScheduler+0x138>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	d00b      	beq.n	800496e <xPortStartScheduler+0xbe>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60bb      	str	r3, [r7, #8]
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800496e:	4b1e      	ldr	r3, [pc, #120]	@ (80049e8 <xPortStartScheduler+0x138>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	4a1c      	ldr	r2, [pc, #112]	@ (80049e8 <xPortStartScheduler+0x138>)
 8004976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004978:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <xPortStartScheduler+0x138>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <xPortStartScheduler+0x138>)
 8004982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800498c:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <xPortStartScheduler+0x13c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <xPortStartScheduler+0x13c>)
 8004992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <xPortStartScheduler+0x13c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	@ (80049ec <xPortStartScheduler+0x13c>)
 800499e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049a4:	f000 f8da 	bl	8004b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049a8:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <xPortStartScheduler+0x140>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049ae:	f000 f8f9 	bl	8004ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <xPortStartScheduler+0x144>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a0f      	ldr	r2, [pc, #60]	@ (80049f4 <xPortStartScheduler+0x144>)
 80049b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049be:	f7ff ff63 	bl	8004888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049c2:	f7fe fe45 	bl	8003650 <vTaskSwitchContext>
	prvTaskExitError();
 80049c6:	f7ff ff17 	bl	80047f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000ed00 	.word	0xe000ed00
 80049d8:	410fc271 	.word	0x410fc271
 80049dc:	410fc270 	.word	0x410fc270
 80049e0:	e000e400 	.word	0xe000e400
 80049e4:	20000dac 	.word	0x20000dac
 80049e8:	20000db0 	.word	0x20000db0
 80049ec:	e000ed20 	.word	0xe000ed20
 80049f0:	2000000c 	.word	0x2000000c
 80049f4:	e000ef34 	.word	0xe000ef34

080049f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <vPortEnterCritical+0x5c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	4a0e      	ldr	r2, [pc, #56]	@ (8004a54 <vPortEnterCritical+0x5c>)
 8004a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <vPortEnterCritical+0x5c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d110      	bne.n	8004a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <vPortEnterCritical+0x60>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	603b      	str	r3, [r7, #0]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <vPortEnterCritical+0x4a>
	}
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <vPortExitCritical+0x50>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <vPortExitCritical+0x26>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	607b      	str	r3, [r7, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <vPortExitCritical+0x50>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <vPortExitCritical+0x50>)
 8004a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <vPortExitCritical+0x50>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <vPortExitCritical+0x44>
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f383 8811 	msr	BASEPRI, r3
}
 8004a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f01e 0f10 	tst.w	lr, #16
 8004ac0:	bf08      	it	eq
 8004ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ad4:	f380 8811 	msr	BASEPRI, r0
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f7fe fdb6 	bl	8003650 <vTaskSwitchContext>
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f380 8811 	msr	BASEPRI, r0
 8004aec:	bc09      	pop	{r0, r3}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af6:	f01e 0f10 	tst.w	lr, #16
 8004afa:	bf08      	it	eq
 8004afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b00:	f380 8809 	msr	PSP, r0
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst>:
 8004b10:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b32:	f7fe fcd3 	bl	80034dc <xTaskIncrementTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b3c:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <xPortSysTickHandler+0x40>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
}
 8004b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <vPortSetupTimerInterrupt+0x38>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <vPortSetupTimerInterrupt+0x3c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <vPortSetupTimerInterrupt+0x40>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	4a09      	ldr	r2, [pc, #36]	@ (8004ba0 <vPortSetupTimerInterrupt+0x44>)
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b7e:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000e010 	.word	0xe000e010
 8004b94:	e000e018 	.word	0xe000e018
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	10624dd3 	.word	0x10624dd3
 8004ba0:	e000e014 	.word	0xe000e014

08004ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bb4 <vPortEnableVFP+0x10>
 8004ba8:	6801      	ldr	r1, [r0, #0]
 8004baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bae:	6001      	str	r1, [r0, #0]
 8004bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed88 	.word	0xe000ed88

08004bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d915      	bls.n	8004bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bca:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <vPortValidateInterruptPriority+0x74>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bd4:	4b16      	ldr	r3, [pc, #88]	@ (8004c30 <vPortValidateInterruptPriority+0x78>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	7afa      	ldrb	r2, [r7, #11]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20b      	bcs.n	8004bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	607b      	str	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c34 <vPortValidateInterruptPriority+0x7c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <vPortValidateInterruptPriority+0x80>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90b      	bls.n	8004c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	603b      	str	r3, [r7, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <vPortValidateInterruptPriority+0x62>
	}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e3f0 	.word	0xe000e3f0
 8004c30:	20000dac 	.word	0x20000dac
 8004c34:	e000ed0c 	.word	0xe000ed0c
 8004c38:	20000db0 	.word	0x20000db0

08004c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	@ 0x28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c48:	f7fe fb7a 	bl	8003340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc0 <pvPortMalloc+0x184>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c54:	f000 f924 	bl	8004ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c58:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc4 <pvPortMalloc+0x188>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 8095 	bne.w	8004d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01e      	beq.n	8004caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d015      	beq.n	8004caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f023 0307 	bic.w	r3, r3, #7
 8004c84:	3308      	adds	r3, #8
 8004c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <pvPortMalloc+0x6e>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	617b      	str	r3, [r7, #20]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d06f      	beq.n	8004d90 <pvPortMalloc+0x154>
 8004cb0:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <pvPortMalloc+0x18c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d86a      	bhi.n	8004d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cba:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <pvPortMalloc+0x190>)
 8004cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cbe:	4b43      	ldr	r3, [pc, #268]	@ (8004dcc <pvPortMalloc+0x190>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cc4:	e004      	b.n	8004cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d903      	bls.n	8004ce2 <pvPortMalloc+0xa6>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f1      	bne.n	8004cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ce2:	4b37      	ldr	r3, [pc, #220]	@ (8004dc0 <pvPortMalloc+0x184>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d051      	beq.n	8004d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4413      	add	r3, r2
 8004cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	1ad2      	subs	r2, r2, r3
 8004d06:	2308      	movs	r3, #8
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d920      	bls.n	8004d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <pvPortMalloc+0xfc>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	613b      	str	r3, [r7, #16]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1ad2      	subs	r2, r2, r3
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d4a:	69b8      	ldr	r0, [r7, #24]
 8004d4c:	f000 f90a 	bl	8004f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc8 <pvPortMalloc+0x18c>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <pvPortMalloc+0x18c>)
 8004d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc8 <pvPortMalloc+0x18c>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <pvPortMalloc+0x194>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d203      	bcs.n	8004d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d6a:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <pvPortMalloc+0x18c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <pvPortMalloc+0x194>)
 8004d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <pvPortMalloc+0x188>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d86:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <pvPortMalloc+0x198>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	4a11      	ldr	r2, [pc, #68]	@ (8004dd4 <pvPortMalloc+0x198>)
 8004d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d90:	f7fe fae4 	bl	800335c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <pvPortMalloc+0x17a>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <pvPortMalloc+0x176>
	return pvReturn;
 8004db6:	69fb      	ldr	r3, [r7, #28]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	@ 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200049bc 	.word	0x200049bc
 8004dc4:	200049d0 	.word	0x200049d0
 8004dc8:	200049c0 	.word	0x200049c0
 8004dcc:	200049b4 	.word	0x200049b4
 8004dd0:	200049c4 	.word	0x200049c4
 8004dd4:	200049c8 	.word	0x200049c8

08004dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d04f      	beq.n	8004e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dea:	2308      	movs	r3, #8
 8004dec:	425b      	negs	r3, r3
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4413      	add	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4b25      	ldr	r3, [pc, #148]	@ (8004e94 <vPortFree+0xbc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <vPortFree+0x46>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <vPortFree+0x66>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60bb      	str	r3, [r7, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <vPortFree+0xbc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01e      	beq.n	8004e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11a      	bne.n	8004e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <vPortFree+0xbc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	401a      	ands	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e64:	f7fe fa6c 	bl	8003340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <vPortFree+0xc0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <vPortFree+0xc0>)
 8004e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f000 f874 	bl	8004f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <vPortFree+0xc4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a06      	ldr	r2, [pc, #24]	@ (8004e9c <vPortFree+0xc4>)
 8004e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e86:	f7fe fa69 	bl	800335c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200049d0 	.word	0x200049d0
 8004e98:	200049c0 	.word	0x200049c0
 8004e9c:	200049cc 	.word	0x200049cc

08004ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eac:	4b27      	ldr	r3, [pc, #156]	@ (8004f4c <prvHeapInit+0xac>)
 8004eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3307      	adds	r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0307 	bic.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	4a1f      	ldr	r2, [pc, #124]	@ (8004f4c <prvHeapInit+0xac>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <prvHeapInit+0xb0>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ede:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <prvHeapInit+0xb0>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4413      	add	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004eec:	2208      	movs	r2, #8
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <prvHeapInit+0xb4>)
 8004f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f02:	4b14      	ldr	r3, [pc, #80]	@ (8004f54 <prvHeapInit+0xb4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <prvHeapInit+0xb4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <prvHeapInit+0xb4>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f58 <prvHeapInit+0xb8>)
 8004f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <prvHeapInit+0xbc>)
 8004f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <prvHeapInit+0xc0>)
 8004f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f3e:	601a      	str	r2, [r3, #0]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	20000db4 	.word	0x20000db4
 8004f50:	200049b4 	.word	0x200049b4
 8004f54:	200049bc 	.word	0x200049bc
 8004f58:	200049c4 	.word	0x200049c4
 8004f5c:	200049c0 	.word	0x200049c0
 8004f60:	200049d0 	.word	0x200049d0

08004f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f6c:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <prvInsertBlockIntoFreeList+0xac>)
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e002      	b.n	8004f78 <prvInsertBlockIntoFreeList+0x14>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d8f7      	bhi.n	8004f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d108      	bne.n	8004fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	441a      	add	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d118      	bne.n	8004fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b15      	ldr	r3, [pc, #84]	@ (8005014 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d00d      	beq.n	8004fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e008      	b.n	8004ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e003      	b.n	8004ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d002      	beq.n	8005002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	200049b4 	.word	0x200049b4
 8005014:	200049bc 	.word	0x200049bc

08005018 <memset>:
 8005018:	4402      	add	r2, r0
 800501a:	4603      	mov	r3, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	@ (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	@ (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	@ (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	@ (800506c <__libc_init_array+0x44>)
 800503c:	f000 f826 	bl	800508c <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	0800516c 	.word	0x0800516c
 8005064:	0800516c 	.word	0x0800516c
 8005068:	0800516c 	.word	0x0800516c
 800506c:	08005170 	.word	0x08005170

08005070 <memcpy>:
 8005070:	440a      	add	r2, r1
 8005072:	4291      	cmp	r1, r2
 8005074:	f100 33ff 	add.w	r3, r0, #4294967295
 8005078:	d100      	bne.n	800507c <memcpy+0xc>
 800507a:	4770      	bx	lr
 800507c:	b510      	push	{r4, lr}
 800507e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005086:	4291      	cmp	r1, r2
 8005088:	d1f9      	bne.n	800507e <memcpy+0xe>
 800508a:	bd10      	pop	{r4, pc}

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
