
counter_with_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080060b0  080060b0  000070b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e4  080061e4  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ec  080061ec  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000071ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061f0  080061f0  000071f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080061f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000060  08006254  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b74  08006254  00008b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d3  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294b  00000000  00000000  00019163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0a  00000000  00000000  0001c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035c1  00000000  00000000  0001d422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdda  00000000  00000000  000209e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f912  00000000  00000000  000307bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c00cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  000c0114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c4160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006098 	.word	0x08006098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006098 	.word	0x08006098

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  HAL_Init();
 80005c0:	f000 faca 	bl	8000b58 <HAL_Init>
  SystemClock_Config();
 80005c4:	f000 f89a 	bl	80006fc <SystemClock_Config>
  MX_GPIO_Init();
 80005c8:	f000 f92e 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f902 	bl	80007d4 <MX_USART2_UART_Init>

  osKernelInitialize();
 80005d0:	f001 fe90 	bl	80022f4 <osKernelInitialize>

  /* Create mutex */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80005d4:	480e      	ldr	r0, [pc, #56]	@ (8000610 <main+0x54>)
 80005d6:	f001 ff84 	bl	80024e2 <osMutexNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <main+0x58>)
 80005de:	6013      	str	r3, [r2, #0]

  /* Print startup message */
  UART_Send_String("Counter without Race Condition using Mutex\r\n");
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <main+0x5c>)
 80005e2:	f000 f98f 	bl	8000904 <UART_Send_String>

  /* Create tasks */
  Task1HandlerHandle = osThreadNew(StartTask01, NULL, &Task1Handler_attributes);
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <main+0x60>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0x64>)
 80005ec:	f001 fecc 	bl	8002388 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <main+0x68>)
 80005f4:	6013      	str	r3, [r2, #0]
  Task2HandlerHandle = osThreadNew(StartTask02, NULL, &Task2Handler_attributes);
 80005f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <main+0x6c>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	480c      	ldr	r0, [pc, #48]	@ (800062c <main+0x70>)
 80005fc:	f001 fec4 	bl	8002388 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <main+0x74>)
 8000604:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000606:	f001 fe99 	bl	800233c <osKernelStart>

  while (1) { }
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x4e>
 800060e:	bf00      	nop
 8000610:	08006188 	.word	0x08006188
 8000614:	200000d0 	.word	0x200000d0
 8000618:	080060dc 	.word	0x080060dc
 800061c:	08006140 	.word	0x08006140
 8000620:	080006c5 	.word	0x080006c5
 8000624:	200000c8 	.word	0x200000c8
 8000628:	08006164 	.word	0x08006164
 800062c:	080006e1 	.word	0x080006e1
 8000630:	200000cc 	.word	0x200000cc

08000634 <IncTask>:
}

/* ---------------- Task Implementations ---------------- */

void IncTask(const char *taskName)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a8      	sub	sp, #160	@ 0xa0
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  char msg[150];

  while (1)
  {
    if (osMutexAcquire(myMutex01Handle, osWaitForever) == osOK)
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <IncTask+0x80>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f04f 31ff 	mov.w	r1, #4294967295
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ffd2 	bl	80025ee <osMutexAcquire>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d12c      	bne.n	80006aa <IncTask+0x76>
    {
      if (counter <= 100)
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <IncTask+0x84>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b64      	cmp	r3, #100	@ 0x64
 8000656:	d81b      	bhi.n	8000690 <IncTask+0x5c>
      {
    	  sprintf(msg, "%s -> %lu\r\n", taskName, (uint32_t)counter);
 8000658:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <IncTask+0x84>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 0008 	add.w	r0, r7, #8
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4916      	ldr	r1, [pc, #88]	@ (80006bc <IncTask+0x88>)
 8000664:	f005 f878 	bl	8005758 <siprintf>
    	  counter++;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <IncTask+0x84>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <IncTask+0x84>)
 8000670:	6013      	str	r3, [r2, #0]
    	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fdb2 	bl	80001e0 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	f107 0108 	add.w	r1, r7, #8
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <IncTask+0x8c>)
 800068a:	f001 fa43 	bl	8001b14 <HAL_UART_Transmit>
 800068e:	e007      	b.n	80006a0 <IncTask+0x6c>

      }
      else
      {
        osMutexRelease(myMutex01Handle);
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <IncTask+0x80>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fff5 	bl	8002684 <osMutexRelease>

        /*  Delete the current task */
        vTaskDelete(NULL);
 800069a:	2000      	movs	r0, #0
 800069c:	f003 f9d4 	bl	8003a48 <vTaskDelete>
      }
      osMutexRelease(myMutex01Handle);
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <IncTask+0x80>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 ffed 	bl	8002684 <osMutexRelease>
    }
    osDelay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 fefe 	bl	80024ac <osDelay>
    if (osMutexAcquire(myMutex01Handle, osWaitForever) == osOK)
 80006b0:	e7c4      	b.n	800063c <IncTask+0x8>
 80006b2:	bf00      	nop
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	0800610c 	.word	0x0800610c
 80006c0:	2000007c 	.word	0x2000007c

080006c4 <StartTask01>:
  }
}

void StartTask01(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  IncTask("TASK 1");
 80006cc:	4803      	ldr	r0, [pc, #12]	@ (80006dc <StartTask01+0x18>)
 80006ce:	f7ff ffb1 	bl	8000634 <IncTask>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08006118 	.word	0x08006118

080006e0 <StartTask02>:

void StartTask02(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  IncTask("TASK 2");
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <StartTask02+0x18>)
 80006ea:	f7ff ffa3 	bl	8000634 <IncTask>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08006120 	.word	0x08006120

080006fc <SystemClock_Config>:



void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 f846 	bl	800579c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	@ (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <SystemClock_Config+0xd4>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fcdc 	bl	8001144 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 f8cd 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 ff3e 	bl	8001634 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 f8b7 	bl	8000930 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 f932 	bl	8001a74 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f88b 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000007c 	.word	0x2000007c
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4812      	ldr	r0, [pc, #72]	@ (80008fc <MX_GPIO_Init+0xd4>)
 80008b4:	f000 fc2c 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_GPIO_Init+0xd8>)
 80008d0:	f000 fa9a 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0xd4>)
 80008ec:	f000 fa8c 	bl	8000e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020800 	.word	0x40020800

08000904 <UART_Send_String>:
/* ---------------- Utility Functions ---------------- */

void UART_Send_String(char *str)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fc67 	bl	80001e0 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	4803      	ldr	r0, [pc, #12]	@ (800092c <UART_Send_String+0x28>)
 800091e:	f001 f8f9 	bl	8001b14 <HAL_UART_Transmit>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000007c 	.word	0x2000007c

08000930 <Error_Handler>:
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000950:	6453      	str	r3, [r2, #68]	@ 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fa18 	bl	8000db6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12b      	bne.n	8000a0e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ee:	230c      	movs	r3, #12
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0a:	f000 f9fd 	bl	8000e08 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8cd 	bl	8000bfc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a62:	f003 fcf9 	bl	8004458 <xTaskGetSchedulerState>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d001      	beq.n	8000a70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a6c:	f004 fbf4 	bl	8005258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f004 fe82 	bl	80057ac <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20018000 	.word	0x20018000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	200000d4 	.word	0x200000d4
 8000adc:	20004b78 	.word	0x20004b78

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f004 fe41 	bl	80057b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd41 	bl	80005bc <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b48:	080061f4 	.word	0x080061f4
  ldr r2, =_sbss
 8000b4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b50:	20004b74 	.word	0x20004b74

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f90d 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fed6 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f917 	bl	8000dee <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f8ed 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200000d8 	.word	0x200000d8

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200000d8 	.word	0x200000d8

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5c 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb0 	bl	8000d5c <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e159      	b.n	80010d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8148 	bne.w	80010d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a2 	beq.w	80010d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b57      	ldr	r3, [pc, #348]	@ (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a56      	ldr	r2, [pc, #344]	@ (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b54      	ldr	r3, [pc, #336]	@ (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a52      	ldr	r2, [pc, #328]	@ (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_GPIO_Init+0x2f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x202>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a48      	ldr	r2, [pc, #288]	@ (80010fc <HAL_GPIO_Init+0x2f4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x1fe>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a47      	ldr	r2, [pc, #284]	@ (8001100 <HAL_GPIO_Init+0x2f8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a46      	ldr	r2, [pc, #280]	@ (8001104 <HAL_GPIO_Init+0x2fc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x1f6>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a45      	ldr	r2, [pc, #276]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x1f2>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x204>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4935      	ldr	r1, [pc, #212]	@ (80010f4 <HAL_GPIO_Init+0x2ec>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b38      	ldr	r3, [pc, #224]	@ (800110c <HAL_GPIO_Init+0x304>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <HAL_GPIO_Init+0x304>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_GPIO_Init+0x304>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a24      	ldr	r2, [pc, #144]	@ (800110c <HAL_GPIO_Init+0x304>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_GPIO_Init+0x304>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a2:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <HAL_GPIO_Init+0x304>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_GPIO_Init+0x304>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010cc:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_GPIO_Init+0x304>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f aea2 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e267      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d075      	beq.n	800124e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001162:	4b88      	ldr	r3, [pc, #544]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b04      	cmp	r3, #4
 800116c:	d00c      	beq.n	8001188 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116e:	4b85      	ldr	r3, [pc, #532]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001176:	2b08      	cmp	r3, #8
 8001178:	d112      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b82      	ldr	r3, [pc, #520]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001186:	d10b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b7e      	ldr	r3, [pc, #504]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d05b      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d157      	bne.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e242      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x74>
 80011aa:	4b76      	ldr	r3, [pc, #472]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a75      	ldr	r2, [pc, #468]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x98>
 80011c2:	4b70      	ldr	r3, [pc, #448]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011dc:	4b69      	ldr	r3, [pc, #420]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a68      	ldr	r2, [pc, #416]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b66      	ldr	r3, [pc, #408]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a65      	ldr	r2, [pc, #404]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fd12 	bl	8000c24 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fd0e 	bl	8000c24 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	@ 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e207      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0xc0>
 8001222:	e014      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fcfe 	bl	8000c24 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fcfa 	bl	8000c24 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	@ 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1f3      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d063      	beq.n	8001322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800125a:	4b4a      	ldr	r3, [pc, #296]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001266:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800126e:	2b08      	cmp	r3, #8
 8001270:	d11c      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b44      	ldr	r3, [pc, #272]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	4b41      	ldr	r3, [pc, #260]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e1c7      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4937      	ldr	r1, [pc, #220]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	e03a      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <HAL_RCC_OscConfig+0x244>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fcb3 	bl	8000c24 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fcaf 	bl	8000c24 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1a8      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4925      	ldr	r1, [pc, #148]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e015      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_OscConfig+0x244>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc92 	bl	8000c24 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fc8e 	bl	8000c24 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e187      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d036      	beq.n	800139c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_RCC_OscConfig+0x248>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133c:	f7ff fc72 	bl	8000c24 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fc6e 	bl	8000c24 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e167      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_RCC_OscConfig+0x240>)
 8001358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x200>
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_OscConfig+0x248>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fc5b 	bl	8000c24 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	e00e      	b.n	8001390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fc57 	bl	8000c24 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d907      	bls.n	8001390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e150      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 8001384:	40023800 	.word	0x40023800
 8001388:	42470000 	.word	0x42470000
 800138c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ea      	bne.n	8001372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8097 	beq.w	80014d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b81      	ldr	r3, [pc, #516]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b7d      	ldr	r3, [pc, #500]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a7c      	ldr	r2, [pc, #496]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b7a      	ldr	r3, [pc, #488]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b77      	ldr	r3, [pc, #476]	@ (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b74      	ldr	r3, [pc, #464]	@ (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a73      	ldr	r2, [pc, #460]	@ (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fc17 	bl	8000c24 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fc13 	bl	8000c24 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e10c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b6a      	ldr	r3, [pc, #424]	@ (80015b8 <HAL_RCC_OscConfig+0x474>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x2ea>
 8001420:	4b64      	ldr	r3, [pc, #400]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001424:	4a63      	ldr	r2, [pc, #396]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	@ 0x70
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x30c>
 8001436:	4b5f      	ldr	r3, [pc, #380]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	4a5e      	ldr	r2, [pc, #376]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6713      	str	r3, [r2, #112]	@ 0x70
 8001442:	4b5c      	ldr	r3, [pc, #368]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001446:	4a5b      	ldr	r2, [pc, #364]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	@ 0x70
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001454:	4a57      	ldr	r2, [pc, #348]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	@ 0x70
 800145c:	4b55      	ldr	r3, [pc, #340]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001460:	4a54      	ldr	r2, [pc, #336]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d015      	beq.n	800149c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fbd8 	bl	8000c24 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fbd4 	bl	8000c24 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0cb      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0ee      	beq.n	8001478 <HAL_RCC_OscConfig+0x334>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fbc2 	bl	8000c24 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fbbe 	bl	8000c24 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0b5      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ba:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ee      	bne.n	80014a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a38      	ldr	r2, [pc, #224]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a1 	beq.w	8001624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d05c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d141      	bne.n	800157a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb92 	bl	8000c24 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb8e 	bl	8000c24 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e087      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	491b      	ldr	r1, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_RCC_OscConfig+0x478>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb67 	bl	8000c24 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb63 	bl	8000c24 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e05c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x416>
 8001578:	e054      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_RCC_OscConfig+0x478>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb50 	bl	8000c24 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fb4c 	bl	8000c24 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e045      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_RCC_OscConfig+0x470>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x444>
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e038      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d028      	beq.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d121      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d111      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0cc      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b68      	ldr	r3, [pc, #416]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d90c      	bls.n	8001670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d044      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e067      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4934      	ldr	r1, [pc, #208]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff fa7e 	bl	8000c24 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff fa7a 	bl	8000c24 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d20c      	bcs.n	800177c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9de 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	08006198 	.word	0x08006198
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001804:	b094      	sub	sp, #80	@ 0x50
 8001806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001818:	4b79      	ldr	r3, [pc, #484]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d00d      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 8001824:	2b08      	cmp	r3, #8
 8001826:	f200 80e1 	bhi.w	80019ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x34>
 800182e:	2b04      	cmp	r3, #4
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x3a>
 8001832:	e0db      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b73      	ldr	r3, [pc, #460]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001836:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001838:	e0db      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183a:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800183c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800183e:	e0d8      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001840:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	2200      	movs	r2, #0
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001860:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	@ 0x34
 800186e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001872:	4622      	mov	r2, r4
 8001874:	462b      	mov	r3, r5
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0159      	lsls	r1, r3, #5
 8001880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001884:	0150      	lsls	r0, r2, #5
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4621      	mov	r1, r4
 800188c:	1a51      	subs	r1, r2, r1
 800188e:	6139      	str	r1, [r7, #16]
 8001890:	4629      	mov	r1, r5
 8001892:	eb63 0301 	sbc.w	r3, r3, r1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018a4:	4659      	mov	r1, fp
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	4651      	mov	r1, sl
 80018aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ae:	4651      	mov	r1, sl
 80018b0:	018a      	lsls	r2, r1, #6
 80018b2:	4651      	mov	r1, sl
 80018b4:	ebb2 0801 	subs.w	r8, r2, r1
 80018b8:	4659      	mov	r1, fp
 80018ba:	eb63 0901 	sbc.w	r9, r3, r1
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d2:	4690      	mov	r8, r2
 80018d4:	4699      	mov	r9, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	eb18 0303 	adds.w	r3, r8, r3
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	462b      	mov	r3, r5
 80018e0:	eb49 0303 	adc.w	r3, r9, r3
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018f2:	4629      	mov	r1, r5
 80018f4:	024b      	lsls	r3, r1, #9
 80018f6:	4621      	mov	r1, r4
 80018f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fc:	4621      	mov	r1, r4
 80018fe:	024a      	lsls	r2, r1, #9
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001906:	2200      	movs	r2, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800190a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800190c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001910:	f7fe fcbe 	bl	8000290 <__aeabi_uldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4613      	mov	r3, r2
 800191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800191c:	e058      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	2200      	movs	r2, #0
 8001926:	4618      	mov	r0, r3
 8001928:	4611      	mov	r1, r2
 800192a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
 8001934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001938:	4642      	mov	r2, r8
 800193a:	464b      	mov	r3, r9
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0159      	lsls	r1, r3, #5
 8001946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194a:	0150      	lsls	r0, r2, #5
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4641      	mov	r1, r8
 8001952:	ebb2 0a01 	subs.w	sl, r2, r1
 8001956:	4649      	mov	r1, r9
 8001958:	eb63 0b01 	sbc.w	fp, r3, r1
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800196c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001970:	ebb2 040a 	subs.w	r4, r2, sl
 8001974:	eb63 050b 	sbc.w	r5, r3, fp
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	00eb      	lsls	r3, r5, #3
 8001982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001986:	00e2      	lsls	r2, r4, #3
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	4643      	mov	r3, r8
 800198e:	18e3      	adds	r3, r4, r3
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	464b      	mov	r3, r9
 8001994:	eb45 0303 	adc.w	r3, r5, r3
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019a6:	4629      	mov	r1, r5
 80019a8:	028b      	lsls	r3, r1, #10
 80019aa:	4621      	mov	r1, r4
 80019ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b0:	4621      	mov	r1, r4
 80019b2:	028a      	lsls	r2, r1, #10
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ba:	2200      	movs	r2, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	61fa      	str	r2, [r7, #28]
 80019c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019c4:	f7fe fc64 	bl	8000290 <__aeabi_uldivmod>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4613      	mov	r3, r2
 80019ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	3301      	adds	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ea:	e002      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3750      	adds	r7, #80	@ 0x50
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200

08001a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a28:	f7ff fff0 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	0a9b      	lsrs	r3, r3, #10
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4903      	ldr	r1, [pc, #12]	@ (8001a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	080061a8 	.word	0x080061a8

08001a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a50:	f7ff ffdc 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0b5b      	lsrs	r3, r3, #13
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	4903      	ldr	r1, [pc, #12]	@ (8001a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	080061a8 	.word	0x080061a8

08001a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e042      	b.n	8001b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe ff7a 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	@ 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f973 	bl	8001da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d175      	bne.n	8001c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_UART_Transmit+0x2c>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e06e      	b.n	8001c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2221      	movs	r2, #33	@ 0x21
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b52:	f7ff f867 	bl	8000c24 <HAL_GetTick>
 8001b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b6c:	d108      	bne.n	8001b80 <HAL_UART_Transmit+0x6c>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	e003      	b.n	8001b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b88:	e02e      	b.n	8001be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f848 	bl	8001c2a <UART_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e03a      	b.n	8001c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e007      	b.n	8001bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1cb      	bne.n	8001b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2140      	movs	r1, #64	@ 0x40
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f814 	bl	8001c2a <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e006      	b.n	8001c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3a:	e03b      	b.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d037      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c44:	f7fe ffee 	bl	8000c24 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d302      	bcc.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e03a      	b.n	8001cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d020      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d01d      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d116      	bne.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f81d 	bl	8001cdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e00f      	b.n	8001cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d0b4      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b095      	sub	sp, #84	@ 0x54
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cee:	e853 3f00 	ldrex	r3, [r3]
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d04:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d0c:	e841 2300 	strex	r3, r2, [r1]
 8001d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e5      	bne.n	8001ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	e853 3f00 	ldrex	r3, [r3]
 8001d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3314      	adds	r3, #20
 8001d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d40:	e841 2300 	strex	r3, r2, [r1]
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e5      	bne.n	8001d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d119      	bne.n	8001d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	e853 3f00 	ldrex	r3, [r3]
 8001d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f023 0310 	bic.w	r3, r3, #16
 8001d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	330c      	adds	r3, #12
 8001d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d74:	61ba      	str	r2, [r7, #24]
 8001d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d78:	6979      	ldr	r1, [r7, #20]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	e841 2300 	strex	r3, r2, [r1]
 8001d80:	613b      	str	r3, [r7, #16]
   return(result);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e5      	bne.n	8001d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d96:	bf00      	nop
 8001d98:	3754      	adds	r7, #84	@ 0x54
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da8:	b0c0      	sub	sp, #256	@ 0x100
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	ea40 0301 	orr.w	r3, r0, r1
 8001dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001dfc:	f021 010c 	bic.w	r1, r1, #12
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1e:	6999      	ldr	r1, [r3, #24]
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	ea40 0301 	orr.w	r3, r0, r1
 8001e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b8f      	ldr	r3, [pc, #572]	@ (8002070 <UART_SetConfig+0x2cc>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d005      	beq.n	8001e44 <UART_SetConfig+0xa0>
 8001e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002074 <UART_SetConfig+0x2d0>)
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d104      	bne.n	8001e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e44:	f7ff fe02 	bl	8001a4c <HAL_RCC_GetPCLK2Freq>
 8001e48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001e4c:	e003      	b.n	8001e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e4e:	f7ff fde9 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001e52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e60:	f040 810c 	bne.w	800207c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e76:	4622      	mov	r2, r4
 8001e78:	462b      	mov	r3, r5
 8001e7a:	1891      	adds	r1, r2, r2
 8001e7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e7e:	415b      	adcs	r3, r3
 8001e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e86:	4621      	mov	r1, r4
 8001e88:	eb12 0801 	adds.w	r8, r2, r1
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	eb43 0901 	adc.w	r9, r3, r1
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ea6:	4690      	mov	r8, r2
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	eb18 0303 	adds.w	r3, r8, r3
 8001eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	eb49 0303 	adc.w	r3, r9, r3
 8001eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	18db      	adds	r3, r3, r3
 8001ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ed8:	4613      	mov	r3, r2
 8001eda:	eb42 0303 	adc.w	r3, r2, r3
 8001ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ee8:	f7fe f9d2 	bl	8000290 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <UART_SetConfig+0x2d4>)
 8001ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	011c      	lsls	r4, r3, #4
 8001efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	464b      	mov	r3, r9
 8001f10:	1891      	adds	r1, r2, r2
 8001f12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f14:	415b      	adcs	r3, r3
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	eb43 0b01 	adc.w	fp, r3, r1
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	469b      	mov	fp, r3
 8001f40:	4643      	mov	r3, r8
 8001f42:	eb1a 0303 	adds.w	r3, sl, r3
 8001f46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	18db      	adds	r3, r3, r3
 8001f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f6e:	4613      	mov	r3, r2
 8001f70:	eb42 0303 	adc.w	r3, r2, r3
 8001f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f7e:	f7fe f987 	bl	8000290 <__aeabi_uldivmod>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <UART_SetConfig+0x2d4>)
 8001f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2264      	movs	r2, #100	@ 0x64
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	1acb      	subs	r3, r1, r3
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <UART_SetConfig+0x2d4>)
 8001fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001fac:	441c      	add	r4, r3
 8001fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	464b      	mov	r3, r9
 8001fc4:	1891      	adds	r1, r2, r2
 8001fc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fc8:	415b      	adcs	r3, r3
 8001fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	1851      	adds	r1, r2, r1
 8001fd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	414b      	adcs	r3, r1
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001fe8:	4659      	mov	r1, fp
 8001fea:	00cb      	lsls	r3, r1, #3
 8001fec:	4651      	mov	r1, sl
 8001fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	00ca      	lsls	r2, r1, #3
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4642      	mov	r2, r8
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002004:	464b      	mov	r3, r9
 8002006:	460a      	mov	r2, r1
 8002008:	eb42 0303 	adc.w	r3, r2, r3
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800201c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002024:	460b      	mov	r3, r1
 8002026:	18db      	adds	r3, r3, r3
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800202a:	4613      	mov	r3, r2
 800202c:	eb42 0303 	adc.w	r3, r2, r3
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800203a:	f7fe f929 	bl	8000290 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <UART_SetConfig+0x2d4>)
 8002044:	fba3 1302 	umull	r1, r3, r3, r2
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	2164      	movs	r1, #100	@ 0x64
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	3332      	adds	r3, #50	@ 0x32
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <UART_SetConfig+0x2d4>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	f003 0207 	and.w	r2, r3, #7
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4422      	add	r2, r4
 800206a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800206c:	e106      	b.n	800227c <UART_SetConfig+0x4d8>
 800206e:	bf00      	nop
 8002070:	40011000 	.word	0x40011000
 8002074:	40011400 	.word	0x40011400
 8002078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800207c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002080:	2200      	movs	r2, #0
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002086:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800208a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800208e:	4642      	mov	r2, r8
 8002090:	464b      	mov	r3, r9
 8002092:	1891      	adds	r1, r2, r2
 8002094:	6239      	str	r1, [r7, #32]
 8002096:	415b      	adcs	r3, r3
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
 800209a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800209e:	4641      	mov	r1, r8
 80020a0:	1854      	adds	r4, r2, r1
 80020a2:	4649      	mov	r1, r9
 80020a4:	eb43 0501 	adc.w	r5, r3, r1
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	00eb      	lsls	r3, r5, #3
 80020b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020b6:	00e2      	lsls	r2, r4, #3
 80020b8:	4614      	mov	r4, r2
 80020ba:	461d      	mov	r5, r3
 80020bc:	4643      	mov	r3, r8
 80020be:	18e3      	adds	r3, r4, r3
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020c4:	464b      	mov	r3, r9
 80020c6:	eb45 0303 	adc.w	r3, r5, r3
 80020ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020ea:	4629      	mov	r1, r5
 80020ec:	008b      	lsls	r3, r1, #2
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020f4:	4621      	mov	r1, r4
 80020f6:	008a      	lsls	r2, r1, #2
 80020f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020fc:	f7fe f8c8 	bl	8000290 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4b60      	ldr	r3, [pc, #384]	@ (8002288 <UART_SetConfig+0x4e4>)
 8002106:	fba3 2302 	umull	r2, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	011c      	lsls	r4, r3, #4
 800210e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800211c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002120:	4642      	mov	r2, r8
 8002122:	464b      	mov	r3, r9
 8002124:	1891      	adds	r1, r2, r2
 8002126:	61b9      	str	r1, [r7, #24]
 8002128:	415b      	adcs	r3, r3
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002130:	4641      	mov	r1, r8
 8002132:	1851      	adds	r1, r2, r1
 8002134:	6139      	str	r1, [r7, #16]
 8002136:	4649      	mov	r1, r9
 8002138:	414b      	adcs	r3, r1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002148:	4659      	mov	r1, fp
 800214a:	00cb      	lsls	r3, r1, #3
 800214c:	4651      	mov	r1, sl
 800214e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002152:	4651      	mov	r1, sl
 8002154:	00ca      	lsls	r2, r1, #3
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	4603      	mov	r3, r0
 800215c:	4642      	mov	r2, r8
 800215e:	189b      	adds	r3, r3, r2
 8002160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002164:	464b      	mov	r3, r9
 8002166:	460a      	mov	r2, r1
 8002168:	eb42 0303 	adc.w	r3, r2, r3
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800217a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002188:	4649      	mov	r1, r9
 800218a:	008b      	lsls	r3, r1, #2
 800218c:	4641      	mov	r1, r8
 800218e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002192:	4641      	mov	r1, r8
 8002194:	008a      	lsls	r2, r1, #2
 8002196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800219a:	f7fe f879 	bl	8000290 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <UART_SetConfig+0x4e4>)
 80021a6:	fba3 2301 	umull	r2, r3, r3, r1
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2264      	movs	r2, #100	@ 0x64
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	3332      	adds	r3, #50	@ 0x32
 80021b8:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <UART_SetConfig+0x4e4>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c4:	441c      	add	r4, r3
 80021c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ca:	2200      	movs	r2, #0
 80021cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80021ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80021d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	1891      	adds	r1, r2, r2
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	415b      	adcs	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e4:	4641      	mov	r1, r8
 80021e6:	1851      	adds	r1, r2, r1
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	4649      	mov	r1, r9
 80021ec:	414b      	adcs	r3, r1
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021fc:	4659      	mov	r1, fp
 80021fe:	00cb      	lsls	r3, r1, #3
 8002200:	4651      	mov	r1, sl
 8002202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002206:	4651      	mov	r1, sl
 8002208:	00ca      	lsls	r2, r1, #3
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	4603      	mov	r3, r0
 8002210:	4642      	mov	r2, r8
 8002212:	189b      	adds	r3, r3, r2
 8002214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002216:	464b      	mov	r3, r9
 8002218:	460a      	mov	r2, r1
 800221a:	eb42 0303 	adc.w	r3, r2, r3
 800221e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	663b      	str	r3, [r7, #96]	@ 0x60
 800222a:	667a      	str	r2, [r7, #100]	@ 0x64
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002238:	4649      	mov	r1, r9
 800223a:	008b      	lsls	r3, r1, #2
 800223c:	4641      	mov	r1, r8
 800223e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002242:	4641      	mov	r1, r8
 8002244:	008a      	lsls	r2, r1, #2
 8002246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800224a:	f7fe f821 	bl	8000290 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <UART_SetConfig+0x4e4>)
 8002254:	fba3 1302 	umull	r1, r3, r3, r2
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	2164      	movs	r1, #100	@ 0x64
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	3332      	adds	r3, #50	@ 0x32
 8002266:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <UART_SetConfig+0x4e4>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	f003 020f 	and.w	r2, r3, #15
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4422      	add	r2, r4
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002282:	46bd      	mov	sp, r7
 8002284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002288:	51eb851f 	.word	0x51eb851f

0800228c <__NVIC_SetPriority>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	@ (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80022e4:	2100      	movs	r1, #0
 80022e6:	f06f 0004 	mvn.w	r0, #4
 80022ea:	f7ff ffcf 	bl	800228c <__NVIC_SetPriority>
#endif
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022fa:	f3ef 8305 	mrs	r3, IPSR
 80022fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002306:	f06f 0305 	mvn.w	r3, #5
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	e00c      	b.n	8002328 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <osKernelInitialize+0x44>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002316:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <osKernelInitialize+0x44>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	e002      	b.n	8002328 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200000dc 	.word	0x200000dc

0800233c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002342:	f3ef 8305 	mrs	r3, IPSR
 8002346:	603b      	str	r3, [r7, #0]
  return(result);
 8002348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <osKernelStart+0x1a>
    stat = osErrorISR;
 800234e:	f06f 0305 	mvn.w	r3, #5
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	e010      	b.n	8002378 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <osKernelStart+0x48>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d109      	bne.n	8002372 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800235e:	f7ff ffbf 	bl	80022e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <osKernelStart+0x48>)
 8002364:	2202      	movs	r2, #2
 8002366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002368:	f001 fc18 	bl	8003b9c <vTaskStartScheduler>
      stat = osOK;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	e002      	b.n	8002378 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200000dc 	.word	0x200000dc

08002388 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	@ 0x38
 800238c:	af04      	add	r7, sp, #16
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002398:	f3ef 8305 	mrs	r3, IPSR
 800239c:	617b      	str	r3, [r7, #20]
  return(result);
 800239e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d17e      	bne.n	80024a2 <osThreadNew+0x11a>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d07b      	beq.n	80024a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023ae:	2318      	movs	r3, #24
 80023b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d045      	beq.n	800244e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <osThreadNew+0x48>
        name = attr->name;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <osThreadNew+0x6e>
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b38      	cmp	r3, #56	@ 0x38
 80023e8:	d805      	bhi.n	80023f6 <osThreadNew+0x6e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <osThreadNew+0x72>
        return (NULL);
 80023f6:	2300      	movs	r3, #0
 80023f8:	e054      	b.n	80024a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <osThreadNew+0xa8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b5b      	cmp	r3, #91	@ 0x5b
 8002418:	d90a      	bls.n	8002430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <osThreadNew+0xa8>
        mem = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	e010      	b.n	8002452 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10c      	bne.n	8002452 <osThreadNew+0xca>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d108      	bne.n	8002452 <osThreadNew+0xca>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <osThreadNew+0xca>
          mem = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e001      	b.n	8002452 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d110      	bne.n	800247a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002460:	9202      	str	r2, [sp, #8]
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 f944 	bl	80036fc <xTaskCreateStatic>
 8002474:	4603      	mov	r3, r0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e013      	b.n	80024a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	b29a      	uxth	r2, r3
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f001 f992 	bl	80037bc <xTaskCreate>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <osThreadNew+0x11a>
            hTask = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024a2:	693b      	ldr	r3, [r7, #16]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3728      	adds	r7, #40	@ 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024b4:	f3ef 8305 	mrs	r3, IPSR
 80024b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <osDelay+0x1c>
    stat = osErrorISR;
 80024c0:	f06f 0305 	mvn.w	r3, #5
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e007      	b.n	80024d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f001 fb2c 	bl	8003b30 <vTaskDelay>
    }
  }

  return (stat);
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b088      	sub	sp, #32
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ee:	f3ef 8305 	mrs	r3, IPSR
 80024f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80024f4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d174      	bne.n	80025e4 <osMutexNew+0x102>
    if (attr != NULL) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	e001      	b.n	800250c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <osMutexNew+0x3a>
      rmtx = 1U;
 8002516:	2301      	movs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e001      	b.n	8002520 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15c      	bne.n	80025e4 <osMutexNew+0x102>
      mem = -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <osMutexNew+0x6a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b4f      	cmp	r3, #79	@ 0x4f
 8002544:	d902      	bls.n	800254c <osMutexNew+0x6a>
          mem = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e00c      	b.n	8002566 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <osMutexNew+0x84>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <osMutexNew+0x84>
            mem = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e001      	b.n	8002566 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d112      	bne.n	8002592 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4619      	mov	r1, r3
 8002578:	2004      	movs	r0, #4
 800257a:	f000 fb20 	bl	8002bbe <xQueueCreateMutexStatic>
 800257e:	61f8      	str	r0, [r7, #28]
 8002580:	e016      	b.n	80025b0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4619      	mov	r1, r3
 8002588:	2001      	movs	r0, #1
 800258a:	f000 fb18 	bl	8002bbe <xQueueCreateMutexStatic>
 800258e:	61f8      	str	r0, [r7, #28]
 8002590:	e00e      	b.n	80025b0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800259e:	2004      	movs	r0, #4
 80025a0:	f000 faf5 	bl	8002b8e <xQueueCreateMutex>
 80025a4:	61f8      	str	r0, [r7, #28]
 80025a6:	e003      	b.n	80025b0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 faf0 	bl	8002b8e <xQueueCreateMutex>
 80025ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <osMutexNew+0xee>
        if (attr != NULL) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <osMutexNew+0xe2>
          name = attr->name;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e001      	b.n	80025c8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	69f8      	ldr	r0, [r7, #28]
 80025cc:	f001 f838 	bl	8003640 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <osMutexNew+0x102>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80025e4:	69fb      	ldr	r3, [r7, #28]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260c:	f3ef 8305 	mrs	r3, IPSR
 8002610:	60bb      	str	r3, [r7, #8]
  return(result);
 8002612:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002618:	f06f 0305 	mvn.w	r3, #5
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e02c      	b.n	800267a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002626:	f06f 0303 	mvn.w	r3, #3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e025      	b.n	800267a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d011      	beq.n	8002658 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f000 fb11 	bl	8002c5e <xQueueTakeMutexRecursive>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	d01b      	beq.n	800267a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002648:	f06f 0301 	mvn.w	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e014      	b.n	800267a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002650:	f06f 0302 	mvn.w	r3, #2
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e010      	b.n	800267a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	6938      	ldr	r0, [r7, #16]
 800265c:	f000 fdb8 	bl	80031d0 <xQueueSemaphoreTake>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d009      	beq.n	800267a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800266c:	f06f 0301 	mvn.w	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e002      	b.n	800267a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002674:	f06f 0302 	mvn.w	r3, #2
 8002678:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800267a:	697b      	ldr	r3, [r7, #20]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a0:	f3ef 8305 	mrs	r3, IPSR
 80026a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026a6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80026ac:	f06f 0305 	mvn.w	r3, #5
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e01f      	b.n	80026f4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80026ba:	f06f 0303 	mvn.w	r3, #3
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e018      	b.n	80026f4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80026c8:	6938      	ldr	r0, [r7, #16]
 80026ca:	f000 fa93 	bl	8002bf4 <xQueueGiveMutexRecursive>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00f      	beq.n	80026f4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80026d4:	f06f 0302 	mvn.w	r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e00b      	b.n	80026f4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	6938      	ldr	r0, [r7, #16]
 80026e4:	f000 faf2 	bl	8002ccc <xQueueGenericSend>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d002      	beq.n	80026f4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80026ee:	f06f 0302 	mvn.w	r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80026f4:	697b      	ldr	r3, [r7, #20]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <vApplicationGetIdleTaskMemory+0x2c>)
 8002710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <vApplicationGetIdleTaskMemory+0x30>)
 8002716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	200000e0 	.word	0x200000e0
 8002730:	2000013c 	.word	0x2000013c

08002734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a07      	ldr	r2, [pc, #28]	@ (8002760 <vApplicationGetTimerTaskMemory+0x2c>)
 8002744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4a06      	ldr	r2, [pc, #24]	@ (8002764 <vApplicationGetTimerTaskMemory+0x30>)
 800274a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	2000033c 	.word	0x2000033c
 8002764:	20000398 	.word	0x20000398

08002768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0208 	add.w	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 0208 	add.w	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0208 	add.w	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d103      	bne.n	800282a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e00c      	b.n	8002844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3308      	adds	r3, #8
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e002      	b.n	8002838 <vListInsert+0x2e>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d2f6      	bcs.n	8002832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6852      	ldr	r2, [r2, #4]
 800289c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d103      	bne.n	80028b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028fc:	f002 fc1c 	bl	8005138 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	441a      	add	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	3b01      	subs	r3, #1
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	441a      	add	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	22ff      	movs	r2, #255	@ 0xff
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d114      	bne.n	800297c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01a      	beq.n	8002990 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3310      	adds	r3, #16
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fbaa 	bl	80040b8 <xTaskRemoveFromEventList>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800296a:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <xQueueGenericReset+0xd0>)
 800296c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	e009      	b.n	8002990 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3310      	adds	r3, #16
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fef1 	bl	8002768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3324      	adds	r3, #36	@ 0x24
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff feec 	bl	8002768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002990:	f002 fc04 	bl	800519c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	@ 0x38
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	e7fd      	b.n	80029ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <xQueueGenericCreateStatic+0x56>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <xQueueGenericCreateStatic+0x5a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <xQueueGenericCreateStatic+0x5c>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	623b      	str	r3, [r7, #32]
}
 8002a16:	bf00      	nop
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <xQueueGenericCreateStatic+0x84>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <xQueueGenericCreateStatic+0x88>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <xQueueGenericCreateStatic+0x8a>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	61fb      	str	r3, [r7, #28]
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a4a:	2350      	movs	r3, #80	@ 0x50
 8002a4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b50      	cmp	r3, #80	@ 0x50
 8002a52:	d00b      	beq.n	8002a6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	61bb      	str	r3, [r7, #24]
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f840 	bl	8002b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3730      	adds	r7, #48	@ 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08a      	sub	sp, #40	@ 0x28
 8002aa2:	af02      	add	r7, sp, #8
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	613b      	str	r3, [r7, #16]
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	e7fd      	b.n	8002ac6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3350      	adds	r3, #80	@ 0x50
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fc4f 	bl	800537c <pvPortMalloc>
 8002ade:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d011      	beq.n	8002b0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3350      	adds	r3, #80	@ 0x50
 8002aee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f805 	bl	8002b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e002      	b.n	8002b36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b42:	2101      	movs	r1, #1
 8002b44:	69b8      	ldr	r0, [r7, #24]
 8002b46:	f7ff fec3 	bl	80028d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8a3 	bl	8002ccc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff79 	bl	8002a9e <xQueueGenericCreate>
 8002bac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff ffd3 	bl	8002b5a <prvInitialiseMutex>

		return xNewQueue;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
	}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b088      	sub	sp, #32
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	6039      	str	r1, [r7, #0]
 8002bc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	6939      	ldr	r1, [r7, #16]
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f7ff fee1 	bl	80029a4 <xQueueGenericCreateStatic>
 8002be2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff ffb8 	bl	8002b5a <prvInitialiseMutex>

		return xNewQueue;
 8002bea:	68fb      	ldr	r3, [r7, #12]
	}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	60fb      	str	r3, [r7, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	689c      	ldr	r4, [r3, #8]
 8002c22:	f001 fc09 	bl	8004438 <xTaskGetCurrentTaskHandle>
 8002c26:	4603      	mov	r3, r0
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	d111      	bne.n	8002c50 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	6938      	ldr	r0, [r7, #16]
 8002c46:	f000 f841 	bl	8002ccc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e001      	b.n	8002c54 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002c54:	697b      	ldr	r3, [r7, #20]
	}
 8002c56:	4618      	mov	r0, r3
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}

08002c5e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002c5e:	b590      	push	{r4, r7, lr}
 8002c60:	b087      	sub	sp, #28
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	60fb      	str	r3, [r7, #12]
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	e7fd      	b.n	8002c86 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	689c      	ldr	r4, [r3, #8]
 8002c8e:	f001 fbd3 	bl	8004438 <xTaskGetCurrentTaskHandle>
 8002c92:	4603      	mov	r3, r0
 8002c94:	429c      	cmp	r4, r3
 8002c96:	d107      	bne.n	8002ca8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e00c      	b.n	8002cc2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	6938      	ldr	r0, [r7, #16]
 8002cac:	f000 fa90 	bl	80031d0 <xQueueSemaphoreTake>
 8002cb0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002cc2:	697b      	ldr	r3, [r7, #20]
	}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}

08002ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	@ 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xQueueGenericSend+0x34>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSend+0x42>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueGenericSend+0x46>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericSend+0x48>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xQueueGenericSend+0x64>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d103      	bne.n	8002d3e <xQueueGenericSend+0x72>
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <xQueueGenericSend+0x76>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueGenericSend+0x78>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <xQueueGenericSend+0x94>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	623b      	str	r3, [r7, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d60:	f001 fb7a 	bl	8004458 <xTaskGetSchedulerState>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <xQueueGenericSend+0xa4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueGenericSend+0xa8>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueGenericSend+0xaa>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <xQueueGenericSend+0xc6>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	61fb      	str	r3, [r7, #28]
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d92:	f002 f9d1 	bl	8005138 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xQueueGenericSend+0xdc>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d129      	bne.n	8002dfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dae:	f000 fb37 	bl	8003420 <prvCopyDataToQueue>
 8002db2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	3324      	adds	r3, #36	@ 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f979 	bl	80040b8 <xTaskRemoveFromEventList>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <xQueueGenericSend+0x200>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	e00a      	b.n	8002df4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <xQueueGenericSend+0x200>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002df4:	f002 f9d2 	bl	800519c <vPortExitCritical>
				return pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e063      	b.n	8002ec4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e02:	f002 f9cb 	bl	800519c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e05c      	b.n	8002ec4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 f9b3 	bl	8004180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1e:	f002 f9bd 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e22:	f000 ff23 	bl	8003c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e26:	f002 f987 	bl	8005138 <vPortEnterCritical>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <xQueueGenericSend+0x174>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x18a>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e56:	f002 f9a1 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 f9a2 	bl	80041ac <xTaskCheckForTimeOut>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d124      	bne.n	8002eb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e70:	f000 fbce 	bl	8003610 <prvIsQueueFull>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8c6 	bl	8004014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e8a:	f000 fb59 	bl	8003540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e8e:	f000 fefb 	bl	8003c88 <xTaskResumeAll>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af7c 	bne.w	8002d92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <xQueueGenericSend+0x200>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	e772      	b.n	8002d92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eae:	f000 fb47 	bl	8003540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eb2:	f000 fee9 	bl	8003c88 <xTaskResumeAll>
 8002eb6:	e76c      	b.n	8002d92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eba:	f000 fb41 	bl	8003540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ebe:	f000 fee3 	bl	8003c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	@ 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b090      	sub	sp, #64	@ 0x40
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSendFromISR+0x3e>
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSendFromISR+0x42>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSendFromISR+0x44>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSendFromISR+0x6e>
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSendFromISR+0x72>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSendFromISR+0x74>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f60:	f002 f9ca 	bl	80052f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f64:	f3ef 8211 	mrs	r2, BASEPRI
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fa      	str	r2, [r7, #28]
 8002f7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <xQueueGenericSendFromISR+0xc2>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d12f      	bne.n	8002ff2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002fa8:	f000 fa3a 	bl	8003420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d112      	bne.n	8002fdc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc0:	3324      	adds	r3, #36	@ 0x24
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f878 	bl	80040b8 <xTaskRemoveFromEventList>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	b25a      	sxtb	r2, r3
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002fec:	2301      	movs	r3, #1
 8002fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002ff0:	e001      	b.n	8002ff6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003004:	4618      	mov	r0, r3
 8003006:	3740      	adds	r7, #64	@ 0x40
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	@ 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <xQueueReceive+0x32>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	623b      	str	r3, [r7, #32]
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	e7fd      	b.n	800303a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <xQueueReceive+0x40>
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <xQueueReceive+0x44>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <xQueueReceive+0x46>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <xQueueReceive+0x62>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	61fb      	str	r3, [r7, #28]
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	e7fd      	b.n	800306a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800306e:	f001 f9f3 	bl	8004458 <xTaskGetSchedulerState>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <xQueueReceive+0x72>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <xQueueReceive+0x76>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueReceive+0x78>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <xQueueReceive+0x94>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61bb      	str	r3, [r7, #24]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030a0:	f002 f84a 	bl	8005138 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01f      	beq.n	80030f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b4:	f000 fa1e 	bl	80034f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	1e5a      	subs	r2, r3, #1
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00f      	beq.n	80030e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	3310      	adds	r3, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fff3 	bl	80040b8 <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030d8:	4b3c      	ldr	r3, [pc, #240]	@ (80031cc <xQueueReceive+0x1c0>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030e8:	f002 f858 	bl	800519c <vPortExitCritical>
				return pdPASS;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e069      	b.n	80031c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030f6:	f002 f851 	bl	800519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e062      	b.n	80031c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	4618      	mov	r0, r3
 800310a:	f001 f839 	bl	8004180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800310e:	2301      	movs	r3, #1
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003112:	f002 f843 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003116:	f000 fda9 	bl	8003c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800311a:	f002 f80d 	bl	8005138 <vPortEnterCritical>
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003124:	b25b      	sxtb	r3, r3
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d103      	bne.n	8003134 <xQueueReceive+0x128>
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313a:	b25b      	sxtb	r3, r3
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d103      	bne.n	800314a <xQueueReceive+0x13e>
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800314a:	f002 f827 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800314e:	1d3a      	adds	r2, r7, #4
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f828 	bl	80041ac <xTaskCheckForTimeOut>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d123      	bne.n	80031aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003164:	f000 fa3e 	bl	80035e4 <prvIsQueueEmpty>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d017      	beq.n	800319e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	3324      	adds	r3, #36	@ 0x24
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 ff4c 	bl	8004014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800317c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800317e:	f000 f9df 	bl	8003540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003182:	f000 fd81 	bl	8003c88 <xTaskResumeAll>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d189      	bne.n	80030a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <xQueueReceive+0x1c0>)
 800318e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	e780      	b.n	80030a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800319e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031a0:	f000 f9ce 	bl	8003540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031a4:	f000 fd70 	bl	8003c88 <xTaskResumeAll>
 80031a8:	e77a      	b.n	80030a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ac:	f000 f9c8 	bl	8003540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031b0:	f000 fd6a 	bl	8003c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b6:	f000 fa15 	bl	80035e4 <prvIsQueueEmpty>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f43f af6f 	beq.w	80030a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3730      	adds	r7, #48	@ 0x30
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	@ 0x38
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	623b      	str	r3, [r7, #32]
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003224:	f001 f918 	bl	8004458 <xTaskGetSchedulerState>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <xQueueSemaphoreTake+0x64>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <xQueueSemaphoreTake+0x68>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <xQueueSemaphoreTake+0x6a>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	61bb      	str	r3, [r7, #24]
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003256:	f001 ff6f 	bl	8005138 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d024      	beq.n	80032b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003276:	f001 fa69 	bl	800474c <pvTaskIncrementMutexHeldCount>
 800327a:	4602      	mov	r2, r0
 800327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00f      	beq.n	80032a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	3310      	adds	r3, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ff13 	bl	80040b8 <xTaskRemoveFromEventList>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003298:	4b54      	ldr	r3, [pc, #336]	@ (80033ec <xQueueSemaphoreTake+0x21c>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032a8:	f001 ff78 	bl	800519c <vPortExitCritical>
				return pdPASS;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e098      	b.n	80033e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d112      	bne.n	80032dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	617b      	str	r3, [r7, #20]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032d4:	f001 ff62 	bl	800519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032d8:	2300      	movs	r3, #0
 80032da:	e082      	b.n	80033e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 ff4a 	bl	8004180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032f0:	f001 ff54 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032f4:	f000 fcba 	bl	8003c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032f8:	f001 ff1e 	bl	8005138 <vPortEnterCritical>
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <xQueueSemaphoreTake+0x142>
 800330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d103      	bne.n	8003328 <xQueueSemaphoreTake+0x158>
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003328:	f001 ff38 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800332c:	463a      	mov	r2, r7
 800332e:	f107 030c 	add.w	r3, r7, #12
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 ff39 	bl	80041ac <xTaskCheckForTimeOut>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d132      	bne.n	80033a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003342:	f000 f94f 	bl	80035e4 <prvIsQueueEmpty>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d026      	beq.n	800339a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003354:	f001 fef0 	bl	8005138 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4618      	mov	r0, r3
 800335e:	f001 f899 	bl	8004494 <xTaskPriorityInherit>
 8003362:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003364:	f001 ff1a 	bl	800519c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	3324      	adds	r3, #36	@ 0x24
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fe4f 	bl	8004014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003376:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003378:	f000 f8e2 	bl	8003540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800337c:	f000 fc84 	bl	8003c88 <xTaskResumeAll>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f af67 	bne.w	8003256 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <xQueueSemaphoreTake+0x21c>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	e75d      	b.n	8003256 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800339a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800339c:	f000 f8d0 	bl	8003540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033a0:	f000 fc72 	bl	8003c88 <xTaskResumeAll>
 80033a4:	e757      	b.n	8003256 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033a8:	f000 f8ca 	bl	8003540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033ac:	f000 fc6c 	bl	8003c88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033b2:	f000 f917 	bl	80035e4 <prvIsQueueEmpty>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f43f af4c 	beq.w	8003256 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80033c4:	f001 feb8 	bl	8005138 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033ca:	f000 f811 	bl	80033f0 <prvGetDisinheritPriorityAfterTimeout>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 f934 	bl	8004644 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033dc:	f001 fede 	bl	800519c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3738      	adds	r7, #56	@ 0x38
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e001      	b.n	8003412 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003412:	68fb      	ldr	r3, [r7, #12]
	}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14d      	bne.n	80034e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f001 f88a 	bl	8004564 <xTaskPriorityDisinherit>
 8003450:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e043      	b.n	80034e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d119      	bne.n	8003494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6858      	ldr	r0, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f002 f9ca 	bl	8005804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d32b      	bcc.n	80034e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e026      	b.n	80034e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68d8      	ldr	r0, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	f002 f9b0 	bl	8005804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	425b      	negs	r3, r3
 80034ae:	441a      	add	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d207      	bcs.n	80034d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	425b      	negs	r3, r3
 80034ca:	441a      	add	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d105      	bne.n	80034e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3b01      	subs	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80034ea:	697b      	ldr	r3, [r7, #20]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	441a      	add	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d303      	bcc.n	8003528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f002 f966 	bl	8005804 <memcpy>
	}
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003548:	f001 fdf6 	bl	8005138 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003554:	e011      	b.n	800357a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3324      	adds	r3, #36	@ 0x24
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fda8 	bl	80040b8 <xTaskRemoveFromEventList>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800356e:	f000 fe81 	bl	8004274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dce9      	bgt.n	8003556 <prvUnlockQueue+0x16>
 8003582:	e000      	b.n	8003586 <prvUnlockQueue+0x46>
					break;
 8003584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	22ff      	movs	r2, #255	@ 0xff
 800358a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800358e:	f001 fe05 	bl	800519c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003592:	f001 fdd1 	bl	8005138 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800359c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800359e:	e011      	b.n	80035c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3310      	adds	r3, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fd83 	bl	80040b8 <xTaskRemoveFromEventList>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035b8:	f000 fe5c 	bl	8004274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035bc:	7bbb      	ldrb	r3, [r7, #14]
 80035be:	3b01      	subs	r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dce9      	bgt.n	80035a0 <prvUnlockQueue+0x60>
 80035cc:	e000      	b.n	80035d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	22ff      	movs	r2, #255	@ 0xff
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035d8:	f001 fde0 	bl	800519c <vPortExitCritical>
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035ec:	f001 fda4 	bl	8005138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003602:	f001 fdcb 	bl	800519c <vPortExitCritical>

	return xReturn;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003618:	f001 fd8e 	bl	8005138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	429a      	cmp	r2, r3
 8003626:	d102      	bne.n	800362e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fdb3 	bl	800519c <vPortExitCritical>

	return xReturn;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e014      	b.n	800367a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003650:	4a0f      	ldr	r2, [pc, #60]	@ (8003690 <vQueueAddToRegistry+0x50>)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800365c:	490c      	ldr	r1, [pc, #48]	@ (8003690 <vQueueAddToRegistry+0x50>)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003666:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <vQueueAddToRegistry+0x50>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003672:	e006      	b.n	8003682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b07      	cmp	r3, #7
 800367e:	d9e7      	bls.n	8003650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000798 	.word	0x20000798

08003694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036a4:	f001 fd48 	bl	8005138 <vPortEnterCritical>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d103      	bne.n	80036be <vQueueWaitForMessageRestricted+0x2a>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d103      	bne.n	80036d4 <vQueueWaitForMessageRestricted+0x40>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036d4:	f001 fd62 	bl	800519c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fcb9 	bl	8004060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f7ff ff26 	bl	8003540 <prvUnlockQueue>
	}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	@ 0x38
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	623b      	str	r3, [r7, #32]
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <xTaskCreateStatic+0x4a>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	61fb      	str	r3, [r7, #28]
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	e7fd      	b.n	8003742 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003746:	235c      	movs	r3, #92	@ 0x5c
 8003748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b5c      	cmp	r3, #92	@ 0x5c
 800374e:	d00b      	beq.n	8003768 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61bb      	str	r3, [r7, #24]
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01e      	beq.n	80037ae <xTaskCreateStatic+0xb2>
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003788:	2300      	movs	r3, #0
 800378a:	9303      	str	r3, [sp, #12]
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f850 	bl	8003846 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037a8:	f000 f8de 	bl	8003968 <prvAddNewTaskToReadyList>
 80037ac:	e001      	b.n	80037b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037b2:	697b      	ldr	r3, [r7, #20]
	}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	@ 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	@ 0x30
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fdd3 	bl	800537c <pvPortMalloc>
 80037d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037de:	205c      	movs	r0, #92	@ 0x5c
 80037e0:	f001 fdcc 	bl	800537c <pvPortMalloc>
 80037e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037f2:	e005      	b.n	8003800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f001 fe8f 	bl	8005518 <vPortFree>
 80037fa:	e001      	b.n	8003800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d017      	beq.n	8003836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f80e 	bl	8003846 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382a:	69f8      	ldr	r0, [r7, #28]
 800382c:	f000 f89c 	bl	8003968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e002      	b.n	800383c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800383c:	69bb      	ldr	r3, [r7, #24]
	}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	461a      	mov	r2, r3
 800385e:	21a5      	movs	r1, #165	@ 0xa5
 8003860:	f001 ff9c 	bl	800579c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800386e:	3b01      	subs	r3, #1
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f023 0307 	bic.w	r3, r3, #7
 800387c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	617b      	str	r3, [r7, #20]
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e012      	b.n	80038d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	7819      	ldrb	r1, [r3, #0]
 80038b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	3334      	adds	r3, #52	@ 0x34
 80038bc:	460a      	mov	r2, r1
 80038be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d9e9      	bls.n	80038ac <prvInitialiseNewTask+0x66>
 80038d8:	e000      	b.n	80038dc <prvInitialiseNewTask+0x96>
			{
				break;
 80038da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038e4:	e003      	b.n	80038ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	2b37      	cmp	r3, #55	@ 0x37
 80038f2:	d901      	bls.n	80038f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038f4:	2337      	movs	r3, #55	@ 0x37
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003902:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	2200      	movs	r2, #0
 8003908:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe ff4a 	bl	80027a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe ff45 	bl	80027a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	69b8      	ldr	r0, [r7, #24]
 8003948:	f001 fac2 	bl	8004ed0 <pxPortInitialiseStack>
 800394c:	4602      	mov	r2, r0
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003970:	f001 fbe2 	bl	8005138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003974:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	4a2c      	ldr	r2, [pc, #176]	@ (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 800397c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800397e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003986:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003994:	f000 fc92 	bl	80042bc <prvInitialiseTaskLists>
 8003998:	e00d      	b.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <prvAddNewTaskToReadyList+0xcc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039a2:	4b23      	ldr	r3, [pc, #140]	@ (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d802      	bhi.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <prvAddNewTaskToReadyList+0xd0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <prvAddNewTaskToReadyList+0xd0>)
 80039be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <prvAddNewTaskToReadyList+0xd0>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <prvAddNewTaskToReadyList+0xd4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d903      	bls.n	80039dc <prvAddNewTaskToReadyList+0x74>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <prvAddNewTaskToReadyList+0xd4>)
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <prvAddNewTaskToReadyList+0xd8>)
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7fe fee5 	bl	80027c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039f8:	f001 fbd0 	bl	800519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <prvAddNewTaskToReadyList+0xcc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a04:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d207      	bcs.n	8003a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <prvAddNewTaskToReadyList+0xdc>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000cac 	.word	0x20000cac
 8003a30:	200007d8 	.word	0x200007d8
 8003a34:	20000cb8 	.word	0x20000cb8
 8003a38:	20000cc8 	.word	0x20000cc8
 8003a3c:	20000cb4 	.word	0x20000cb4
 8003a40:	200007dc 	.word	0x200007dc
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003a50:	f001 fb72 	bl	8005138 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <vTaskDelete+0x18>
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <vTaskDelete+0xc8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	e000      	b.n	8003a62 <vTaskDelete+0x1a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe ff07 	bl	800287c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3318      	adds	r3, #24
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fefe 	bl	800287c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <vTaskDelete+0xcc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a23      	ldr	r2, [pc, #140]	@ (8003b14 <vTaskDelete+0xcc>)
 8003a88:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003a8a:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <vTaskDelete+0xc8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d10b      	bne.n	8003aac <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	481f      	ldr	r0, [pc, #124]	@ (8003b18 <vTaskDelete+0xd0>)
 8003a9c:	f7fe fe91 	bl	80027c2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <vTaskDelete+0xd4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <vTaskDelete+0xd4>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e009      	b.n	8003ac0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003aac:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <vTaskDelete+0xd8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <vTaskDelete+0xd8>)
 8003ab4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fc6e 	bl	8004398 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003abc:	f000 fc9c 	bl	80043f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003ac0:	f001 fb6c 	bl	800519c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <vTaskDelete+0xdc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01c      	beq.n	8003b06 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003acc:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <vTaskDelete+0xc8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d117      	bne.n	8003b06 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003ad6:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <vTaskDelete+0xe0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <vTaskDelete+0xae>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60bb      	str	r3, [r7, #8]
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003af6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <vTaskDelete+0xe4>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200007d8 	.word	0x200007d8
 8003b14:	20000cc8 	.word	0x20000cc8
 8003b18:	20000c80 	.word	0x20000c80
 8003b1c:	20000c94 	.word	0x20000c94
 8003b20:	20000cac 	.word	0x20000cac
 8003b24:	20000cb8 	.word	0x20000cb8
 8003b28:	20000cd4 	.word	0x20000cd4
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b42:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <vTaskDelay+0x64>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <vTaskDelay+0x32>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60bb      	str	r3, [r7, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b62:	f000 f883 	bl	8003c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b66:	2100      	movs	r1, #0
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fe03 	bl	8004774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b6e:	f000 f88b 	bl	8003c88 <xTaskResumeAll>
 8003b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b7a:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <vTaskDelay+0x68>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000cd4 	.word	0x20000cd4
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003baa:	463a      	mov	r2, r7
 8003bac:	1d39      	adds	r1, r7, #4
 8003bae:	f107 0308 	add.w	r3, r7, #8
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fda4 	bl	8002700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	9202      	str	r2, [sp, #8]
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	460a      	mov	r2, r1
 8003bca:	4922      	ldr	r1, [pc, #136]	@ (8003c54 <vTaskStartScheduler+0xb8>)
 8003bcc:	4822      	ldr	r0, [pc, #136]	@ (8003c58 <vTaskStartScheduler+0xbc>)
 8003bce:	f7ff fd95 	bl	80036fc <xTaskCreateStatic>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4a21      	ldr	r2, [pc, #132]	@ (8003c5c <vTaskStartScheduler+0xc0>)
 8003bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bd8:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <vTaskStartScheduler+0xc0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e001      	b.n	8003bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d102      	bne.n	8003bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bf0:	f000 fe14 	bl	800481c <xTimerCreateTimerTask>
 8003bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d116      	bne.n	8003c2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	613b      	str	r3, [r7, #16]
}
 8003c0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <vTaskStartScheduler+0xc4>)
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <vTaskStartScheduler+0xc8>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <vTaskStartScheduler+0xcc>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c24:	f001 f9e4 	bl	8004ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c28:	e00f      	b.n	8003c4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d10b      	bne.n	8003c4a <vTaskStartScheduler+0xae>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60fb      	str	r3, [r7, #12]
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	e7fd      	b.n	8003c46 <vTaskStartScheduler+0xaa>
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08006128 	.word	0x08006128
 8003c58:	0800428d 	.word	0x0800428d
 8003c5c:	20000cd0 	.word	0x20000cd0
 8003c60:	20000ccc 	.word	0x20000ccc
 8003c64:	20000cb8 	.word	0x20000cb8
 8003c68:	20000cb0 	.word	0x20000cb0

08003c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <vTaskSuspendAll+0x18>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a03      	ldr	r2, [pc, #12]	@ (8003c84 <vTaskSuspendAll+0x18>)
 8003c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	20000cd4 	.word	0x20000cd4

08003c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c96:	4b42      	ldr	r3, [pc, #264]	@ (8003da0 <xTaskResumeAll+0x118>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	603b      	str	r3, [r7, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cb6:	f001 fa3f 	bl	8005138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cba:	4b39      	ldr	r3, [pc, #228]	@ (8003da0 <xTaskResumeAll+0x118>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4a37      	ldr	r2, [pc, #220]	@ (8003da0 <xTaskResumeAll+0x118>)
 8003cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc4:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <xTaskResumeAll+0x118>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d162      	bne.n	8003d92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ccc:	4b35      	ldr	r3, [pc, #212]	@ (8003da4 <xTaskResumeAll+0x11c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05e      	beq.n	8003d92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd4:	e02f      	b.n	8003d36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd6:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <xTaskResumeAll+0x120>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fdca 	bl	800287c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fdc5 	bl	800287c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8003dac <xTaskResumeAll+0x124>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d903      	bls.n	8003d06 <xTaskResumeAll+0x7e>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	4a2a      	ldr	r2, [pc, #168]	@ (8003dac <xTaskResumeAll+0x124>)
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <xTaskResumeAll+0x128>)
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fe fd50 	bl	80027c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d26:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <xTaskResumeAll+0x12c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <xTaskResumeAll+0x130>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d36:	4b1c      	ldr	r3, [pc, #112]	@ (8003da8 <xTaskResumeAll+0x120>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cb      	bne.n	8003cd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d44:	f000 fb58 	bl	80043f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d48:	4b1c      	ldr	r3, [pc, #112]	@ (8003dbc <xTaskResumeAll+0x134>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d54:	f000 f846 	bl	8003de4 <xTaskIncrementTick>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <xTaskResumeAll+0x130>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f1      	bne.n	8003d54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <xTaskResumeAll+0x134>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d76:	4b10      	ldr	r3, [pc, #64]	@ (8003db8 <xTaskResumeAll+0x130>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d82:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <xTaskResumeAll+0x138>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d92:	f001 fa03 	bl	800519c <vPortExitCritical>

	return xAlreadyYielded;
 8003d96:	68bb      	ldr	r3, [r7, #8]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000cd4 	.word	0x20000cd4
 8003da4:	20000cac 	.word	0x20000cac
 8003da8:	20000c6c 	.word	0x20000c6c
 8003dac:	20000cb4 	.word	0x20000cb4
 8003db0:	200007dc 	.word	0x200007dc
 8003db4:	200007d8 	.word	0x200007d8
 8003db8:	20000cc0 	.word	0x20000cc0
 8003dbc:	20000cbc 	.word	0x20000cbc
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <xTaskGetTickCount+0x1c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dd0:	687b      	ldr	r3, [r7, #4]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000cb0 	.word	0x20000cb0

08003de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dee:	4b4f      	ldr	r3, [pc, #316]	@ (8003f2c <xTaskIncrementTick+0x148>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 8090 	bne.w	8003f18 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <xTaskIncrementTick+0x14c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e00:	4a4b      	ldr	r2, [pc, #300]	@ (8003f30 <xTaskIncrementTick+0x14c>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d121      	bne.n	8003e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e0c:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	603b      	str	r3, [r7, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <xTaskIncrementTick+0x46>
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	4b40      	ldr	r3, [pc, #256]	@ (8003f38 <xTaskIncrementTick+0x154>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f38 <xTaskIncrementTick+0x154>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b3e      	ldr	r3, [pc, #248]	@ (8003f3c <xTaskIncrementTick+0x158>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a3c      	ldr	r2, [pc, #240]	@ (8003f3c <xTaskIncrementTick+0x158>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	f000 fad4 	bl	80043f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d349      	bcc.n	8003eee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e64:	4b36      	ldr	r3, [pc, #216]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	601a      	str	r2, [r3, #0]
					break;
 8003e6c:	e03f      	b.n	8003eee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6e:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d203      	bcs.n	8003e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e86:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e8c:	e02f      	b.n	8003eee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fcf2 	bl	800287c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3318      	adds	r3, #24
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fce9 	bl	800287c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <xTaskIncrementTick+0x160>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d903      	bls.n	8003ebe <xTaskIncrementTick+0xda>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <xTaskIncrementTick+0x160>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <xTaskIncrementTick+0x164>)
 8003ecc:	441a      	add	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe fc74 	bl	80027c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ede:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <xTaskIncrementTick+0x168>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3b8      	bcc.n	8003e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eec:	e7b5      	b.n	8003e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eee:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <xTaskIncrementTick+0x168>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef4:	4914      	ldr	r1, [pc, #80]	@ (8003f48 <xTaskIncrementTick+0x164>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d901      	bls.n	8003f0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f0a:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <xTaskIncrementTick+0x16c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f12:	2301      	movs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e004      	b.n	8003f22 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f18:	4b0e      	ldr	r3, [pc, #56]	@ (8003f54 <xTaskIncrementTick+0x170>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <xTaskIncrementTick+0x170>)
 8003f20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000cd4 	.word	0x20000cd4
 8003f30:	20000cb0 	.word	0x20000cb0
 8003f34:	20000c64 	.word	0x20000c64
 8003f38:	20000c68 	.word	0x20000c68
 8003f3c:	20000cc4 	.word	0x20000cc4
 8003f40:	20000ccc 	.word	0x20000ccc
 8003f44:	20000cb4 	.word	0x20000cb4
 8003f48:	200007dc 	.word	0x200007dc
 8003f4c:	200007d8 	.word	0x200007d8
 8003f50:	20000cc0 	.word	0x20000cc0
 8003f54:	20000cbc 	.word	0x20000cbc

08003f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <vTaskSwitchContext+0xa8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f66:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <vTaskSwitchContext+0xac>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f6c:	e042      	b.n	8003ff4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f6e:	4b25      	ldr	r3, [pc, #148]	@ (8004004 <vTaskSwitchContext+0xac>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f74:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <vTaskSwitchContext+0xb0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e011      	b.n	8003fa0 <vTaskSwitchContext+0x48>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <vTaskSwitchContext+0x42>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <vTaskSwitchContext+0x3e>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	491a      	ldr	r1, [pc, #104]	@ (800400c <vTaskSwitchContext+0xb4>)
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0e3      	beq.n	8003f7c <vTaskSwitchContext+0x24>
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4a13      	ldr	r2, [pc, #76]	@ (800400c <vTaskSwitchContext+0xb4>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d104      	bne.n	8003fe4 <vTaskSwitchContext+0x8c>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <vTaskSwitchContext+0xb8>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4a06      	ldr	r2, [pc, #24]	@ (8004008 <vTaskSwitchContext+0xb0>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000cd4 	.word	0x20000cd4
 8004004:	20000cc0 	.word	0x20000cc0
 8004008:	20000cb4 	.word	0x20000cb4
 800400c:	200007dc 	.word	0x200007dc
 8004010:	200007d8 	.word	0x200007d8

08004014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <vTaskPlaceOnEventList+0x48>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3318      	adds	r3, #24
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fe fbe0 	bl	800280a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800404a:	2101      	movs	r1, #1
 800404c:	6838      	ldr	r0, [r7, #0]
 800404e:	f000 fb91 	bl	8004774 <prvAddCurrentTaskToDelayedList>
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200007d8 	.word	0x200007d8

08004060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	617b      	str	r3, [r7, #20]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800408a:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3318      	adds	r3, #24
 8004090:	4619      	mov	r1, r3
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7fe fb95 	bl	80027c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	68b8      	ldr	r0, [r7, #8]
 80040a8:	f000 fb64 	bl	8004774 <prvAddCurrentTaskToDelayedList>
	}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200007d8 	.word	0x200007d8

080040b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60fb      	str	r3, [r7, #12]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3318      	adds	r3, #24
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fbc6 	bl	800287c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <xTaskRemoveFromEventList+0xb0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11d      	bne.n	8004134 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fbbd 	bl	800287c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <xTaskRemoveFromEventList+0xb4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d903      	bls.n	8004116 <xTaskRemoveFromEventList+0x5e>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <xTaskRemoveFromEventList+0xb4>)
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <xTaskRemoveFromEventList+0xb8>)
 8004124:	441a      	add	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe fb48 	bl	80027c2 <vListInsertEnd>
 8004132:	e005      	b.n	8004140 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3318      	adds	r3, #24
 8004138:	4619      	mov	r1, r3
 800413a:	480e      	ldr	r0, [pc, #56]	@ (8004174 <xTaskRemoveFromEventList+0xbc>)
 800413c:	f7fe fb41 	bl	80027c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <xTaskRemoveFromEventList+0xc0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	429a      	cmp	r2, r3
 800414c:	d905      	bls.n	800415a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800414e:	2301      	movs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <xTaskRemoveFromEventList+0xc4>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e001      	b.n	800415e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800415e:	697b      	ldr	r3, [r7, #20]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000cd4 	.word	0x20000cd4
 800416c:	20000cb4 	.word	0x20000cb4
 8004170:	200007dc 	.word	0x200007dc
 8004174:	20000c6c 	.word	0x20000c6c
 8004178:	200007d8 	.word	0x200007d8
 800417c:	20000cc0 	.word	0x20000cc0

08004180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <vTaskInternalSetTimeOutState+0x24>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <vTaskInternalSetTimeOutState+0x28>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	20000cc4 	.word	0x20000cc4
 80041a8:	20000cb0 	.word	0x20000cb0

080041ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	613b      	str	r3, [r7, #16]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041f2:	f000 ffa1 	bl	8005138 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <xTaskCheckForTimeOut+0xc0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d102      	bne.n	8004216 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e023      	b.n	800425e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <xTaskCheckForTimeOut+0xc4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d007      	beq.n	8004232 <xTaskCheckForTimeOut+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e015      	b.n	800425e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d20b      	bcs.n	8004254 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff99 	bl	8004180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e004      	b.n	800425e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f000 ff9d 	bl	800519c <vPortExitCritical>

	return xReturn;
 8004262:	69fb      	ldr	r3, [r7, #28]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000cb0 	.word	0x20000cb0
 8004270:	20000cc4 	.word	0x20000cc4

08004274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <vTaskMissedYield+0x14>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000cc0 	.word	0x20000cc0

0800428c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004294:	f000 f852 	bl	800433c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004298:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <prvIdleTask+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d9f9      	bls.n	8004294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <prvIdleTask+0x2c>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b0:	e7f0      	b.n	8004294 <prvIdleTask+0x8>
 80042b2:	bf00      	nop
 80042b4:	200007dc 	.word	0x200007dc
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	e00c      	b.n	80042e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <prvInitialiseTaskLists+0x60>)
 80042d4:	4413      	add	r3, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fa46 	bl	8002768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b37      	cmp	r3, #55	@ 0x37
 80042e6:	d9ef      	bls.n	80042c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042e8:	480d      	ldr	r0, [pc, #52]	@ (8004320 <prvInitialiseTaskLists+0x64>)
 80042ea:	f7fe fa3d 	bl	8002768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ee:	480d      	ldr	r0, [pc, #52]	@ (8004324 <prvInitialiseTaskLists+0x68>)
 80042f0:	f7fe fa3a 	bl	8002768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042f4:	480c      	ldr	r0, [pc, #48]	@ (8004328 <prvInitialiseTaskLists+0x6c>)
 80042f6:	f7fe fa37 	bl	8002768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042fa:	480c      	ldr	r0, [pc, #48]	@ (800432c <prvInitialiseTaskLists+0x70>)
 80042fc:	f7fe fa34 	bl	8002768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004300:	480b      	ldr	r0, [pc, #44]	@ (8004330 <prvInitialiseTaskLists+0x74>)
 8004302:	f7fe fa31 	bl	8002768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <prvInitialiseTaskLists+0x78>)
 8004308:	4a05      	ldr	r2, [pc, #20]	@ (8004320 <prvInitialiseTaskLists+0x64>)
 800430a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <prvInitialiseTaskLists+0x7c>)
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <prvInitialiseTaskLists+0x68>)
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200007dc 	.word	0x200007dc
 8004320:	20000c3c 	.word	0x20000c3c
 8004324:	20000c50 	.word	0x20000c50
 8004328:	20000c6c 	.word	0x20000c6c
 800432c:	20000c80 	.word	0x20000c80
 8004330:	20000c98 	.word	0x20000c98
 8004334:	20000c64 	.word	0x20000c64
 8004338:	20000c68 	.word	0x20000c68

0800433c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004342:	e019      	b.n	8004378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004344:	f000 fef8 	bl	8005138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <prvCheckTasksWaitingTermination+0x50>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fa91 	bl	800287c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <prvCheckTasksWaitingTermination+0x54>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a0b      	ldr	r2, [pc, #44]	@ (8004390 <prvCheckTasksWaitingTermination+0x54>)
 8004362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800436c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800436e:	f000 ff15 	bl	800519c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f810 	bl	8004398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000c80 	.word	0x20000c80
 8004390:	20000cac 	.word	0x20000cac
 8004394:	20000c94 	.word	0x20000c94

08004398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 f8b2 	bl	8005518 <vPortFree>
				vPortFree( pxTCB );
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f8af 	bl	8005518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ba:	e019      	b.n	80043f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d103      	bne.n	80043ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f8a6 	bl	8005518 <vPortFree>
	}
 80043cc:	e010      	b.n	80043f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d00b      	beq.n	80043f0 <prvDeleteTCB+0x58>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <prvDeleteTCB+0x54>
	}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <prvResetNextTaskUnblockTime+0x38>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004408:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <prvResetNextTaskUnblockTime+0x3c>)
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004410:	e008      	b.n	8004424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a04      	ldr	r2, [pc, #16]	@ (8004434 <prvResetNextTaskUnblockTime+0x3c>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000c64 	.word	0x20000c64
 8004434:	20000ccc 	.word	0x20000ccc

08004438 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800443e:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <xTaskGetCurrentTaskHandle+0x1c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004444:	687b      	ldr	r3, [r7, #4]
	}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	200007d8 	.word	0x200007d8

08004458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <xTaskGetSchedulerState+0x34>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004466:	2301      	movs	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	e008      	b.n	800447e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800446c:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <xTaskGetSchedulerState+0x38>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004474:	2302      	movs	r3, #2
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	e001      	b.n	800447e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800447a:	2300      	movs	r3, #0
 800447c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800447e:	687b      	ldr	r3, [r7, #4]
	}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	20000cb8 	.word	0x20000cb8
 8004490:	20000cd4 	.word	0x20000cd4

08004494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d051      	beq.n	800454e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <xTaskPriorityInherit+0xc4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d241      	bcs.n	800453c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db06      	blt.n	80044ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <xTaskPriorityInherit+0xc4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6959      	ldr	r1, [r3, #20]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <xTaskPriorityInherit+0xc8>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4299      	cmp	r1, r3
 80044e4:	d122      	bne.n	800452c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9c6 	bl	800287c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <xTaskPriorityInherit+0xc4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fe:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <xTaskPriorityInherit+0xcc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d903      	bls.n	800450e <xTaskPriorityInherit+0x7a>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <xTaskPriorityInherit+0xcc>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a10      	ldr	r2, [pc, #64]	@ (800455c <xTaskPriorityInherit+0xc8>)
 800451c:	441a      	add	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7fe f94c 	bl	80027c2 <vListInsertEnd>
 800452a:	e004      	b.n	8004536 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <xTaskPriorityInherit+0xc4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004536:	2301      	movs	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e008      	b.n	800454e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <xTaskPriorityInherit+0xc4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	429a      	cmp	r2, r3
 8004548:	d201      	bcs.n	800454e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800454e:	68fb      	ldr	r3, [r7, #12]
	}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200007d8 	.word	0x200007d8
 800455c:	200007dc 	.word	0x200007dc
 8004560:	20000cb4 	.word	0x20000cb4

08004564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d058      	beq.n	800462c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800457a:	4b2f      	ldr	r3, [pc, #188]	@ (8004638 <xTaskPriorityDisinherit+0xd4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d00b      	beq.n	800459c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60bb      	str	r3, [r7, #8]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d02c      	beq.n	800462c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d128      	bne.n	800462c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe f94c 	bl	800287c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <xTaskPriorityDisinherit+0xd8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <xTaskPriorityDisinherit+0xa8>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4a0c      	ldr	r2, [pc, #48]	@ (800463c <xTaskPriorityDisinherit+0xd8>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <xTaskPriorityDisinherit+0xdc>)
 800461a:	441a      	add	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7fe f8cd 	bl	80027c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800462c:	697b      	ldr	r3, [r7, #20]
	}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200007d8 	.word	0x200007d8
 800463c:	20000cb4 	.word	0x20000cb4
 8004640:	200007dc 	.word	0x200007dc

08004644 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d06c      	beq.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d902      	bls.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e002      	b.n	8004692 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	d04c      	beq.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d147      	bne.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046a6:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d10b      	bne.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60bb      	str	r3, [r7, #8]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	db04      	blt.n	80046e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6959      	ldr	r1, [r3, #20]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80046f6:	4413      	add	r3, r2
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d11c      	bne.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe f8bb 	bl	800287c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d903      	bls.n	800471a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	4a0c      	ldr	r2, [pc, #48]	@ (8004748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a07      	ldr	r2, [pc, #28]	@ (8004744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004728:	441a      	add	r2, r3
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe f846 	bl	80027c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200007d8 	.word	0x200007d8
 8004744:	200007dc 	.word	0x200007dc
 8004748:	20000cb4 	.word	0x20000cb4

0800474c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800475e:	3201      	adds	r2, #1
 8004760:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004762:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 8004764:	681b      	ldr	r3, [r3, #0]
	}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	200007d8 	.word	0x200007d8

08004774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800477e:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <prvAddCurrentTaskToDelayedList+0x90>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004784:	4b20      	ldr	r3, [pc, #128]	@ (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe f876 	bl	800287c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d10a      	bne.n	80047ae <prvAddCurrentTaskToDelayedList+0x3a>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4819      	ldr	r0, [pc, #100]	@ (800480c <prvAddCurrentTaskToDelayedList+0x98>)
 80047a8:	f7fe f80b 	bl	80027c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ac:	e026      	b.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d209      	bcs.n	80047da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fe f819 	bl	800280a <vListInsert>
}
 80047d8:	e010      	b.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe f80f 	bl	800280a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d202      	bcs.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047f6:	4a08      	ldr	r2, [pc, #32]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000cb0 	.word	0x20000cb0
 8004808:	200007d8 	.word	0x200007d8
 800480c:	20000c98 	.word	0x20000c98
 8004810:	20000c68 	.word	0x20000c68
 8004814:	20000c64 	.word	0x20000c64
 8004818:	20000ccc 	.word	0x20000ccc

0800481c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004826:	f000 fb13 	bl	8004e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800482a:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <xTimerCreateTimerTask+0x84>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d021      	beq.n	8004876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800483a:	1d3a      	adds	r2, r7, #4
 800483c:	f107 0108 	add.w	r1, r7, #8
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd ff75 	bl	8002734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	9202      	str	r2, [sp, #8]
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	2302      	movs	r3, #2
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	460a      	mov	r2, r1
 800485c:	4911      	ldr	r1, [pc, #68]	@ (80048a4 <xTimerCreateTimerTask+0x88>)
 800485e:	4812      	ldr	r0, [pc, #72]	@ (80048a8 <xTimerCreateTimerTask+0x8c>)
 8004860:	f7fe ff4c 	bl	80036fc <xTaskCreateStatic>
 8004864:	4603      	mov	r3, r0
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <xTimerCreateTimerTask+0x90>)
 8004868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800486a:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <xTimerCreateTimerTask+0x90>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004872:	2301      	movs	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	613b      	str	r3, [r7, #16]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004894:	697b      	ldr	r3, [r7, #20]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000d08 	.word	0x20000d08
 80048a4:	08006130 	.word	0x08006130
 80048a8:	080049e9 	.word	0x080049e9
 80048ac:	20000d0c 	.word	0x20000d0c

080048b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <xTimerGenericCommand+0x98>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d02a      	beq.n	800493e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	dc18      	bgt.n	800492c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048fa:	f7ff fdad 	bl	8004458 <xTaskGetSchedulerState>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b02      	cmp	r3, #2
 8004902:	d109      	bne.n	8004918 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <xTimerGenericCommand+0x98>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	f107 0110 	add.w	r1, r7, #16
 800490c:	2300      	movs	r3, #0
 800490e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004910:	f7fe f9dc 	bl	8002ccc <xQueueGenericSend>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24
 8004916:	e012      	b.n	800493e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <xTimerGenericCommand+0x98>)
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	f107 0110 	add.w	r1, r7, #16
 8004920:	2300      	movs	r3, #0
 8004922:	2200      	movs	r2, #0
 8004924:	f7fe f9d2 	bl	8002ccc <xQueueGenericSend>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24
 800492a:	e008      	b.n	800493e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800492c:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <xTimerGenericCommand+0x98>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	f107 0110 	add.w	r1, r7, #16
 8004934:	2300      	movs	r3, #0
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	f7fe faca 	bl	8002ed0 <xQueueGenericSendFromISR>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	@ 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000d08 	.word	0x20000d08

0800494c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004956:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <prvProcessExpiredTimer+0x98>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd ff89 	bl	800287c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	18d1      	adds	r1, r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	6978      	ldr	r0, [r7, #20]
 8004986:	f000 f8d5 	bl	8004b34 <prvInsertTimerInActiveList>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004990:	2300      	movs	r3, #0
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	2100      	movs	r1, #0
 800499a:	6978      	ldr	r0, [r7, #20]
 800499c:	f7ff ff88 	bl	80048b0 <xTimerGenericCommand>
 80049a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d114      	bne.n	80049d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	4798      	blx	r3
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000d00 	.word	0x20000d00

080049e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f859 	bl	8004aac <prvGetNextExpireTime>
 80049fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4619      	mov	r1, r3
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f805 	bl	8004a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a06:	f000 f8d7 	bl	8004bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a0a:	bf00      	nop
 8004a0c:	e7f0      	b.n	80049f0 <prvTimerTask+0x8>
	...

08004a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a1a:	f7ff f927 	bl	8003c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f866 	bl	8004af4 <prvSampleTimeNow>
 8004a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d130      	bne.n	8004a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <prvProcessTimerOrBlockTask+0x3c>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d806      	bhi.n	8004a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a3e:	f7ff f923 	bl	8003c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff81 	bl	800494c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a4a:	e024      	b.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <prvProcessTimerOrBlockTask+0x90>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <prvProcessTimerOrBlockTask+0x50>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <prvProcessTimerOrBlockTask+0x52>
 8004a60:	2300      	movs	r3, #0
 8004a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a64:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <prvProcessTimerOrBlockTask+0x94>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	f7fe fe0f 	bl	8003694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a76:	f7ff f907 	bl	8003c88 <xTaskResumeAll>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <prvProcessTimerOrBlockTask+0x98>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
}
 8004a90:	e001      	b.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a92:	f7ff f8f9 	bl	8003c88 <xTaskResumeAll>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000d04 	.word	0x20000d04
 8004aa4:	20000d08 	.word	0x20000d08
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <prvGetNextExpireTime+0x44>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <prvGetNextExpireTime+0x16>
 8004abe:	2201      	movs	r2, #1
 8004ac0:	e000      	b.n	8004ac4 <prvGetNextExpireTime+0x18>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <prvGetNextExpireTime+0x44>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e001      	b.n	8004ae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000d00 	.word	0x20000d00

08004af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004afc:	f7ff f962 	bl	8003dc4 <xTaskGetTickCount>
 8004b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b02:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <prvSampleTimeNow+0x3c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d205      	bcs.n	8004b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b0c:	f000 f93a 	bl	8004d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <prvSampleTimeNow+0x3c>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b24:	68fb      	ldr	r3, [r7, #12]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000d10 	.word	0x20000d10

08004b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d812      	bhi.n	8004b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e01b      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b6e:	4b10      	ldr	r3, [pc, #64]	@ (8004bb0 <prvInsertTimerInActiveList+0x7c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fd fe46 	bl	800280a <vListInsert>
 8004b7e:	e012      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d206      	bcs.n	8004b96 <prvInsertTimerInActiveList+0x62>
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e007      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <prvInsertTimerInActiveList+0x80>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fd fe32 	bl	800280a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ba6:	697b      	ldr	r3, [r7, #20]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000d04 	.word	0x20000d04
 8004bb4:	20000d00 	.word	0x20000d00

08004bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	@ 0x38
 8004bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bbe:	e0ce      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da19      	bge.n	8004bfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	3304      	adds	r3, #4
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fb      	str	r3, [r7, #28]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf0:	6850      	ldr	r0, [r2, #4]
 8004bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f2c0 80ae 	blt.w	8004d5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd fe32 	bl	800287c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c18:	463b      	mov	r3, r7
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff6a 	bl	8004af4 <prvSampleTimeNow>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	f200 8097 	bhi.w	8004d58 <prvProcessReceivedCommands+0x1a0>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <prvProcessReceivedCommands+0x78>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c59 	.word	0x08004c59
 8004c3c:	08004ccf 	.word	0x08004ccf
 8004c40:	08004ce3 	.word	0x08004ce3
 8004c44:	08004d2f 	.word	0x08004d2f
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c59 	.word	0x08004c59
 8004c50:	08004ccf 	.word	0x08004ccf
 8004c54:	08004ce3 	.word	0x08004ce3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	18d1      	adds	r1, r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c78:	f7ff ff5c 	bl	8004b34 <prvInsertTimerInActiveList>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d061      	beq.n	8004d5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	441a      	add	r2, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004caa:	f7ff fe01 	bl	80048b0 <xTimerGenericCommand>
 8004cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d152      	bne.n	8004d5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61bb      	str	r3, [r7, #24]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ce0:	e03d      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	18d1      	adds	r1, r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d28:	f7ff ff04 	bl	8004b34 <prvInsertTimerInActiveList>
					break;
 8004d2c:	e017      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3e:	f000 fbeb 	bl	8005518 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d42:	e00c      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d56:	e002      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d58:	bf00      	nop
 8004d5a:	e000      	b.n	8004d5e <prvProcessReceivedCommands+0x1a6>
					break;
 8004d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <prvProcessReceivedCommands+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	1d39      	adds	r1, r7, #4
 8004d64:	2200      	movs	r2, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe f950 	bl	800300c <xQueueReceive>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f47f af26 	bne.w	8004bc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3730      	adds	r7, #48	@ 0x30
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000d08 	.word	0x20000d08

08004d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d8a:	e049      	b.n	8004e20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d96:	4b2c      	ldr	r3, [pc, #176]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fd fd69 	bl	800287c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02f      	beq.n	8004e20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d90e      	bls.n	8004df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dde:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7fd fd0e 	bl	800280a <vListInsert>
 8004dee:	e017      	b.n	8004e20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df0:	2300      	movs	r3, #0
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	2100      	movs	r1, #0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fd58 	bl	80048b0 <xTimerGenericCommand>
 8004e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	603b      	str	r3, [r7, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e20:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1b0      	bne.n	8004d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e2a:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <prvSwitchTimerLists+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a04      	ldr	r2, [pc, #16]	@ (8004e48 <prvSwitchTimerLists+0xc4>)
 8004e36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e38:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <prvSwitchTimerLists+0xc8>)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000d00 	.word	0x20000d00
 8004e4c:	20000d04 	.word	0x20000d04

08004e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e56:	f000 f96f 	bl	8005138 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <prvCheckForValidListAndQueue+0x60>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d120      	bne.n	8004ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e62:	4814      	ldr	r0, [pc, #80]	@ (8004eb4 <prvCheckForValidListAndQueue+0x64>)
 8004e64:	f7fd fc80 	bl	8002768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e68:	4813      	ldr	r0, [pc, #76]	@ (8004eb8 <prvCheckForValidListAndQueue+0x68>)
 8004e6a:	f7fd fc7d 	bl	8002768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <prvCheckForValidListAndQueue+0x6c>)
 8004e70:	4a10      	ldr	r2, [pc, #64]	@ (8004eb4 <prvCheckForValidListAndQueue+0x64>)
 8004e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <prvCheckForValidListAndQueue+0x70>)
 8004e76:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <prvCheckForValidListAndQueue+0x68>)
 8004e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ec4 <prvCheckForValidListAndQueue+0x74>)
 8004e80:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <prvCheckForValidListAndQueue+0x78>)
 8004e82:	2110      	movs	r1, #16
 8004e84:	200a      	movs	r0, #10
 8004e86:	f7fd fd8d 	bl	80029a4 <xQueueGenericCreateStatic>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <prvCheckForValidListAndQueue+0x60>)
 8004e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <prvCheckForValidListAndQueue+0x60>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <prvCheckForValidListAndQueue+0x60>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	490b      	ldr	r1, [pc, #44]	@ (8004ecc <prvCheckForValidListAndQueue+0x7c>)
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fbce 	bl	8003640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea4:	f000 f97a 	bl	800519c <vPortExitCritical>
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000d08 	.word	0x20000d08
 8004eb4:	20000cd8 	.word	0x20000cd8
 8004eb8:	20000cec 	.word	0x20000cec
 8004ebc:	20000d00 	.word	0x20000d00
 8004ec0:	20000d04 	.word	0x20000d04
 8004ec4:	20000db4 	.word	0x20000db4
 8004ec8:	20000d14 	.word	0x20000d14
 8004ecc:	08006138 	.word	0x08006138

08004ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f00:	4a0c      	ldr	r2, [pc, #48]	@ (8004f34 <pxPortInitialiseStack+0x64>)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b14      	subs	r3, #20
 8004f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b04      	subs	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f06f 0202 	mvn.w	r2, #2
 8004f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b20      	subs	r3, #32
 8004f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	08004f39 	.word	0x08004f39

08004f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f42:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <prvTaskExitError+0x58>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d00b      	beq.n	8004f64 <prvTaskExitError+0x2c>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <prvTaskExitError+0x28>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60bb      	str	r3, [r7, #8]
}
 8004f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f78:	bf00      	nop
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0fc      	beq.n	8004f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	2000000c 	.word	0x2000000c
	...

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	4770      	bx	lr
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fc8:	4808      	ldr	r0, [pc, #32]	@ (8004fec <prvPortStartFirstTask+0x24>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8814 	msr	CONTROL, r0
 8004fda:	b662      	cpsie	i
 8004fdc:	b661      	cpsie	f
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	df00      	svc	0
 8004fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fea:	bf00      	nop
 8004fec:	e000ed08 	.word	0xe000ed08

08004ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ff6:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <xPortStartScheduler+0x124>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a47      	ldr	r2, [pc, #284]	@ (8005118 <xPortStartScheduler+0x128>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10b      	bne.n	8005018 <xPortStartScheduler+0x28>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005018:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <xPortStartScheduler+0x124>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <xPortStartScheduler+0x12c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10b      	bne.n	800503a <xPortStartScheduler+0x4a>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	613b      	str	r3, [r7, #16]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800503a:	4b39      	ldr	r3, [pc, #228]	@ (8005120 <xPortStartScheduler+0x130>)
 800503c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	22ff      	movs	r2, #255	@ 0xff
 800504a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b31      	ldr	r3, [pc, #196]	@ (8005124 <xPortStartScheduler+0x134>)
 8005060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005062:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <xPortStartScheduler+0x138>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005068:	e009      	b.n	800507e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <xPortStartScheduler+0x138>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a2d      	ldr	r2, [pc, #180]	@ (8005128 <xPortStartScheduler+0x138>)
 8005072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d0ef      	beq.n	800506a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800508a:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <xPortStartScheduler+0x138>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1c3 0307 	rsb	r3, r3, #7
 8005092:	2b04      	cmp	r3, #4
 8005094:	d00b      	beq.n	80050ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <xPortStartScheduler+0x138>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <xPortStartScheduler+0x138>)
 80050b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <xPortStartScheduler+0x138>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050c0:	4a19      	ldr	r2, [pc, #100]	@ (8005128 <xPortStartScheduler+0x138>)
 80050c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050cc:	4b17      	ldr	r3, [pc, #92]	@ (800512c <xPortStartScheduler+0x13c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a16      	ldr	r2, [pc, #88]	@ (800512c <xPortStartScheduler+0x13c>)
 80050d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <xPortStartScheduler+0x13c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a13      	ldr	r2, [pc, #76]	@ (800512c <xPortStartScheduler+0x13c>)
 80050de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050e4:	f000 f8da 	bl	800529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <xPortStartScheduler+0x140>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050ee:	f000 f8f9 	bl	80052e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050f2:	4b10      	ldr	r3, [pc, #64]	@ (8005134 <xPortStartScheduler+0x144>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005134 <xPortStartScheduler+0x144>)
 80050f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050fe:	f7ff ff63 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005102:	f7fe ff29 	bl	8003f58 <vTaskSwitchContext>
	prvTaskExitError();
 8005106:	f7ff ff17 	bl	8004f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed00 	.word	0xe000ed00
 8005118:	410fc271 	.word	0x410fc271
 800511c:	410fc270 	.word	0x410fc270
 8005120:	e000e400 	.word	0xe000e400
 8005124:	20000e04 	.word	0x20000e04
 8005128:	20000e08 	.word	0x20000e08
 800512c:	e000ed20 	.word	0xe000ed20
 8005130:	2000000c 	.word	0x2000000c
 8005134:	e000ef34 	.word	0xe000ef34

08005138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <vPortEnterCritical+0x5c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a0e      	ldr	r2, [pc, #56]	@ (8005194 <vPortEnterCritical+0x5c>)
 800515a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800515c:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <vPortEnterCritical+0x5c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d110      	bne.n	8005186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <vPortEnterCritical+0x60>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <vPortEnterCritical+0x4e>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	603b      	str	r3, [r7, #0]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vPortEnterCritical+0x4a>
	}
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	2000000c 	.word	0x2000000c
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051a2:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <vPortExitCritical+0x26>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <vPortExitCritical+0x50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <vPortExitCritical+0x50>)
 80051ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051cc:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <vPortExitCritical+0x50>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <vPortExitCritical+0x44>
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	2000000c 	.word	0x2000000c

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	@ (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f7fe fe9a 	bl	8003f58 <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc09      	pop	{r0, r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005272:	f7fe fdb7 	bl	8003de4 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <xPortSysTickHandler+0x40>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
}
 800528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <vPortSetupTimerInterrupt+0x44>)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	4b04      	ldr	r3, [pc, #16]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000000 	.word	0x20000000
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052f4 <vPortEnableVFP+0x10>
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052ee:	6001      	str	r1, [r0, #0]
 80052f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052f2:	bf00      	nop
 80052f4:	e000ed88 	.word	0xe000ed88

080052f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d915      	bls.n	8005336 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800530a:	4a18      	ldr	r2, [pc, #96]	@ (800536c <vPortValidateInterruptPriority+0x74>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005314:	4b16      	ldr	r3, [pc, #88]	@ (8005370 <vPortValidateInterruptPriority+0x78>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	7afa      	ldrb	r2, [r7, #11]
 800531a:	429a      	cmp	r2, r3
 800531c:	d20b      	bcs.n	8005336 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005336:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <vPortValidateInterruptPriority+0x7c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <vPortValidateInterruptPriority+0x80>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d90b      	bls.n	800535e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	603b      	str	r3, [r7, #0]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <vPortValidateInterruptPriority+0x62>
	}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000e3f0 	.word	0xe000e3f0
 8005370:	20000e04 	.word	0x20000e04
 8005374:	e000ed0c 	.word	0xe000ed0c
 8005378:	20000e08 	.word	0x20000e08

0800537c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005388:	f7fe fc70 	bl	8003c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800538c:	4b5c      	ldr	r3, [pc, #368]	@ (8005500 <pvPortMalloc+0x184>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005394:	f000 f924 	bl	80055e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005398:	4b5a      	ldr	r3, [pc, #360]	@ (8005504 <pvPortMalloc+0x188>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 8095 	bne.w	80054d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053ac:	2208      	movs	r2, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	3308      	adds	r3, #8
 80053c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <pvPortMalloc+0x6e>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	617b      	str	r3, [r7, #20]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d06f      	beq.n	80054d0 <pvPortMalloc+0x154>
 80053f0:	4b45      	ldr	r3, [pc, #276]	@ (8005508 <pvPortMalloc+0x18c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d86a      	bhi.n	80054d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053fa:	4b44      	ldr	r3, [pc, #272]	@ (800550c <pvPortMalloc+0x190>)
 80053fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053fe:	4b43      	ldr	r3, [pc, #268]	@ (800550c <pvPortMalloc+0x190>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005404:	e004      	b.n	8005410 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d903      	bls.n	8005422 <pvPortMalloc+0xa6>
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f1      	bne.n	8005406 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005422:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <pvPortMalloc+0x184>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005428:	429a      	cmp	r2, r3
 800542a:	d051      	beq.n	80054d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	4413      	add	r3, r2
 8005434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad2      	subs	r2, r2, r3
 8005446:	2308      	movs	r3, #8
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	429a      	cmp	r2, r3
 800544c:	d920      	bls.n	8005490 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800544e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <pvPortMalloc+0xfc>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800548a:	69b8      	ldr	r0, [r7, #24]
 800548c:	f000 f90a 	bl	80056a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005490:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <pvPortMalloc+0x18c>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <pvPortMalloc+0x18c>)
 800549c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800549e:	4b1a      	ldr	r3, [pc, #104]	@ (8005508 <pvPortMalloc+0x18c>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <pvPortMalloc+0x194>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d203      	bcs.n	80054b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <pvPortMalloc+0x18c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <pvPortMalloc+0x194>)
 80054b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <pvPortMalloc+0x188>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054c6:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <pvPortMalloc+0x198>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a11      	ldr	r2, [pc, #68]	@ (8005514 <pvPortMalloc+0x198>)
 80054ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054d0:	f7fe fbda 	bl	8003c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <pvPortMalloc+0x17a>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <pvPortMalloc+0x176>
	return pvReturn;
 80054f6:	69fb      	ldr	r3, [r7, #28]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	@ 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20004a14 	.word	0x20004a14
 8005504:	20004a28 	.word	0x20004a28
 8005508:	20004a18 	.word	0x20004a18
 800550c:	20004a0c 	.word	0x20004a0c
 8005510:	20004a1c 	.word	0x20004a1c
 8005514:	20004a20 	.word	0x20004a20

08005518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04f      	beq.n	80055ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800552a:	2308      	movs	r3, #8
 800552c:	425b      	negs	r3, r3
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <vPortFree+0xbc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <vPortFree+0x46>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <vPortFree+0x66>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60bb      	str	r3, [r7, #8]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <vPortFree+0xbc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01e      	beq.n	80055ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11a      	bne.n	80055ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <vPortFree+0xbc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a4:	f7fe fb62 	bl	8003c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <vPortFree+0xc0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	4a09      	ldr	r2, [pc, #36]	@ (80055d8 <vPortFree+0xc0>)
 80055b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055b6:	6938      	ldr	r0, [r7, #16]
 80055b8:	f000 f874 	bl	80056a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055bc:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <vPortFree+0xc4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a06      	ldr	r2, [pc, #24]	@ (80055dc <vPortFree+0xc4>)
 80055c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055c6:	f7fe fb5f 	bl	8003c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20004a28 	.word	0x20004a28
 80055d8:	20004a18 	.word	0x20004a18
 80055dc:	20004a24 	.word	0x20004a24

080055e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055ec:	4b27      	ldr	r3, [pc, #156]	@ (800568c <prvHeapInit+0xac>)
 80055ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3307      	adds	r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0307 	bic.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	4a1f      	ldr	r2, [pc, #124]	@ (800568c <prvHeapInit+0xac>)
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005618:	4a1d      	ldr	r2, [pc, #116]	@ (8005690 <prvHeapInit+0xb0>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800561e:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <prvHeapInit+0xb0>)
 8005620:	2200      	movs	r2, #0
 8005622:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800562c:	2208      	movs	r2, #8
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a15      	ldr	r2, [pc, #84]	@ (8005694 <prvHeapInit+0xb4>)
 8005640:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005642:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <prvHeapInit+0xb4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800564a:	4b12      	ldr	r3, [pc, #72]	@ (8005694 <prvHeapInit+0xb4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005660:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <prvHeapInit+0xb4>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a0a      	ldr	r2, [pc, #40]	@ (8005698 <prvHeapInit+0xb8>)
 800566e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a09      	ldr	r2, [pc, #36]	@ (800569c <prvHeapInit+0xbc>)
 8005676:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005678:	4b09      	ldr	r3, [pc, #36]	@ (80056a0 <prvHeapInit+0xc0>)
 800567a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000e0c 	.word	0x20000e0c
 8005690:	20004a0c 	.word	0x20004a0c
 8005694:	20004a14 	.word	0x20004a14
 8005698:	20004a1c 	.word	0x20004a1c
 800569c:	20004a18 	.word	0x20004a18
 80056a0:	20004a28 	.word	0x20004a28

080056a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056ac:	4b28      	ldr	r3, [pc, #160]	@ (8005750 <prvInsertBlockIntoFreeList+0xac>)
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e002      	b.n	80056b8 <prvInsertBlockIntoFreeList+0x14>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d8f7      	bhi.n	80056b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d108      	bne.n	80056e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d118      	bne.n	800572c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b15      	ldr	r3, [pc, #84]	@ (8005754 <prvInsertBlockIntoFreeList+0xb0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d00d      	beq.n	8005722 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e008      	b.n	8005734 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005722:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <prvInsertBlockIntoFreeList+0xb0>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e003      	b.n	8005734 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d002      	beq.n	8005742 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20004a0c 	.word	0x20004a0c
 8005754:	20004a14 	.word	0x20004a14

08005758 <siprintf>:
 8005758:	b40e      	push	{r1, r2, r3}
 800575a:	b510      	push	{r4, lr}
 800575c:	b09d      	sub	sp, #116	@ 0x74
 800575e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005760:	9002      	str	r0, [sp, #8]
 8005762:	9006      	str	r0, [sp, #24]
 8005764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005768:	480a      	ldr	r0, [pc, #40]	@ (8005794 <siprintf+0x3c>)
 800576a:	9107      	str	r1, [sp, #28]
 800576c:	9104      	str	r1, [sp, #16]
 800576e:	490a      	ldr	r1, [pc, #40]	@ (8005798 <siprintf+0x40>)
 8005770:	f853 2b04 	ldr.w	r2, [r3], #4
 8005774:	9105      	str	r1, [sp, #20]
 8005776:	2400      	movs	r4, #0
 8005778:	a902      	add	r1, sp, #8
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005780:	f000 f9a2 	bl	8005ac8 <_svfiprintf_r>
 8005784:	9b02      	ldr	r3, [sp, #8]
 8005786:	701c      	strb	r4, [r3, #0]
 8005788:	b01d      	add	sp, #116	@ 0x74
 800578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578e:	b003      	add	sp, #12
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000010 	.word	0x20000010
 8005798:	ffff0208 	.word	0xffff0208

0800579c <memset>:
 800579c:	4402      	add	r2, r0
 800579e:	4603      	mov	r3, r0
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d100      	bne.n	80057a6 <memset+0xa>
 80057a4:	4770      	bx	lr
 80057a6:	f803 1b01 	strb.w	r1, [r3], #1
 80057aa:	e7f9      	b.n	80057a0 <memset+0x4>

080057ac <__errno>:
 80057ac:	4b01      	ldr	r3, [pc, #4]	@ (80057b4 <__errno+0x8>)
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000010 	.word	0x20000010

080057b8 <__libc_init_array>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4d0d      	ldr	r5, [pc, #52]	@ (80057f0 <__libc_init_array+0x38>)
 80057bc:	4c0d      	ldr	r4, [pc, #52]	@ (80057f4 <__libc_init_array+0x3c>)
 80057be:	1b64      	subs	r4, r4, r5
 80057c0:	10a4      	asrs	r4, r4, #2
 80057c2:	2600      	movs	r6, #0
 80057c4:	42a6      	cmp	r6, r4
 80057c6:	d109      	bne.n	80057dc <__libc_init_array+0x24>
 80057c8:	4d0b      	ldr	r5, [pc, #44]	@ (80057f8 <__libc_init_array+0x40>)
 80057ca:	4c0c      	ldr	r4, [pc, #48]	@ (80057fc <__libc_init_array+0x44>)
 80057cc:	f000 fc64 	bl	8006098 <_init>
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	2600      	movs	r6, #0
 80057d6:	42a6      	cmp	r6, r4
 80057d8:	d105      	bne.n	80057e6 <__libc_init_array+0x2e>
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e0:	4798      	blx	r3
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7ee      	b.n	80057c4 <__libc_init_array+0xc>
 80057e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ea:	4798      	blx	r3
 80057ec:	3601      	adds	r6, #1
 80057ee:	e7f2      	b.n	80057d6 <__libc_init_array+0x1e>
 80057f0:	080061ec 	.word	0x080061ec
 80057f4:	080061ec 	.word	0x080061ec
 80057f8:	080061ec 	.word	0x080061ec
 80057fc:	080061f0 	.word	0x080061f0

08005800 <__retarget_lock_acquire_recursive>:
 8005800:	4770      	bx	lr

08005802 <__retarget_lock_release_recursive>:
 8005802:	4770      	bx	lr

08005804 <memcpy>:
 8005804:	440a      	add	r2, r1
 8005806:	4291      	cmp	r1, r2
 8005808:	f100 33ff 	add.w	r3, r0, #4294967295
 800580c:	d100      	bne.n	8005810 <memcpy+0xc>
 800580e:	4770      	bx	lr
 8005810:	b510      	push	{r4, lr}
 8005812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800581a:	4291      	cmp	r1, r2
 800581c:	d1f9      	bne.n	8005812 <memcpy+0xe>
 800581e:	bd10      	pop	{r4, pc}

08005820 <_free_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	d041      	beq.n	80058ac <_free_r+0x8c>
 8005828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582c:	1f0c      	subs	r4, r1, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	18e4      	addlt	r4, r4, r3
 8005834:	f000 f8e0 	bl	80059f8 <__malloc_lock>
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <_free_r+0x90>)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	b933      	cbnz	r3, 800584c <_free_r+0x2c>
 800583e:	6063      	str	r3, [r4, #4]
 8005840:	6014      	str	r4, [r2, #0]
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f000 b8dc 	b.w	8005a04 <__malloc_unlock>
 800584c:	42a3      	cmp	r3, r4
 800584e:	d908      	bls.n	8005862 <_free_r+0x42>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf01      	itttt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	e7ed      	b.n	800583e <_free_r+0x1e>
 8005862:	461a      	mov	r2, r3
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b10b      	cbz	r3, 800586c <_free_r+0x4c>
 8005868:	42a3      	cmp	r3, r4
 800586a:	d9fa      	bls.n	8005862 <_free_r+0x42>
 800586c:	6811      	ldr	r1, [r2, #0]
 800586e:	1850      	adds	r0, r2, r1
 8005870:	42a0      	cmp	r0, r4
 8005872:	d10b      	bne.n	800588c <_free_r+0x6c>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	4401      	add	r1, r0
 8005878:	1850      	adds	r0, r2, r1
 800587a:	4283      	cmp	r3, r0
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	d1e0      	bne.n	8005842 <_free_r+0x22>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	6053      	str	r3, [r2, #4]
 8005886:	4408      	add	r0, r1
 8005888:	6010      	str	r0, [r2, #0]
 800588a:	e7da      	b.n	8005842 <_free_r+0x22>
 800588c:	d902      	bls.n	8005894 <_free_r+0x74>
 800588e:	230c      	movs	r3, #12
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	e7d6      	b.n	8005842 <_free_r+0x22>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf04      	itt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	bf04      	itt	eq
 80058a4:	1809      	addeq	r1, r1, r0
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	6054      	str	r4, [r2, #4]
 80058aa:	e7ca      	b.n	8005842 <_free_r+0x22>
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	20004b70 	.word	0x20004b70

080058b4 <sbrk_aligned>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4e0f      	ldr	r6, [pc, #60]	@ (80058f4 <sbrk_aligned+0x40>)
 80058b8:	460c      	mov	r4, r1
 80058ba:	6831      	ldr	r1, [r6, #0]
 80058bc:	4605      	mov	r5, r0
 80058be:	b911      	cbnz	r1, 80058c6 <sbrk_aligned+0x12>
 80058c0:	f000 fba4 	bl	800600c <_sbrk_r>
 80058c4:	6030      	str	r0, [r6, #0]
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 fb9f 	bl	800600c <_sbrk_r>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d103      	bne.n	80058da <sbrk_aligned+0x26>
 80058d2:	f04f 34ff 	mov.w	r4, #4294967295
 80058d6:	4620      	mov	r0, r4
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	1cc4      	adds	r4, r0, #3
 80058dc:	f024 0403 	bic.w	r4, r4, #3
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d0f8      	beq.n	80058d6 <sbrk_aligned+0x22>
 80058e4:	1a21      	subs	r1, r4, r0
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fb90 	bl	800600c <_sbrk_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d1f2      	bne.n	80058d6 <sbrk_aligned+0x22>
 80058f0:	e7ef      	b.n	80058d2 <sbrk_aligned+0x1e>
 80058f2:	bf00      	nop
 80058f4:	20004b6c 	.word	0x20004b6c

080058f8 <_malloc_r>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	1ccd      	adds	r5, r1, #3
 80058fe:	f025 0503 	bic.w	r5, r5, #3
 8005902:	3508      	adds	r5, #8
 8005904:	2d0c      	cmp	r5, #12
 8005906:	bf38      	it	cc
 8005908:	250c      	movcc	r5, #12
 800590a:	2d00      	cmp	r5, #0
 800590c:	4606      	mov	r6, r0
 800590e:	db01      	blt.n	8005914 <_malloc_r+0x1c>
 8005910:	42a9      	cmp	r1, r5
 8005912:	d904      	bls.n	800591e <_malloc_r+0x26>
 8005914:	230c      	movs	r3, #12
 8005916:	6033      	str	r3, [r6, #0]
 8005918:	2000      	movs	r0, #0
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059f4 <_malloc_r+0xfc>
 8005922:	f000 f869 	bl	80059f8 <__malloc_lock>
 8005926:	f8d8 3000 	ldr.w	r3, [r8]
 800592a:	461c      	mov	r4, r3
 800592c:	bb44      	cbnz	r4, 8005980 <_malloc_r+0x88>
 800592e:	4629      	mov	r1, r5
 8005930:	4630      	mov	r0, r6
 8005932:	f7ff ffbf 	bl	80058b4 <sbrk_aligned>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	4604      	mov	r4, r0
 800593a:	d158      	bne.n	80059ee <_malloc_r+0xf6>
 800593c:	f8d8 4000 	ldr.w	r4, [r8]
 8005940:	4627      	mov	r7, r4
 8005942:	2f00      	cmp	r7, #0
 8005944:	d143      	bne.n	80059ce <_malloc_r+0xd6>
 8005946:	2c00      	cmp	r4, #0
 8005948:	d04b      	beq.n	80059e2 <_malloc_r+0xea>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	4639      	mov	r1, r7
 800594e:	4630      	mov	r0, r6
 8005950:	eb04 0903 	add.w	r9, r4, r3
 8005954:	f000 fb5a 	bl	800600c <_sbrk_r>
 8005958:	4581      	cmp	r9, r0
 800595a:	d142      	bne.n	80059e2 <_malloc_r+0xea>
 800595c:	6821      	ldr	r1, [r4, #0]
 800595e:	1a6d      	subs	r5, r5, r1
 8005960:	4629      	mov	r1, r5
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ffa6 	bl	80058b4 <sbrk_aligned>
 8005968:	3001      	adds	r0, #1
 800596a:	d03a      	beq.n	80059e2 <_malloc_r+0xea>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	442b      	add	r3, r5
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	f8d8 3000 	ldr.w	r3, [r8]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	bb62      	cbnz	r2, 80059d4 <_malloc_r+0xdc>
 800597a:	f8c8 7000 	str.w	r7, [r8]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xa8>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d420      	bmi.n	80059c8 <_malloc_r+0xd0>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xc2>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f82f 	bl	8005a04 <__malloc_unlock>
 80059a6:	f104 000b 	add.w	r0, r4, #11
 80059aa:	1d23      	adds	r3, r4, #4
 80059ac:	f020 0007 	bic.w	r0, r0, #7
 80059b0:	1ac2      	subs	r2, r0, r3
 80059b2:	bf1c      	itt	ne
 80059b4:	1a1b      	subne	r3, r3, r0
 80059b6:	50a3      	strne	r3, [r4, r2]
 80059b8:	e7af      	b.n	800591a <_malloc_r+0x22>
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	42a3      	cmp	r3, r4
 80059be:	bf0c      	ite	eq
 80059c0:	f8c8 2000 	streq.w	r2, [r8]
 80059c4:	605a      	strne	r2, [r3, #4]
 80059c6:	e7eb      	b.n	80059a0 <_malloc_r+0xa8>
 80059c8:	4623      	mov	r3, r4
 80059ca:	6864      	ldr	r4, [r4, #4]
 80059cc:	e7ae      	b.n	800592c <_malloc_r+0x34>
 80059ce:	463c      	mov	r4, r7
 80059d0:	687f      	ldr	r7, [r7, #4]
 80059d2:	e7b6      	b.n	8005942 <_malloc_r+0x4a>
 80059d4:	461a      	mov	r2, r3
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d1fb      	bne.n	80059d4 <_malloc_r+0xdc>
 80059dc:	2300      	movs	r3, #0
 80059de:	6053      	str	r3, [r2, #4]
 80059e0:	e7de      	b.n	80059a0 <_malloc_r+0xa8>
 80059e2:	230c      	movs	r3, #12
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	4630      	mov	r0, r6
 80059e8:	f000 f80c 	bl	8005a04 <__malloc_unlock>
 80059ec:	e794      	b.n	8005918 <_malloc_r+0x20>
 80059ee:	6005      	str	r5, [r0, #0]
 80059f0:	e7d6      	b.n	80059a0 <_malloc_r+0xa8>
 80059f2:	bf00      	nop
 80059f4:	20004b70 	.word	0x20004b70

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	@ (8005a00 <__malloc_lock+0x8>)
 80059fa:	f7ff bf01 	b.w	8005800 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20004b68 	.word	0x20004b68

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	@ (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f7ff befc 	b.w	8005802 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20004b68 	.word	0x20004b68

08005a10 <__ssputs_r>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	688e      	ldr	r6, [r1, #8]
 8005a16:	461f      	mov	r7, r3
 8005a18:	42be      	cmp	r6, r7
 8005a1a:	680b      	ldr	r3, [r1, #0]
 8005a1c:	4682      	mov	sl, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4690      	mov	r8, r2
 8005a22:	d82d      	bhi.n	8005a80 <__ssputs_r+0x70>
 8005a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a2c:	d026      	beq.n	8005a7c <__ssputs_r+0x6c>
 8005a2e:	6965      	ldr	r5, [r4, #20]
 8005a30:	6909      	ldr	r1, [r1, #16]
 8005a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a36:	eba3 0901 	sub.w	r9, r3, r1
 8005a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a3e:	1c7b      	adds	r3, r7, #1
 8005a40:	444b      	add	r3, r9
 8005a42:	106d      	asrs	r5, r5, #1
 8005a44:	429d      	cmp	r5, r3
 8005a46:	bf38      	it	cc
 8005a48:	461d      	movcc	r5, r3
 8005a4a:	0553      	lsls	r3, r2, #21
 8005a4c:	d527      	bpl.n	8005a9e <__ssputs_r+0x8e>
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7ff ff52 	bl	80058f8 <_malloc_r>
 8005a54:	4606      	mov	r6, r0
 8005a56:	b360      	cbz	r0, 8005ab2 <__ssputs_r+0xa2>
 8005a58:	6921      	ldr	r1, [r4, #16]
 8005a5a:	464a      	mov	r2, r9
 8005a5c:	f7ff fed2 	bl	8005804 <memcpy>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	6126      	str	r6, [r4, #16]
 8005a6e:	6165      	str	r5, [r4, #20]
 8005a70:	444e      	add	r6, r9
 8005a72:	eba5 0509 	sub.w	r5, r5, r9
 8005a76:	6026      	str	r6, [r4, #0]
 8005a78:	60a5      	str	r5, [r4, #8]
 8005a7a:	463e      	mov	r6, r7
 8005a7c:	42be      	cmp	r6, r7
 8005a7e:	d900      	bls.n	8005a82 <__ssputs_r+0x72>
 8005a80:	463e      	mov	r6, r7
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	4632      	mov	r2, r6
 8005a86:	4641      	mov	r1, r8
 8005a88:	f000 faa6 	bl	8005fd8 <memmove>
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	1b9b      	subs	r3, r3, r6
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	4433      	add	r3, r6
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	f000 fac4 	bl	800602c <_realloc_r>
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1e0      	bne.n	8005a6c <__ssputs_r+0x5c>
 8005aaa:	6921      	ldr	r1, [r4, #16]
 8005aac:	4650      	mov	r0, sl
 8005aae:	f7ff feb7 	bl	8005820 <_free_r>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	f8ca 3000 	str.w	r3, [sl]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e7e9      	b.n	8005a9a <__ssputs_r+0x8a>
	...

08005ac8 <_svfiprintf_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4698      	mov	r8, r3
 8005ace:	898b      	ldrh	r3, [r1, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	b09d      	sub	sp, #116	@ 0x74
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	d510      	bpl.n	8005afe <_svfiprintf_r+0x36>
 8005adc:	690b      	ldr	r3, [r1, #16]
 8005ade:	b973      	cbnz	r3, 8005afe <_svfiprintf_r+0x36>
 8005ae0:	2140      	movs	r1, #64	@ 0x40
 8005ae2:	f7ff ff09 	bl	80058f8 <_malloc_r>
 8005ae6:	6028      	str	r0, [r5, #0]
 8005ae8:	6128      	str	r0, [r5, #16]
 8005aea:	b930      	cbnz	r0, 8005afa <_svfiprintf_r+0x32>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	b01d      	add	sp, #116	@ 0x74
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	2340      	movs	r3, #64	@ 0x40
 8005afc:	616b      	str	r3, [r5, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b02:	2320      	movs	r3, #32
 8005b04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0c:	2330      	movs	r3, #48	@ 0x30
 8005b0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cac <_svfiprintf_r+0x1e4>
 8005b12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b16:	f04f 0901 	mov.w	r9, #1
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	469a      	mov	sl, r3
 8005b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b22:	b10a      	cbz	r2, 8005b28 <_svfiprintf_r+0x60>
 8005b24:	2a25      	cmp	r2, #37	@ 0x25
 8005b26:	d1f9      	bne.n	8005b1c <_svfiprintf_r+0x54>
 8005b28:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2c:	d00b      	beq.n	8005b46 <_svfiprintf_r+0x7e>
 8005b2e:	465b      	mov	r3, fp
 8005b30:	4622      	mov	r2, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ff6b 	bl	8005a10 <__ssputs_r>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f000 80a7 	beq.w	8005c8e <_svfiprintf_r+0x1c6>
 8005b40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b42:	445a      	add	r2, fp
 8005b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b46:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 809f 	beq.w	8005c8e <_svfiprintf_r+0x1c6>
 8005b50:	2300      	movs	r3, #0
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295
 8005b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5a:	f10a 0a01 	add.w	sl, sl, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	9307      	str	r3, [sp, #28]
 8005b62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b68:	4654      	mov	r4, sl
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b70:	484e      	ldr	r0, [pc, #312]	@ (8005cac <_svfiprintf_r+0x1e4>)
 8005b72:	f7fa fb3d 	bl	80001f0 <memchr>
 8005b76:	9a04      	ldr	r2, [sp, #16]
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_svfiprintf_r+0xea>
 8005b7a:	06d0      	lsls	r0, r2, #27
 8005b7c:	bf44      	itt	mi
 8005b7e:	2320      	movmi	r3, #32
 8005b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b84:	0711      	lsls	r1, r2, #28
 8005b86:	bf44      	itt	mi
 8005b88:	232b      	movmi	r3, #43	@ 0x2b
 8005b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b94:	d015      	beq.n	8005bc2 <_svfiprintf_r+0xfa>
 8005b96:	9a07      	ldr	r2, [sp, #28]
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f04f 0c0a 	mov.w	ip, #10
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba6:	3b30      	subs	r3, #48	@ 0x30
 8005ba8:	2b09      	cmp	r3, #9
 8005baa:	d94b      	bls.n	8005c44 <_svfiprintf_r+0x17c>
 8005bac:	b1b0      	cbz	r0, 8005bdc <_svfiprintf_r+0x114>
 8005bae:	9207      	str	r2, [sp, #28]
 8005bb0:	e014      	b.n	8005bdc <_svfiprintf_r+0x114>
 8005bb2:	eba0 0308 	sub.w	r3, r0, r8
 8005bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	e7d2      	b.n	8005b68 <_svfiprintf_r+0xa0>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	9103      	str	r1, [sp, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfbb      	ittet	lt
 8005bce:	425b      	neglt	r3, r3
 8005bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd4:	9307      	strge	r3, [sp, #28]
 8005bd6:	9307      	strlt	r3, [sp, #28]
 8005bd8:	bfb8      	it	lt
 8005bda:	9204      	strlt	r2, [sp, #16]
 8005bdc:	7823      	ldrb	r3, [r4, #0]
 8005bde:	2b2e      	cmp	r3, #46	@ 0x2e
 8005be0:	d10a      	bne.n	8005bf8 <_svfiprintf_r+0x130>
 8005be2:	7863      	ldrb	r3, [r4, #1]
 8005be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be6:	d132      	bne.n	8005c4e <_svfiprintf_r+0x186>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	9203      	str	r2, [sp, #12]
 8005bf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bf4:	3402      	adds	r4, #2
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cbc <_svfiprintf_r+0x1f4>
 8005bfc:	7821      	ldrb	r1, [r4, #0]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	4650      	mov	r0, sl
 8005c02:	f7fa faf5 	bl	80001f0 <memchr>
 8005c06:	b138      	cbz	r0, 8005c18 <_svfiprintf_r+0x150>
 8005c08:	9b04      	ldr	r3, [sp, #16]
 8005c0a:	eba0 000a 	sub.w	r0, r0, sl
 8005c0e:	2240      	movs	r2, #64	@ 0x40
 8005c10:	4082      	lsls	r2, r0
 8005c12:	4313      	orrs	r3, r2
 8005c14:	3401      	adds	r4, #1
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	4824      	ldr	r0, [pc, #144]	@ (8005cb0 <_svfiprintf_r+0x1e8>)
 8005c1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c22:	2206      	movs	r2, #6
 8005c24:	f7fa fae4 	bl	80001f0 <memchr>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d036      	beq.n	8005c9a <_svfiprintf_r+0x1d2>
 8005c2c:	4b21      	ldr	r3, [pc, #132]	@ (8005cb4 <_svfiprintf_r+0x1ec>)
 8005c2e:	bb1b      	cbnz	r3, 8005c78 <_svfiprintf_r+0x1b0>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	3307      	adds	r3, #7
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3e:	4433      	add	r3, r6
 8005c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c42:	e76a      	b.n	8005b1a <_svfiprintf_r+0x52>
 8005c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c48:	460c      	mov	r4, r1
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7a8      	b.n	8005ba0 <_svfiprintf_r+0xd8>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	3401      	adds	r4, #1
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	4619      	mov	r1, r3
 8005c56:	f04f 0c0a 	mov.w	ip, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c60:	3a30      	subs	r2, #48	@ 0x30
 8005c62:	2a09      	cmp	r2, #9
 8005c64:	d903      	bls.n	8005c6e <_svfiprintf_r+0x1a6>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c6      	beq.n	8005bf8 <_svfiprintf_r+0x130>
 8005c6a:	9105      	str	r1, [sp, #20]
 8005c6c:	e7c4      	b.n	8005bf8 <_svfiprintf_r+0x130>
 8005c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c72:	4604      	mov	r4, r0
 8005c74:	2301      	movs	r3, #1
 8005c76:	e7f0      	b.n	8005c5a <_svfiprintf_r+0x192>
 8005c78:	ab03      	add	r3, sp, #12
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <_svfiprintf_r+0x1f0>)
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	4638      	mov	r0, r7
 8005c84:	f3af 8000 	nop.w
 8005c88:	1c42      	adds	r2, r0, #1
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	d1d6      	bne.n	8005c3c <_svfiprintf_r+0x174>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	065b      	lsls	r3, r3, #25
 8005c92:	f53f af2d 	bmi.w	8005af0 <_svfiprintf_r+0x28>
 8005c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c98:	e72c      	b.n	8005af4 <_svfiprintf_r+0x2c>
 8005c9a:	ab03      	add	r3, sp, #12
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <_svfiprintf_r+0x1f0>)
 8005ca2:	a904      	add	r1, sp, #16
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f000 f879 	bl	8005d9c <_printf_i>
 8005caa:	e7ed      	b.n	8005c88 <_svfiprintf_r+0x1c0>
 8005cac:	080061b0 	.word	0x080061b0
 8005cb0:	080061ba 	.word	0x080061ba
 8005cb4:	00000000 	.word	0x00000000
 8005cb8:	08005a11 	.word	0x08005a11
 8005cbc:	080061b6 	.word	0x080061b6

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3b00      	subs	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c8      	blx	r9
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf02      	ittt	eq
 8005d32:	68e5      	ldreq	r5, [r4, #12]
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	1aed      	subeq	r5, r5, r3
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c8      	blx	r9
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	@ 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c8      	blx	r9
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005da4:	2f78      	cmp	r7, #120	@ 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	@ 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d1 	beq.w	8005f60 <_printf_i+0x1c4>
 8005dbe:	2f58      	cmp	r7, #88	@ 0x58
 8005dc0:	f000 80b8 	beq.w	8005f34 <_printf_i+0x198>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f47 	.word	0x08005f47
 8005e0c:	08005e73 	.word	0x08005e73
 8005e10:	08005f01 	.word	0x08005f01
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f69 	.word	0x08005f69
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e73 	.word	0x08005e73
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f09 	.word	0x08005f09
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6032      	str	r2, [r6, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e09c      	b.n	8005f82 <_printf_i+0x1e6>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xbc>
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <_printf_i+0xc4>
 8005e58:	0645      	lsls	r5, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xb8>
 8005e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_i+0xd0>
 8005e64:	232d      	movs	r3, #45	@ 0x2d
 8005e66:	426d      	negs	r5, r5
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	4858      	ldr	r0, [pc, #352]	@ (8005fd0 <_printf_i+0x234>)
 8005e6e:	230a      	movs	r3, #10
 8005e70:	e011      	b.n	8005e96 <_printf_i+0xfa>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	0608      	lsls	r0, r1, #24
 8005e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e7c:	d402      	bmi.n	8005e84 <_printf_i+0xe8>
 8005e7e:	0649      	lsls	r1, r1, #25
 8005e80:	bf48      	it	mi
 8005e82:	b2ad      	uxthmi	r5, r5
 8005e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e86:	4852      	ldr	r0, [pc, #328]	@ (8005fd0 <_printf_i+0x234>)
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	bf14      	ite	ne
 8005e8c:	230a      	movne	r3, #10
 8005e8e:	2308      	moveq	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	db05      	blt.n	8005eaa <_printf_i+0x10e>
 8005e9e:	6821      	ldr	r1, [r4, #0]
 8005ea0:	432e      	orrs	r6, r5
 8005ea2:	f021 0104 	bic.w	r1, r1, #4
 8005ea6:	6021      	str	r1, [r4, #0]
 8005ea8:	d04b      	beq.n	8005f42 <_printf_i+0x1a6>
 8005eaa:	4616      	mov	r6, r2
 8005eac:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb0:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb4:	5dc7      	ldrb	r7, [r0, r7]
 8005eb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eba:	462f      	mov	r7, r5
 8005ebc:	42bb      	cmp	r3, r7
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	d9f4      	bls.n	8005eac <_printf_i+0x110>
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d10b      	bne.n	8005ede <_printf_i+0x142>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07df      	lsls	r7, r3, #31
 8005eca:	d508      	bpl.n	8005ede <_printf_i+0x142>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	6861      	ldr	r1, [r4, #4]
 8005ed0:	4299      	cmp	r1, r3
 8005ed2:	bfde      	ittt	le
 8005ed4:	2330      	movle	r3, #48	@ 0x30
 8005ed6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ede:	1b92      	subs	r2, r2, r6
 8005ee0:	6122      	str	r2, [r4, #16]
 8005ee2:	f8cd a000 	str.w	sl, [sp]
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	aa03      	add	r2, sp, #12
 8005eea:	4621      	mov	r1, r4
 8005eec:	4640      	mov	r0, r8
 8005eee:	f7ff fee7 	bl	8005cc0 <_printf_common>
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d14a      	bne.n	8005f8c <_printf_i+0x1f0>
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f043 0320 	orr.w	r3, r3, #32
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	4832      	ldr	r0, [pc, #200]	@ (8005fd4 <_printf_i+0x238>)
 8005f0a:	2778      	movs	r7, #120	@ 0x78
 8005f0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	6831      	ldr	r1, [r6, #0]
 8005f14:	061f      	lsls	r7, r3, #24
 8005f16:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f1a:	d402      	bmi.n	8005f22 <_printf_i+0x186>
 8005f1c:	065f      	lsls	r7, r3, #25
 8005f1e:	bf48      	it	mi
 8005f20:	b2ad      	uxthmi	r5, r5
 8005f22:	6031      	str	r1, [r6, #0]
 8005f24:	07d9      	lsls	r1, r3, #31
 8005f26:	bf44      	itt	mi
 8005f28:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2c:	6023      	strmi	r3, [r4, #0]
 8005f2e:	b11d      	cbz	r5, 8005f38 <_printf_i+0x19c>
 8005f30:	2310      	movs	r3, #16
 8005f32:	e7ad      	b.n	8005e90 <_printf_i+0xf4>
 8005f34:	4826      	ldr	r0, [pc, #152]	@ (8005fd0 <_printf_i+0x234>)
 8005f36:	e7e9      	b.n	8005f0c <_printf_i+0x170>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	e7f6      	b.n	8005f30 <_printf_i+0x194>
 8005f42:	4616      	mov	r6, r2
 8005f44:	e7bd      	b.n	8005ec2 <_printf_i+0x126>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	6961      	ldr	r1, [r4, #20]
 8005f4c:	1d18      	adds	r0, r3, #4
 8005f4e:	6030      	str	r0, [r6, #0]
 8005f50:	062e      	lsls	r6, r5, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	d501      	bpl.n	8005f5a <_printf_i+0x1be>
 8005f56:	6019      	str	r1, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <_printf_i+0x1c4>
 8005f5a:	0668      	lsls	r0, r5, #25
 8005f5c:	d5fb      	bpl.n	8005f56 <_printf_i+0x1ba>
 8005f5e:	8019      	strh	r1, [r3, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	4616      	mov	r6, r2
 8005f66:	e7bc      	b.n	8005ee2 <_printf_i+0x146>
 8005f68:	6833      	ldr	r3, [r6, #0]
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	6032      	str	r2, [r6, #0]
 8005f6e:	681e      	ldr	r6, [r3, #0]
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	2100      	movs	r1, #0
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7fa f93b 	bl	80001f0 <memchr>
 8005f7a:	b108      	cbz	r0, 8005f80 <_printf_i+0x1e4>
 8005f7c:	1b80      	subs	r0, r0, r6
 8005f7e:	6060      	str	r0, [r4, #4]
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f8a:	e7aa      	b.n	8005ee2 <_printf_i+0x146>
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	4632      	mov	r2, r6
 8005f90:	4649      	mov	r1, r9
 8005f92:	4640      	mov	r0, r8
 8005f94:	47d0      	blx	sl
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0ad      	beq.n	8005ef6 <_printf_i+0x15a>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	079b      	lsls	r3, r3, #30
 8005f9e:	d413      	bmi.n	8005fc8 <_printf_i+0x22c>
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	bfb8      	it	lt
 8005fa8:	4618      	movlt	r0, r3
 8005faa:	e7a6      	b.n	8005efa <_printf_i+0x15e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	47d0      	blx	sl
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d09d      	beq.n	8005ef6 <_printf_i+0x15a>
 8005fba:	3501      	adds	r5, #1
 8005fbc:	68e3      	ldr	r3, [r4, #12]
 8005fbe:	9903      	ldr	r1, [sp, #12]
 8005fc0:	1a5b      	subs	r3, r3, r1
 8005fc2:	42ab      	cmp	r3, r5
 8005fc4:	dcf2      	bgt.n	8005fac <_printf_i+0x210>
 8005fc6:	e7eb      	b.n	8005fa0 <_printf_i+0x204>
 8005fc8:	2500      	movs	r5, #0
 8005fca:	f104 0619 	add.w	r6, r4, #25
 8005fce:	e7f5      	b.n	8005fbc <_printf_i+0x220>
 8005fd0:	080061c1 	.word	0x080061c1
 8005fd4:	080061d2 	.word	0x080061d2

08005fd8 <memmove>:
 8005fd8:	4288      	cmp	r0, r1
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	eb01 0402 	add.w	r4, r1, r2
 8005fe0:	d902      	bls.n	8005fe8 <memmove+0x10>
 8005fe2:	4284      	cmp	r4, r0
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	d807      	bhi.n	8005ff8 <memmove+0x20>
 8005fe8:	1e43      	subs	r3, r0, #1
 8005fea:	42a1      	cmp	r1, r4
 8005fec:	d008      	beq.n	8006000 <memmove+0x28>
 8005fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ff6:	e7f8      	b.n	8005fea <memmove+0x12>
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	428a      	cmp	r2, r1
 8005ffe:	d100      	bne.n	8006002 <memmove+0x2a>
 8006000:	bd10      	pop	{r4, pc}
 8006002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800600a:	e7f7      	b.n	8005ffc <memmove+0x24>

0800600c <_sbrk_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d06      	ldr	r5, [pc, #24]	@ (8006028 <_sbrk_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fa fd2c 	bl	8000a74 <_sbrk>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_sbrk_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_sbrk_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20004b64 	.word	0x20004b64

0800602c <_realloc_r>:
 800602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	4607      	mov	r7, r0
 8006032:	4614      	mov	r4, r2
 8006034:	460d      	mov	r5, r1
 8006036:	b921      	cbnz	r1, 8006042 <_realloc_r+0x16>
 8006038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	4611      	mov	r1, r2
 800603e:	f7ff bc5b 	b.w	80058f8 <_malloc_r>
 8006042:	b92a      	cbnz	r2, 8006050 <_realloc_r+0x24>
 8006044:	f7ff fbec 	bl	8005820 <_free_r>
 8006048:	4625      	mov	r5, r4
 800604a:	4628      	mov	r0, r5
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	f000 f81a 	bl	8006088 <_malloc_usable_size_r>
 8006054:	4284      	cmp	r4, r0
 8006056:	4606      	mov	r6, r0
 8006058:	d802      	bhi.n	8006060 <_realloc_r+0x34>
 800605a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800605e:	d8f4      	bhi.n	800604a <_realloc_r+0x1e>
 8006060:	4621      	mov	r1, r4
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff fc48 	bl	80058f8 <_malloc_r>
 8006068:	4680      	mov	r8, r0
 800606a:	b908      	cbnz	r0, 8006070 <_realloc_r+0x44>
 800606c:	4645      	mov	r5, r8
 800606e:	e7ec      	b.n	800604a <_realloc_r+0x1e>
 8006070:	42b4      	cmp	r4, r6
 8006072:	4622      	mov	r2, r4
 8006074:	4629      	mov	r1, r5
 8006076:	bf28      	it	cs
 8006078:	4632      	movcs	r2, r6
 800607a:	f7ff fbc3 	bl	8005804 <memcpy>
 800607e:	4629      	mov	r1, r5
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff fbcd 	bl	8005820 <_free_r>
 8006086:	e7f1      	b.n	800606c <_realloc_r+0x40>

08006088 <_malloc_usable_size_r>:
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f18      	subs	r0, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfbc      	itt	lt
 8006092:	580b      	ldrlt	r3, [r1, r0]
 8006094:	18c0      	addlt	r0, r0, r3
 8006096:	4770      	bx	lr

08006098 <_init>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr

080060a4 <_fini>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr
