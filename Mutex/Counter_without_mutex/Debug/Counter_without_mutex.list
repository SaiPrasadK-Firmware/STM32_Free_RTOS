
Counter_without_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005c90  08005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d98  08005d98  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da0  08005da0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005da4  08005da4  00006da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005da8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000060  08005e08  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb8  08005e08  00007bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016121  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003176  00000000  00000000  0001d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00020328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f67  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b83  00000000  00000000  0002265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e8  00000000  00000000  000261e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097eed  00000000  00000000  0003b6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d35b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ac  00000000  00000000  000d35fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d8ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c78 	.word	0x08005c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005c78 	.word	0x08005c78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
static void MX_USART2_UART_Init(void);
void IncTask(void *argument);
void UART_Send_String(char *s);

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  HAL_Init();
 80005c0:	f000 fab2 	bl	8000b28 <HAL_Init>
  SystemClock_Config();
 80005c4:	f000 f82e 	bl	8000624 <SystemClock_Config>
  MX_GPIO_Init();
 80005c8:	f000 f8b6 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f88a 	bl	80006e4 <MX_USART2_UART_Init>

  osKernelInitialize();
 80005d0:	f002 f89a 	bl	8002708 <osKernelInitialize>
  UART_Send_String("Race Condition without mutex !\n");
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <main+0x48>)
 80005d6:	f000 f8f1 	bl	80007bc <UART_Send_String>

  /* Create tasks */
  IncrementTask1Handle = osThreadNew(IncTask, "TASK 1", &Increment1Task_attributes);
 80005da:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <main+0x4c>)
 80005dc:	490b      	ldr	r1, [pc, #44]	@ (800060c <main+0x50>)
 80005de:	480c      	ldr	r0, [pc, #48]	@ (8000610 <main+0x54>)
 80005e0:	f002 f8dc 	bl	800279c <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <main+0x58>)
 80005e8:	6013      	str	r3, [r2, #0]
  IncrementTask2Handle = osThreadNew(IncTask,"TASK 2", &IncrementTask2_attributes);
 80005ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <main+0x5c>)
 80005ec:	490b      	ldr	r1, [pc, #44]	@ (800061c <main+0x60>)
 80005ee:	4808      	ldr	r0, [pc, #32]	@ (8000610 <main+0x54>)
 80005f0:	f002 f8d4 	bl	800279c <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <main+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005fa:	f002 f8a9 	bl	8002750 <osKernelStart>

  while (1) {}
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x42>
 8000602:	bf00      	nop
 8000604:	08005cb0 	.word	0x08005cb0
 8000608:	08005d04 	.word	0x08005d04
 800060c:	08005cd0 	.word	0x08005cd0
 8000610:	0800076d 	.word	0x0800076d
 8000614:	200000c8 	.word	0x200000c8
 8000618:	08005d28 	.word	0x08005d28
 800061c:	08005cd8 	.word	0x08005cd8
 8000620:	200000cc 	.word	0x200000cc

08000624 <SystemClock_Config>:
}

void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fea2 	bl	800537c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemClock_Config+0xb8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <SystemClock_Config+0xb8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <SystemClock_Config+0xbc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <SystemClock_Config+0xbc>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <SystemClock_Config+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fced 	bl	8001078 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x84>
    Error_Handler();
 80006a4:	f000 f8b2 	bl	800080c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff50 	bl	8001568 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
    Error_Handler();
 80006ce:	f000 f89d 	bl	800080c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 fba4 	bl	8001e68 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000726:	f000 f871 	bl	800080c <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000007c 	.word	0x2000007c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:



static void MX_GPIO_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x30>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x30>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_GPIO_Init+0x30>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <IncTask>:

void IncTask(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b090      	sub	sp, #64	@ 0x40
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  char msg[50];
  char *taskName = (char *)argument;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c

  while (1)
  {
    if (counter < 100)   // total counts across both tasks
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <IncTask+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b63      	cmp	r3, #99	@ 0x63
 800077e:	d812      	bhi.n	80007a6 <IncTask+0x3a>
    {
      sprintf(msg, "%s: %u\r\n", taskName, (unsigned int)counter);
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <IncTask+0x48>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f107 0008 	add.w	r0, r7, #8
 8000788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800078a:	490b      	ldr	r1, [pc, #44]	@ (80007b8 <IncTask+0x4c>)
 800078c:	f004 fdd4 	bl	8005338 <siprintf>
      counter++;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <IncTask+0x48>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <IncTask+0x48>)
 8000798:	6013      	str	r3, [r2, #0]
      UART_Send_String(msg);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f80c 	bl	80007bc <UART_Send_String>
 80007a4:	e002      	b.n	80007ac <IncTask+0x40>
    }
    else
    {


      osThreadSuspend(NULL);  // self-terminate
 80007a6:	2000      	movs	r0, #0
 80007a8:	f002 f88a 	bl	80028c0 <osThreadSuspend>
    }

    osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f002 f8a8 	bl	8002902 <osDelay>
    if (counter < 100)   // total counts across both tasks
 80007b2:	e7e1      	b.n	8000778 <IncTask+0xc>
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	08005ce0 	.word	0x08005ce0

080007bc <UART_Send_String>:



/* UART send function */
void UART_Send_String(char *str)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fd0b 	bl	80001e0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <UART_Send_String+0x28>)
 80007d6:	f001 fb97 	bl	8001f08 <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000007c 	.word	0x2000007c

080007e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f9b7 	bl	8000b6c <HAL_IncTick>
  }
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40000800 	.word	0x40000800

0800080c <Error_Handler>:

void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  __disable_irq();
  while (1) {}
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	@ (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fa5d 	bl	8000d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <HAL_UART_MspInit+0x84>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12b      	bne.n	80008ea <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <HAL_UART_MspInit+0x8c>)
 80008e6:	f000 fa43 	bl	8000d70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	@ 0x38
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <HAL_InitTick+0xe4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a32      	ldr	r2, [pc, #200]	@ (80009e4 <HAL_InitTick+0xe4>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000920:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <HAL_InitTick+0xe4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fff6 	bl	8001928 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000946:	f000 ffc7 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 800094a:	6378      	str	r0, [r7, #52]	@ 0x34
 800094c:	e004      	b.n	8000958 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800094e:	f000 ffc3 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8000952:	4603      	mov	r3, r0
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800095a:	4a23      	ldr	r2, [pc, #140]	@ (80009e8 <HAL_InitTick+0xe8>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	0c9b      	lsrs	r3, r3, #18
 8000962:	3b01      	subs	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <HAL_InitTick+0xec>)
 8000968:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <HAL_InitTick+0xf0>)
 800096a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <HAL_InitTick+0xec>)
 800096e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000972:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000974:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <HAL_InitTick+0xec>)
 8000976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000978:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_InitTick+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <HAL_InitTick+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_InitTick+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800098c:	4817      	ldr	r0, [pc, #92]	@ (80009ec <HAL_InitTick+0xec>)
 800098e:	f000 fffd 	bl	800198c <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000998:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11b      	bne.n	80009d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009a0:	4812      	ldr	r0, [pc, #72]	@ (80009ec <HAL_InitTick+0xec>)
 80009a2:	f001 f84d 	bl	8001a40 <HAL_TIM_Base_Start_IT>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d111      	bne.n	80009d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009b4:	201e      	movs	r0, #30
 80009b6:	f000 f9cd 	bl	8000d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d808      	bhi.n	80009d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	201e      	movs	r0, #30
 80009c6:	f000 f9a9 	bl	8000d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_InitTick+0xf4>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e002      	b.n	80009d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	200000d0 	.word	0x200000d0
 80009f0:	40000800 	.word	0x40000800
 80009f4:	20000004 	.word	0x20000004

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <TIM4_IRQHandler+0x10>)
 8000a36:	f001 f865 	bl	8001b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000d0 	.word	0x200000d0

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f004 fc8a 	bl	800538c <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20018000 	.word	0x20018000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	20000118 	.word	0x20000118
 8000aac:	20004bb8 	.word	0x20004bb8

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f004 fc49 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fd59 	bl	80005bc <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b18:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 8000b1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b20:	20004bb8 	.word	0x20004bb8

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <HAL_Init+0x40>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_Init+0x40>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_Init+0x40>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f8d8 	bl	8000d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fed2 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe5c 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	2000011c 	.word	0x2000011c

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000011c 	.word	0x2000011c

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff4c 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2e:	f7ff ff61 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f7ff ffb1 	bl	8000ca0 <NVIC_EncodePriority>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff80 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff54 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e159      	b.n	8001040 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 8148 	bne.w	800103a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80a2 	beq.w	800103a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b57      	ldr	r3, [pc, #348]	@ (8001058 <HAL_GPIO_Init+0x2e8>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a56      	ldr	r2, [pc, #344]	@ (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b54      	ldr	r3, [pc, #336]	@ (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a52      	ldr	r2, [pc, #328]	@ (800105c <HAL_GPIO_Init+0x2ec>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a49      	ldr	r2, [pc, #292]	@ (8001060 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x202>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a48      	ldr	r2, [pc, #288]	@ (8001064 <HAL_GPIO_Init+0x2f4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x1fe>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a47      	ldr	r2, [pc, #284]	@ (8001068 <HAL_GPIO_Init+0x2f8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a46      	ldr	r2, [pc, #280]	@ (800106c <HAL_GPIO_Init+0x2fc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a45      	ldr	r2, [pc, #276]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x1f2>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x204>
 8000f62:	2307      	movs	r3, #7
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x204>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x204>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x204>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x204>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	@ (800105c <HAL_GPIO_Init+0x2ec>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a24      	ldr	r2, [pc, #144]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <HAL_GPIO_Init+0x304>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f aea2 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40013c00 	.word	0x40013c00

08001078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e267      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d075      	beq.n	8001182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001096:	4b88      	ldr	r3, [pc, #544]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d00c      	beq.n	80010bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b85      	ldr	r3, [pc, #532]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d112      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4b82      	ldr	r3, [pc, #520]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ba:	d10b      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4b7e      	ldr	r3, [pc, #504]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05b      	beq.n	8001180 <HAL_RCC_OscConfig+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e242      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x74>
 80010de:	4b76      	ldr	r3, [pc, #472]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a75      	ldr	r2, [pc, #468]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e01d      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6f      	ldr	r2, [pc, #444]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b6d      	ldr	r3, [pc, #436]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6c      	ldr	r2, [pc, #432]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 8001110:	4b69      	ldr	r3, [pc, #420]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a68      	ldr	r2, [pc, #416]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a65      	ldr	r2, [pc, #404]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fd30 	bl	8000b94 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fd2c 	bl	8000b94 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	@ 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e207      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xc0>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fd1c 	bl	8000b94 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fd18 	bl	8000b94 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1f3      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b51      	ldr	r3, [pc, #324]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0xe8>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b47      	ldr	r3, [pc, #284]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d11c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e1c7      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4937      	ldr	r1, [pc, #220]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e03a      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <HAL_RCC_OscConfig+0x244>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fcd1 	bl	8000b94 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fccd 	bl	8000b94 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1a8      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4925      	ldr	r1, [pc, #148]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <HAL_RCC_OscConfig+0x244>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fcb0 	bl	8000b94 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fcac 	bl	8000b94 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e187      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d036      	beq.n	80012d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d016      	beq.n	8001298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_RCC_OscConfig+0x248>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fc90 	bl	8000b94 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fc8c 	bl	8000b94 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e167      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_RCC_OscConfig+0x240>)
 800128c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x200>
 8001296:	e01b      	b.n	80012d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_RCC_OscConfig+0x248>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc79 	bl	8000b94 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e00e      	b.n	80012c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc75 	bl	8000b94 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d907      	bls.n	80012c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e150      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
 80012b8:	40023800 	.word	0x40023800
 80012bc:	42470000 	.word	0x42470000
 80012c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80012c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ea      	bne.n	80012a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 8097 	beq.w	800140c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b81      	ldr	r3, [pc, #516]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b7d      	ldr	r3, [pc, #500]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a7c      	ldr	r2, [pc, #496]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b7a      	ldr	r3, [pc, #488]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b77      	ldr	r3, [pc, #476]	@ (80014ec <HAL_RCC_OscConfig+0x474>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b74      	ldr	r3, [pc, #464]	@ (80014ec <HAL_RCC_OscConfig+0x474>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a73      	ldr	r2, [pc, #460]	@ (80014ec <HAL_RCC_OscConfig+0x474>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fc35 	bl	8000b94 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fc31 	bl	8000b94 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e10c      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b6a      	ldr	r3, [pc, #424]	@ (80014ec <HAL_RCC_OscConfig+0x474>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x2ea>
 8001354:	4b64      	ldr	r3, [pc, #400]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001358:	4a63      	ldr	r2, [pc, #396]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0x324>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x30c>
 800136a:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136e:	4a5e      	ldr	r2, [pc, #376]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6713      	str	r3, [r2, #112]	@ 0x70
 8001376:	4b5c      	ldr	r3, [pc, #368]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137a:	4a5b      	ldr	r2, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	@ 0x70
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x324>
 8001384:	4b58      	ldr	r3, [pc, #352]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001388:	4a57      	ldr	r2, [pc, #348]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001390:	4b55      	ldr	r3, [pc, #340]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001394:	4a54      	ldr	r2, [pc, #336]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 0304 	bic.w	r3, r3, #4
 800139a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff fbf6 	bl	8000b94 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff fbf2 	bl	8000b94 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0cb      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c2:	4b49      	ldr	r3, [pc, #292]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0ee      	beq.n	80013ac <HAL_RCC_OscConfig+0x334>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fbe0 	bl	8000b94 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fbdc 	bl	8000b94 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0b5      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ee      	bne.n	80013d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a38      	ldr	r2, [pc, #224]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a1 	beq.w	8001558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001416:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d05c      	beq.n	80014dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d141      	bne.n	80014ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <HAL_RCC_OscConfig+0x478>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fbb0 	bl	8000b94 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fbac 	bl	8000b94 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e087      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	019b      	lsls	r3, r3, #6
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	3b01      	subs	r3, #1
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	491b      	ldr	r1, [pc, #108]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_RCC_OscConfig+0x478>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb85 	bl	8000b94 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fb81 	bl	8000b94 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e05c      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x416>
 80014ac:	e054      	b.n	8001558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb6e 	bl	8000b94 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb6a 	bl	8000b94 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e045      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x444>
 80014da:	e03d      	b.n	8001558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e038      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000
 80014f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x4ec>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d028      	beq.n	8001554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d121      	bne.n	8001554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d11a      	bne.n	8001554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001524:	4013      	ands	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800152a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800152c:	4293      	cmp	r3, r2
 800152e:	d111      	bne.n	8001554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d107      	bne.n	8001554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fa9c 	bl	8000b94 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fa98 	bl	8000b94 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f821 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	@ (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f8f6 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	08005d4c 	.word	0x08005d4c
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001738:	b090      	sub	sp, #64	@ 0x40
 800173a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d00d      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x40>
 8001758:	2b08      	cmp	r3, #8
 800175a:	f200 80a1 	bhi.w	80018a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x34>
 8001762:	2b04      	cmp	r3, #4
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x3a>
 8001766:	e09b      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800176c:	e09b      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176e:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001770:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001772:	e098      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b4f      	ldr	r3, [pc, #316]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800177c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177e:	4b4d      	ldr	r3, [pc, #308]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d028      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	099b      	lsrs	r3, r3, #6
 8001790:	2200      	movs	r2, #0
 8001792:	623b      	str	r3, [r7, #32]
 8001794:	627a      	str	r2, [r7, #36]	@ 0x24
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800179c:	2100      	movs	r1, #0
 800179e:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x188>)
 80017a0:	fb03 f201 	mul.w	r2, r3, r1
 80017a4:	2300      	movs	r3, #0
 80017a6:	fb00 f303 	mul.w	r3, r0, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	4a43      	ldr	r2, [pc, #268]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x188>)
 80017ae:	fba0 1202 	umull	r1, r2, r0, r2
 80017b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017b4:	460a      	mov	r2, r1
 80017b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ba:	4413      	add	r3, r2
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c0:	2200      	movs	r2, #0
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	61fa      	str	r2, [r7, #28]
 80017c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ce:	f7fe fd5f 	bl	8000290 <__aeabi_uldivmod>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4613      	mov	r3, r2
 80017d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017da:	e053      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	2200      	movs	r2, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	617a      	str	r2, [r7, #20]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017ee:	f04f 0b00 	mov.w	fp, #0
 80017f2:	4652      	mov	r2, sl
 80017f4:	465b      	mov	r3, fp
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0159      	lsls	r1, r3, #5
 8001800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001804:	0150      	lsls	r0, r2, #5
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ebb2 080a 	subs.w	r8, r2, sl
 800180e:	eb63 090b 	sbc.w	r9, r3, fp
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800181e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001822:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001826:	ebb2 0408 	subs.w	r4, r2, r8
 800182a:	eb63 0509 	sbc.w	r5, r3, r9
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	00eb      	lsls	r3, r5, #3
 8001838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800183c:	00e2      	lsls	r2, r4, #3
 800183e:	4614      	mov	r4, r2
 8001840:	461d      	mov	r5, r3
 8001842:	eb14 030a 	adds.w	r3, r4, sl
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	eb45 030b 	adc.w	r3, r5, fp
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800185a:	4629      	mov	r1, r5
 800185c:	028b      	lsls	r3, r1, #10
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001864:	4621      	mov	r1, r4
 8001866:	028a      	lsls	r2, r1, #10
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	2200      	movs	r2, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	60fa      	str	r2, [r7, #12]
 8001874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001878:	f7fe fd0a 	bl	8000290 <__aeabi_uldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4613      	mov	r3, r2
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	3301      	adds	r3, #1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800189e:	e002      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3740      	adds	r7, #64	@ 0x40
 80018ac:	46bd      	mov	sp, r7
 80018ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	00f42400 	.word	0x00f42400
 80018bc:	017d7840 	.word	0x017d7840

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0a9b      	lsrs	r3, r3, #10
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4903      	ldr	r1, [pc, #12]	@ (80018fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08005d5c 	.word	0x08005d5c

08001900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001904:	f7ff ffdc 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0b5b      	lsrs	r3, r3, #13
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	@ (8001924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	08005d5c 	.word	0x08005d5c

08001928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	220f      	movs	r2, #15
 8001936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <HAL_RCC_GetClockConfig+0x60>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0207 	and.w	r2, r3, #7
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f839 	bl	8001a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 f9b2 	bl	8001d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d001      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e044      	b.n	8001ae2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d018      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x6c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a82:	d013      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x6c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00e      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x6c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x6c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_TIM_Base_Start_IT+0xbc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x6c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d010      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ace:	e007      	b.n	8001ae0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40000800 	.word	0x40000800
 8001afc:	40000c00 	.word	0x40000c00
 8001b00:	40014000 	.word	0x40014000

08001b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d020      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0202 	mvn.w	r2, #2
 8001b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8d2 	bl	8001cf8 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8c4 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8d5 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0204 	mvn.w	r2, #4
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8ac 	bl	8001cf8 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f89e 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8af 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0208 	mvn.w	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f886 	bl	8001cf8 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f878 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f889 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0210 	mvn.w	r2, #16
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2208      	movs	r2, #8
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f860 	bl	8001cf8 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f852 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f863 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0201 	mvn.w	r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fdbc 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e0 	bl	8001e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f834 	bl	8001d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0220 	mvn.w	r2, #32
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8b2 	bl	8001e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a37      	ldr	r2, [pc, #220]	@ (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00f      	beq.n	8001d6c <TIM_Base_SetConfig+0x38>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d52:	d00b      	beq.n	8001d6c <TIM_Base_SetConfig+0x38>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <TIM_Base_SetConfig+0xf4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_Base_SetConfig+0x38>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a33      	ldr	r2, [pc, #204]	@ (8001e2c <TIM_Base_SetConfig+0xf8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_Base_SetConfig+0x38>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a32      	ldr	r2, [pc, #200]	@ (8001e30 <TIM_Base_SetConfig+0xfc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d108      	bne.n	8001d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01b      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d017      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a25      	ldr	r2, [pc, #148]	@ (8001e28 <TIM_Base_SetConfig+0xf4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a24      	ldr	r2, [pc, #144]	@ (8001e2c <TIM_Base_SetConfig+0xf8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00f      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <TIM_Base_SetConfig+0xfc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00b      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <TIM_Base_SetConfig+0x100>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <TIM_Base_SetConfig+0x104>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <TIM_Base_SetConfig+0x8a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a20      	ldr	r2, [pc, #128]	@ (8001e3c <TIM_Base_SetConfig+0x108>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d108      	bne.n	8001dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d103      	bne.n	8001dfe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f043 0204 	orr.w	r2, r3, #4
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800

08001e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e042      	b.n	8001f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fcee 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f973 	bl	8002198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d175      	bne.n	8002014 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_UART_Transmit+0x2c>
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e06e      	b.n	8002016 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2221      	movs	r2, #33	@ 0x21
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f46:	f7fe fe25 	bl	8000b94 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	88fa      	ldrh	r2, [r7, #6]
 8001f50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f60:	d108      	bne.n	8001f74 <HAL_UART_Transmit+0x6c>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e003      	b.n	8001f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f7c:	e02e      	b.n	8001fdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f848 	bl	800201e <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e03a      	b.n	8002016 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	3302      	adds	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	e007      	b.n	8001fce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1cb      	bne.n	8001f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2140      	movs	r1, #64	@ 0x40
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f814 	bl	800201e <UART_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e006      	b.n	8002016 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e000      	b.n	8002016 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002014:	2302      	movs	r3, #2
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202e:	e03b      	b.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d037      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7fe fdac 	bl	8000b94 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <UART_WaitOnFlagUntilTimeout+0x30>
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e03a      	b.n	80020c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d023      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b80      	cmp	r3, #128	@ 0x80
 8002064:	d020      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	d01d      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b08      	cmp	r3, #8
 8002078:	d116      	bne.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f81d 	bl	80020d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2208      	movs	r2, #8
 800209a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e00f      	b.n	80020c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4013      	ands	r3, r2
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d0b4      	beq.n	8002030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b095      	sub	sp, #84	@ 0x54
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e2:	e853 3f00 	ldrex	r3, [r3]
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	330c      	adds	r3, #12
 80020f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80020fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002100:	e841 2300 	strex	r3, r2, [r1]
 8002104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e5      	bne.n	80020d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3314      	adds	r3, #20
 8002112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	e853 3f00 	ldrex	r3, [r3]
 800211a:	61fb      	str	r3, [r7, #28]
   return(result);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3314      	adds	r3, #20
 800212a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800212c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002134:	e841 2300 	strex	r3, r2, [r1]
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e5      	bne.n	800210c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	e853 3f00 	ldrex	r3, [r3]
 8002156:	60bb      	str	r3, [r7, #8]
   return(result);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f023 0310 	bic.w	r3, r3, #16
 800215e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002168:	61ba      	str	r2, [r7, #24]
 800216a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	e841 2300 	strex	r3, r2, [r1]
 8002174:	613b      	str	r3, [r7, #16]
   return(result);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e5      	bne.n	8002148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800218a:	bf00      	nop
 800218c:	3754      	adds	r7, #84	@ 0x54
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800219c:	b0c0      	sub	sp, #256	@ 0x100
 800219e:	af00      	add	r7, sp, #0
 80021a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	ea40 0301 	orr.w	r3, r0, r1
 80021c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80021f0:	f021 010c 	bic.w	r1, r1, #12
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021fe:	430b      	orrs	r3, r1
 8002200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	6999      	ldr	r1, [r3, #24]
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	ea40 0301 	orr.w	r3, r0, r1
 800221e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b8f      	ldr	r3, [pc, #572]	@ (8002464 <UART_SetConfig+0x2cc>)
 8002228:	429a      	cmp	r2, r3
 800222a:	d005      	beq.n	8002238 <UART_SetConfig+0xa0>
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b8d      	ldr	r3, [pc, #564]	@ (8002468 <UART_SetConfig+0x2d0>)
 8002234:	429a      	cmp	r2, r3
 8002236:	d104      	bne.n	8002242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002238:	f7ff fb62 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 800223c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002240:	e003      	b.n	800224a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002242:	f7ff fb49 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8002246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002254:	f040 810c 	bne.w	8002470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800225c:	2200      	movs	r2, #0
 800225e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800226a:	4622      	mov	r2, r4
 800226c:	462b      	mov	r3, r5
 800226e:	1891      	adds	r1, r2, r2
 8002270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002272:	415b      	adcs	r3, r3
 8002274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800227a:	4621      	mov	r1, r4
 800227c:	eb12 0801 	adds.w	r8, r2, r1
 8002280:	4629      	mov	r1, r5
 8002282:	eb43 0901 	adc.w	r9, r3, r1
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800229a:	4690      	mov	r8, r2
 800229c:	4699      	mov	r9, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	eb18 0303 	adds.w	r3, r8, r3
 80022a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022a8:	462b      	mov	r3, r5
 80022aa:	eb49 0303 	adc.w	r3, r9, r3
 80022ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80022b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80022c6:	460b      	mov	r3, r1
 80022c8:	18db      	adds	r3, r3, r3
 80022ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80022cc:	4613      	mov	r3, r2
 80022ce:	eb42 0303 	adc.w	r3, r2, r3
 80022d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80022dc:	f7fd ffd8 	bl	8000290 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4b61      	ldr	r3, [pc, #388]	@ (800246c <UART_SetConfig+0x2d4>)
 80022e6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	011c      	lsls	r4, r3, #4
 80022ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	1891      	adds	r1, r2, r2
 8002306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002308:	415b      	adcs	r3, r3
 800230a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800230c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002310:	4641      	mov	r1, r8
 8002312:	eb12 0a01 	adds.w	sl, r2, r1
 8002316:	4649      	mov	r1, r9
 8002318:	eb43 0b01 	adc.w	fp, r3, r1
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800232c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002330:	4692      	mov	sl, r2
 8002332:	469b      	mov	fp, r3
 8002334:	4643      	mov	r3, r8
 8002336:	eb1a 0303 	adds.w	r3, sl, r3
 800233a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800233e:	464b      	mov	r3, r9
 8002340:	eb4b 0303 	adc.w	r3, fp, r3
 8002344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800235c:	460b      	mov	r3, r1
 800235e:	18db      	adds	r3, r3, r3
 8002360:	643b      	str	r3, [r7, #64]	@ 0x40
 8002362:	4613      	mov	r3, r2
 8002364:	eb42 0303 	adc.w	r3, r2, r3
 8002368:	647b      	str	r3, [r7, #68]	@ 0x44
 800236a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800236e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002372:	f7fd ff8d 	bl	8000290 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4611      	mov	r1, r2
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <UART_SetConfig+0x2d4>)
 800237e:	fba3 2301 	umull	r2, r3, r3, r1
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2264      	movs	r2, #100	@ 0x64
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	1acb      	subs	r3, r1, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002392:	4b36      	ldr	r3, [pc, #216]	@ (800246c <UART_SetConfig+0x2d4>)
 8002394:	fba3 2302 	umull	r2, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023a0:	441c      	add	r4, r3
 80023a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80023b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023bc:	415b      	adcs	r3, r3
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023c4:	4641      	mov	r1, r8
 80023c6:	1851      	adds	r1, r2, r1
 80023c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80023ca:	4649      	mov	r1, r9
 80023cc:	414b      	adcs	r3, r1
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80023dc:	4659      	mov	r1, fp
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e6:	4651      	mov	r1, sl
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	4642      	mov	r2, r8
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023f8:	464b      	mov	r3, r9
 80023fa:	460a      	mov	r2, r1
 80023fc:	eb42 0303 	adc.w	r3, r2, r3
 8002400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002418:	460b      	mov	r3, r1
 800241a:	18db      	adds	r3, r3, r3
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241e:	4613      	mov	r3, r2
 8002420:	eb42 0303 	adc.w	r3, r2, r3
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800242a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800242e:	f7fd ff2f 	bl	8000290 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <UART_SetConfig+0x2d4>)
 8002438:	fba3 1302 	umull	r1, r3, r3, r2
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	2164      	movs	r1, #100	@ 0x64
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	3332      	adds	r3, #50	@ 0x32
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <UART_SetConfig+0x2d4>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	f003 0207 	and.w	r2, r3, #7
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4422      	add	r2, r4
 800245e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002460:	e106      	b.n	8002670 <UART_SetConfig+0x4d8>
 8002462:	bf00      	nop
 8002464:	40011000 	.word	0x40011000
 8002468:	40011400 	.word	0x40011400
 800246c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002474:	2200      	movs	r2, #0
 8002476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800247a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800247e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002482:	4642      	mov	r2, r8
 8002484:	464b      	mov	r3, r9
 8002486:	1891      	adds	r1, r2, r2
 8002488:	6239      	str	r1, [r7, #32]
 800248a:	415b      	adcs	r3, r3
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
 800248e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002492:	4641      	mov	r1, r8
 8002494:	1854      	adds	r4, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb43 0501 	adc.w	r5, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	00eb      	lsls	r3, r5, #3
 80024a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024aa:	00e2      	lsls	r2, r4, #3
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	4643      	mov	r3, r8
 80024b2:	18e3      	adds	r3, r4, r3
 80024b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b8:	464b      	mov	r3, r9
 80024ba:	eb45 0303 	adc.w	r3, r5, r3
 80024be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024de:	4629      	mov	r1, r5
 80024e0:	008b      	lsls	r3, r1, #2
 80024e2:	4621      	mov	r1, r4
 80024e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e8:	4621      	mov	r1, r4
 80024ea:	008a      	lsls	r2, r1, #2
 80024ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80024f0:	f7fd fece 	bl	8000290 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4b60      	ldr	r3, [pc, #384]	@ (800267c <UART_SetConfig+0x4e4>)
 80024fa:	fba3 2302 	umull	r2, r3, r3, r2
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	011c      	lsls	r4, r3, #4
 8002502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800250c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	1891      	adds	r1, r2, r2
 800251a:	61b9      	str	r1, [r7, #24]
 800251c:	415b      	adcs	r3, r3
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002524:	4641      	mov	r1, r8
 8002526:	1851      	adds	r1, r2, r1
 8002528:	6139      	str	r1, [r7, #16]
 800252a:	4649      	mov	r1, r9
 800252c:	414b      	adcs	r3, r1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800253c:	4659      	mov	r1, fp
 800253e:	00cb      	lsls	r3, r1, #3
 8002540:	4651      	mov	r1, sl
 8002542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002546:	4651      	mov	r1, sl
 8002548:	00ca      	lsls	r2, r1, #3
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4603      	mov	r3, r0
 8002550:	4642      	mov	r2, r8
 8002552:	189b      	adds	r3, r3, r2
 8002554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002558:	464b      	mov	r3, r9
 800255a:	460a      	mov	r2, r1
 800255c:	eb42 0303 	adc.w	r3, r2, r3
 8002560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800256e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800257c:	4649      	mov	r1, r9
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4641      	mov	r1, r8
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800258e:	f7fd fe7f 	bl	8000290 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4611      	mov	r1, r2
 8002598:	4b38      	ldr	r3, [pc, #224]	@ (800267c <UART_SetConfig+0x4e4>)
 800259a:	fba3 2301 	umull	r2, r3, r3, r1
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2264      	movs	r2, #100	@ 0x64
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	3332      	adds	r3, #50	@ 0x32
 80025ac:	4a33      	ldr	r2, [pc, #204]	@ (800267c <UART_SetConfig+0x4e4>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b8:	441c      	add	r4, r3
 80025ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025be:	2200      	movs	r2, #0
 80025c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80025c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80025c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	415b      	adcs	r3, r3
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d8:	4641      	mov	r1, r8
 80025da:	1851      	adds	r1, r2, r1
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	4649      	mov	r1, r9
 80025e0:	414b      	adcs	r3, r1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025f0:	4659      	mov	r1, fp
 80025f2:	00cb      	lsls	r3, r1, #3
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fa:	4651      	mov	r1, sl
 80025fc:	00ca      	lsls	r2, r1, #3
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4603      	mov	r3, r0
 8002604:	4642      	mov	r2, r8
 8002606:	189b      	adds	r3, r3, r2
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800260a:	464b      	mov	r3, r9
 800260c:	460a      	mov	r2, r1
 800260e:	eb42 0303 	adc.w	r3, r2, r3
 8002612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	663b      	str	r3, [r7, #96]	@ 0x60
 800261e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800262c:	4649      	mov	r1, r9
 800262e:	008b      	lsls	r3, r1, #2
 8002630:	4641      	mov	r1, r8
 8002632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002636:	4641      	mov	r1, r8
 8002638:	008a      	lsls	r2, r1, #2
 800263a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800263e:	f7fd fe27 	bl	8000290 <__aeabi_uldivmod>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <UART_SetConfig+0x4e4>)
 8002648:	fba3 1302 	umull	r1, r3, r3, r2
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	2164      	movs	r1, #100	@ 0x64
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	3332      	adds	r3, #50	@ 0x32
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <UART_SetConfig+0x4e4>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4422      	add	r2, r4
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002676:	46bd      	mov	sp, r7
 8002678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267c:	51eb851f 	.word	0x51eb851f

08002680 <__NVIC_SetPriority>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Handler+0x1c>)
 80026da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026dc:	f001 fdae 	bl	800423c <xTaskGetSchedulerState>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026e6:	f002 fba7 	bl	8004e38 <xPortSysTickHandler>
  }
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026f8:	2100      	movs	r1, #0
 80026fa:	f06f 0004 	mvn.w	r0, #4
 80026fe:	f7ff ffbf 	bl	8002680 <__NVIC_SetPriority>
#endif
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800270e:	f3ef 8305 	mrs	r3, IPSR
 8002712:	603b      	str	r3, [r7, #0]
  return(result);
 8002714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800271a:	f06f 0305 	mvn.w	r3, #5
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e00c      	b.n	800273c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <osKernelInitialize+0x44>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <osKernelInitialize+0x44>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	e002      	b.n	800273c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000120 	.word	0x20000120

08002750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002756:	f3ef 8305 	mrs	r3, IPSR
 800275a:	603b      	str	r3, [r7, #0]
  return(result);
 800275c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002762:	f06f 0305 	mvn.w	r3, #5
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	e010      	b.n	800278c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <osKernelStart+0x48>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d109      	bne.n	8002786 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002772:	f7ff ffbf 	bl	80026f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <osKernelStart+0x48>)
 8002778:	2202      	movs	r2, #2
 800277a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800277c:	f001 f910 	bl	80039a0 <vTaskStartScheduler>
      stat = osOK;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	e002      	b.n	800278c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800278c:	687b      	ldr	r3, [r7, #4]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000120 	.word	0x20000120

0800279c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	@ 0x38
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ac:	f3ef 8305 	mrs	r3, IPSR
 80027b0:	617b      	str	r3, [r7, #20]
  return(result);
 80027b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d17e      	bne.n	80028b6 <osThreadNew+0x11a>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d07b      	beq.n	80028b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027c2:	2318      	movs	r3, #24
 80027c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d045      	beq.n	8002862 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <osThreadNew+0x48>
        name = attr->name;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <osThreadNew+0x6e>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b38      	cmp	r3, #56	@ 0x38
 80027fc:	d805      	bhi.n	800280a <osThreadNew+0x6e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <osThreadNew+0x72>
        return (NULL);
 800280a:	2300      	movs	r3, #0
 800280c:	e054      	b.n	80028b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00e      	beq.n	8002844 <osThreadNew+0xa8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b5b      	cmp	r3, #91	@ 0x5b
 800282c:	d90a      	bls.n	8002844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <osThreadNew+0xa8>
        mem = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e010      	b.n	8002866 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <osThreadNew+0xca>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <osThreadNew+0xca>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <osThreadNew+0xca>
          mem = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e001      	b.n	8002866 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d110      	bne.n	800288e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002874:	9202      	str	r2, [sp, #8]
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fe3a 	bl	80034fc <xTaskCreateStatic>
 8002888:	4603      	mov	r3, r0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e013      	b.n	80028b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d110      	bne.n	80028b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fe88 	bl	80035bc <xTaskCreate>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <osThreadNew+0x11a>
            hTask = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028b6:	693b      	ldr	r3, [r7, #16]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3728      	adds	r7, #40	@ 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028cc:	f3ef 8305 	mrs	r3, IPSR
 80028d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80028d8:	f06f 0305 	mvn.w	r3, #5
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e00b      	b.n	80028f8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80028e6:	f06f 0303 	mvn.w	r3, #3
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e004      	b.n	80028f8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80028f2:	6938      	ldr	r0, [r7, #16]
 80028f4:	f000 ffde 	bl	80038b4 <vTaskSuspend>
  }

  return (stat);
 80028f8:	697b      	ldr	r3, [r7, #20]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290a:	f3ef 8305 	mrs	r3, IPSR
 800290e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <osDelay+0x1c>
    stat = osErrorISR;
 8002916:	f06f 0305 	mvn.w	r3, #5
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e007      	b.n	800292e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <osDelay+0x2c>
      vTaskDelay(ticks);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 ff8d 	bl	8003848 <vTaskDelay>
    }
  }

  return (stat);
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <vApplicationGetIdleTaskMemory+0x2c>)
 8002948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <vApplicationGetIdleTaskMemory+0x30>)
 800294e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000124 	.word	0x20000124
 8002968:	20000180 	.word	0x20000180

0800296c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <vApplicationGetTimerTaskMemory+0x2c>)
 800297c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <vApplicationGetTimerTaskMemory+0x30>)
 8002982:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	20000380 	.word	0x20000380
 800299c:	200003dc 	.word	0x200003dc

080029a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f103 0208 	add.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e00c      	b.n	8002a7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3308      	adds	r3, #8
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <vListInsert+0x2e>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d2f6      	bcs.n	8002a6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6852      	ldr	r2, [r2, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b34:	f002 f8f0 	bl	8004d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	3b01      	subs	r3, #1
 8002b66:	68f9      	ldr	r1, [r7, #12]
 8002b68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	22ff      	movs	r2, #255	@ 0xff
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d114      	bne.n	8002bb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3310      	adds	r3, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f990 	bl	8003ebc <xTaskRemoveFromEventList>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <xQueueGenericReset+0xd0>)
 8002ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	e009      	b.n	8002bc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fef1 	bl	80029a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3324      	adds	r3, #36	@ 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff feec 	bl	80029a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bc8:	f002 f8d8 	bl	8004d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	@ 0x38
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <xQueueGenericCreateStatic+0x56>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <xQueueGenericCreateStatic+0x5a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueGenericCreateStatic+0x5c>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	623b      	str	r3, [r7, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <xQueueGenericCreateStatic+0x84>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericCreateStatic+0x88>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericCreateStatic+0x8a>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	61fb      	str	r3, [r7, #28]
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	e7fd      	b.n	8002c7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c82:	2350      	movs	r3, #80	@ 0x50
 8002c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b50      	cmp	r3, #80	@ 0x50
 8002c8a:	d00b      	beq.n	8002ca4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ca4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f805 	bl	8002cd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3730      	adds	r7, #48	@ 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e002      	b.n	8002cf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d04:	2101      	movs	r1, #1
 8002d06:	69b8      	ldr	r0, [r7, #24]
 8002d08:	f7ff fefe 	bl	8002b08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	@ 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericSend+0x34>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x42>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x46>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x48>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericSend+0x64>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x72>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x76>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x78>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <xQueueGenericSend+0x94>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002db0:	f001 fa44 	bl	800423c <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <xQueueGenericSend+0xa4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xQueueGenericSend+0xa8>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xQueueGenericSend+0xaa>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fb      	str	r3, [r7, #28]
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	e7fd      	b.n	8002dde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002de2:	f001 ff99 	bl	8004d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <xQueueGenericSend+0xdc>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d129      	bne.n	8002e4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfe:	f000 fa0f 	bl	8003220 <prvCopyDataToQueue>
 8002e02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	3324      	adds	r3, #36	@ 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f853 	bl	8003ebc <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e00a      	b.n	8002e44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e44:	f001 ff9a 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e063      	b.n	8002f14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e52:	f001 ff93 	bl	8004d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e05c      	b.n	8002f14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 f88d 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6e:	f001 ff85 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e72:	f000 fdfd 	bl	8003a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e76:	f001 ff4f 	bl	8004d18 <vPortEnterCritical>
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <xQueueGenericSend+0x174>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <xQueueGenericSend+0x18a>
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ea6:	f001 ff69 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eaa:	1d3a      	adds	r2, r7, #4
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 f87c 	bl	8003fb0 <xTaskCheckForTimeOut>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d124      	bne.n	8002f08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec0:	f000 faa6 	bl	8003410 <prvIsQueueFull>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	3310      	adds	r3, #16
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 ffa0 	bl	8003e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eda:	f000 fa31 	bl	8003340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ede:	f000 fdd5 	bl	8003a8c <xTaskResumeAll>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af7c 	bne.w	8002de2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	e772      	b.n	8002de2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efe:	f000 fa1f 	bl	8003340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f02:	f000 fdc3 	bl	8003a8c <xTaskResumeAll>
 8002f06:	e76c      	b.n	8002de2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 fa19 	bl	8003340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0e:	f000 fdbd 	bl	8003a8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3738      	adds	r7, #56	@ 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	@ 0x40
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSendFromISR+0x3e>
 8002f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSendFromISR+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSendFromISR+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSendFromISR+0x6e>
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <xQueueGenericSendFromISR+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueGenericSendFromISR+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	623b      	str	r3, [r7, #32]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb0:	f001 ff92 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61fa      	str	r2, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <xQueueGenericSendFromISR+0xc2>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d12f      	bne.n	8003042 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ff8:	f000 f912 	bl	8003220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ffc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d112      	bne.n	800302c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	3324      	adds	r3, #36	@ 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f000 ff52 	bl	8003ebc <xTaskRemoveFromEventList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800302c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003030:	3301      	adds	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	b25a      	sxtb	r2, r3
 8003036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003040:	e001      	b.n	8003046 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003054:	4618      	mov	r0, r3
 8003056:	3740      	adds	r7, #64	@ 0x40
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <xQueueReceive+0x32>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	623b      	str	r3, [r7, #32]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <xQueueReceive+0x40>
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueReceive+0x44>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueReceive+0x46>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueReceive+0x62>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030be:	f001 f8bd 	bl	800423c <xTaskGetSchedulerState>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <xQueueReceive+0x72>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x76>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x78>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueReceive+0x94>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61bb      	str	r3, [r7, #24]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f0:	f001 fe12 	bl	8004d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01f      	beq.n	8003140 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003104:	f000 f8f6 	bl	80032f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00f      	beq.n	8003138 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	3310      	adds	r3, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fecd 	bl	8003ebc <xTaskRemoveFromEventList>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <xQueueReceive+0x1c0>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003138:	f001 fe20 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 800313c:	2301      	movs	r3, #1
 800313e:	e069      	b.n	8003214 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003146:	f001 fe19 	bl	8004d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800314a:	2300      	movs	r3, #0
 800314c:	e062      	b.n	8003214 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 ff13 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800315e:	2301      	movs	r3, #1
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003162:	f001 fe0b 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003166:	f000 fc83 	bl	8003a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800316a:	f001 fdd5 	bl	8004d18 <vPortEnterCritical>
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x128>
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800318a:	b25b      	sxtb	r3, r3
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d103      	bne.n	800319a <xQueueReceive+0x13e>
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800319a:	f001 fdef 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800319e:	1d3a      	adds	r2, r7, #4
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff02 	bl	8003fb0 <xTaskCheckForTimeOut>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d123      	bne.n	80031fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b4:	f000 f916 	bl	80033e4 <prvIsQueueEmpty>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	3324      	adds	r3, #36	@ 0x24
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fe26 	bl	8003e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ce:	f000 f8b7 	bl	8003340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d2:	f000 fc5b 	bl	8003a8c <xTaskResumeAll>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d189      	bne.n	80030f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <xQueueReceive+0x1c0>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	e780      	b.n	80030f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	f000 f8a6 	bl	8003340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f4:	f000 fc4a 	bl	8003a8c <xTaskResumeAll>
 80031f8:	e77a      	b.n	80030f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fc:	f000 f8a0 	bl	8003340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003200:	f000 fc44 	bl	8003a8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003206:	f000 f8ed 	bl	80033e4 <prvIsQueueEmpty>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f43f af6f 	beq.w	80030f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003214:	4618      	mov	r0, r3
 8003216:	3730      	adds	r7, #48	@ 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d14d      	bne.n	80032e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f001 f814 	bl	8004278 <xTaskPriorityDisinherit>
 8003250:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e043      	b.n	80032e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d119      	bne.n	8003294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6858      	ldr	r0, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	f002 f8ba 	bl	80053e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d32b      	bcc.n	80032e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e026      	b.n	80032e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68d8      	ldr	r0, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	461a      	mov	r2, r3
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	f002 f8a0 	bl	80053e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	425b      	negs	r3, r3
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	425b      	negs	r3, r3
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d105      	bne.n	80032e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	3b01      	subs	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032ea:	697b      	ldr	r3, [r7, #20]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d018      	beq.n	8003338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	441a      	add	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d303      	bcc.n	8003328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	461a      	mov	r2, r3
 8003332:	6838      	ldr	r0, [r7, #0]
 8003334:	f002 f856 	bl	80053e4 <memcpy>
	}
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003348:	f001 fce6 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003354:	e011      	b.n	800337a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d012      	beq.n	8003384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3324      	adds	r3, #36	@ 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fdaa 	bl	8003ebc <xTaskRemoveFromEventList>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800336e:	f000 fe83 	bl	8004078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	3b01      	subs	r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	dce9      	bgt.n	8003356 <prvUnlockQueue+0x16>
 8003382:	e000      	b.n	8003386 <prvUnlockQueue+0x46>
					break;
 8003384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	22ff      	movs	r2, #255	@ 0xff
 800338a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800338e:	f001 fcf5 	bl	8004d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003392:	f001 fcc1 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800339c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800339e:	e011      	b.n	80033c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3310      	adds	r3, #16
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fd85 	bl	8003ebc <xTaskRemoveFromEventList>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033b8:	f000 fe5e 	bl	8004078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033bc:	7bbb      	ldrb	r3, [r7, #14]
 80033be:	3b01      	subs	r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	dce9      	bgt.n	80033a0 <prvUnlockQueue+0x60>
 80033cc:	e000      	b.n	80033d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	22ff      	movs	r2, #255	@ 0xff
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033d8:	f001 fcd0 	bl	8004d7c <vPortExitCritical>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033ec:	f001 fc94 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e001      	b.n	8003402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003402:	f001 fcbb 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003418:	f001 fc7e 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	429a      	cmp	r2, r3
 8003426:	d102      	bne.n	800342e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003432:	f001 fca3 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e014      	b.n	800347a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003450:	4a0f      	ldr	r2, [pc, #60]	@ (8003490 <vQueueAddToRegistry+0x50>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800345c:	490c      	ldr	r1, [pc, #48]	@ (8003490 <vQueueAddToRegistry+0x50>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <vQueueAddToRegistry+0x50>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003472:	e006      	b.n	8003482 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b07      	cmp	r3, #7
 800347e:	d9e7      	bls.n	8003450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	200007dc 	.word	0x200007dc

08003494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034a4:	f001 fc38 	bl	8004d18 <vPortEnterCritical>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d103      	bne.n	80034be <vQueueWaitForMessageRestricted+0x2a>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d103      	bne.n	80034d4 <vQueueWaitForMessageRestricted+0x40>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d4:	f001 fc52 	bl	8004d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3324      	adds	r3, #36	@ 0x24
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fcbb 	bl	8003e64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7ff ff26 	bl	8003340 <prvUnlockQueue>
	}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	@ 0x38
 8003500:	af04      	add	r7, sp, #16
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	623b      	str	r3, [r7, #32]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <xTaskCreateStatic+0x4a>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	61fb      	str	r3, [r7, #28]
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	e7fd      	b.n	8003542 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003546:	235c      	movs	r3, #92	@ 0x5c
 8003548:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b5c      	cmp	r3, #92	@ 0x5c
 800354e:	d00b      	beq.n	8003568 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	61bb      	str	r3, [r7, #24]
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003568:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01e      	beq.n	80035ae <xTaskCreateStatic+0xb2>
 8003570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003588:	2300      	movs	r3, #0
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	9302      	str	r3, [sp, #8]
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f850 	bl	8003646 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035a8:	f000 f8de 	bl	8003768 <prvAddNewTaskToReadyList>
 80035ac:	e001      	b.n	80035b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035b2:	697b      	ldr	r3, [r7, #20]
	}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	@ 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08c      	sub	sp, #48	@ 0x30
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 fcc3 	bl	8004f5c <pvPortMalloc>
 80035d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00e      	beq.n	80035fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035de:	205c      	movs	r0, #92	@ 0x5c
 80035e0:	f001 fcbc 	bl	8004f5c <pvPortMalloc>
 80035e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035f2:	e005      	b.n	8003600 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f4:	6978      	ldr	r0, [r7, #20]
 80035f6:	f001 fd7f 	bl	80050f8 <vPortFree>
 80035fa:	e001      	b.n	8003600 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	2300      	movs	r3, #0
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f80e 	bl	8003646 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800362a:	69f8      	ldr	r0, [r7, #28]
 800362c:	f000 f89c 	bl	8003768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e002      	b.n	800363c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800363c:	69bb      	ldr	r3, [r7, #24]
	}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b088      	sub	sp, #32
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	461a      	mov	r2, r3
 800365e:	21a5      	movs	r1, #165	@ 0xa5
 8003660:	f001 fe8c 	bl	800537c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800366e:	3b01      	subs	r3, #1
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f023 0307 	bic.w	r3, r3, #7
 800367c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	617b      	str	r3, [r7, #20]
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01f      	beq.n	80036e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e012      	b.n	80036d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	7819      	ldrb	r1, [r3, #0]
 80036b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	3334      	adds	r3, #52	@ 0x34
 80036bc:	460a      	mov	r2, r1
 80036be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d9e9      	bls.n	80036ac <prvInitialiseNewTask+0x66>
 80036d8:	e000      	b.n	80036dc <prvInitialiseNewTask+0x96>
			{
				break;
 80036da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e4:	e003      	b.n	80036ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	2b37      	cmp	r3, #55	@ 0x37
 80036f2:	d901      	bls.n	80036f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036f4:	2337      	movs	r3, #55	@ 0x37
 80036f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003702:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f966 	bl	80029e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	3318      	adds	r3, #24
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f961 	bl	80029e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003722:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	2200      	movs	r2, #0
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	f001 f9b4 	bl	8004ab4 <pxPortInitialiseStack>
 800374c:	4602      	mov	r2, r0
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800375e:	bf00      	nop
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003770:	f001 fad2 	bl	8004d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003774:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <prvAddNewTaskToReadyList+0xc4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4a2c      	ldr	r2, [pc, #176]	@ (800382c <prvAddNewTaskToReadyList+0xc4>)
 800377c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800377e:	4b2c      	ldr	r3, [pc, #176]	@ (8003830 <prvAddNewTaskToReadyList+0xc8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003786:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <prvAddNewTaskToReadyList+0xc8>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800378c:	4b27      	ldr	r3, [pc, #156]	@ (800382c <prvAddNewTaskToReadyList+0xc4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d110      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003794:	f000 fc94 	bl	80040c0 <prvInitialiseTaskLists>
 8003798:	e00d      	b.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <prvAddNewTaskToReadyList+0xcc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a2:	4b23      	ldr	r3, [pc, #140]	@ (8003830 <prvAddNewTaskToReadyList+0xc8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d802      	bhi.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <prvAddNewTaskToReadyList+0xc8>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037b6:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <prvAddNewTaskToReadyList+0xd0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <prvAddNewTaskToReadyList+0xd0>)
 80037be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <prvAddNewTaskToReadyList+0xd0>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <prvAddNewTaskToReadyList+0xd4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d903      	bls.n	80037dc <prvAddNewTaskToReadyList+0x74>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <prvAddNewTaskToReadyList+0xd4>)
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <prvAddNewTaskToReadyList+0xd8>)
 80037ea:	441a      	add	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7ff f901 	bl	80029fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037f8:	f001 fac0 	bl	8004d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <prvAddNewTaskToReadyList+0xcc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <prvAddNewTaskToReadyList+0xc8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380e:	429a      	cmp	r2, r3
 8003810:	d207      	bcs.n	8003822 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <prvAddNewTaskToReadyList+0xdc>)
 8003814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000cf0 	.word	0x20000cf0
 8003830:	2000081c 	.word	0x2000081c
 8003834:	20000cfc 	.word	0x20000cfc
 8003838:	20000d0c 	.word	0x20000d0c
 800383c:	20000cf8 	.word	0x20000cf8
 8003840:	20000820 	.word	0x20000820
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800385a:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <vTaskDelay+0x64>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <vTaskDelay+0x32>
	__asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	60bb      	str	r3, [r7, #8]
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	e7fd      	b.n	8003876 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800387a:	f000 f8f9 	bl	8003a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800387e:	2100      	movs	r1, #0
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fd69 	bl	8004358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003886:	f000 f901 	bl	8003a8c <xTaskResumeAll>
 800388a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d107      	bne.n	80038a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003892:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <vTaskDelay+0x68>)
 8003894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000d18 	.word	0x20000d18
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80038bc:	f001 fa2c 	bl	8004d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <vTaskSuspend+0x18>
 80038c6:	4b30      	ldr	r3, [pc, #192]	@ (8003988 <vTaskSuspend+0xd4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e000      	b.n	80038ce <vTaskSuspend+0x1a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f8ed 	bl	8002ab4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3318      	adds	r3, #24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f8e4 	bl	8002ab4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4826      	ldr	r0, [pc, #152]	@ (800398c <vTaskSuspend+0xd8>)
 80038f4:	f7ff f881 	bl	80029fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d103      	bne.n	800390c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800390c:	f001 fa36 	bl	8004d7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003910:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <vTaskSuspend+0xdc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003918:	f001 f9fe 	bl	8004d18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800391c:	f000 fc6e 	bl	80041fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003920:	f001 fa2c 	bl	8004d7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003924:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <vTaskSuspend+0xd4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	429a      	cmp	r2, r3
 800392c:	d128      	bne.n	8003980 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800392e:	4b18      	ldr	r3, [pc, #96]	@ (8003990 <vTaskSuspend+0xdc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d018      	beq.n	8003968 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003936:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <vTaskSuspend+0xe0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <vTaskSuspend+0xa2>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003956:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <vTaskSuspend+0xe4>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003966:	e00b      	b.n	8003980 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003968:	4b08      	ldr	r3, [pc, #32]	@ (800398c <vTaskSuspend+0xd8>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <vTaskSuspend+0xe8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d103      	bne.n	800397c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <vTaskSuspend+0xd4>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
	}
 800397a:	e001      	b.n	8003980 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800397c:	f000 f9ee 	bl	8003d5c <vTaskSwitchContext>
	}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000081c 	.word	0x2000081c
 800398c:	20000cdc 	.word	0x20000cdc
 8003990:	20000cfc 	.word	0x20000cfc
 8003994:	20000d18 	.word	0x20000d18
 8003998:	e000ed04 	.word	0xe000ed04
 800399c:	20000cf0 	.word	0x20000cf0

080039a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ae:	463a      	mov	r2, r7
 80039b0:	1d39      	adds	r1, r7, #4
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ffbe 	bl	8002938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	9202      	str	r2, [sp, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	460a      	mov	r2, r1
 80039ce:	4922      	ldr	r1, [pc, #136]	@ (8003a58 <vTaskStartScheduler+0xb8>)
 80039d0:	4822      	ldr	r0, [pc, #136]	@ (8003a5c <vTaskStartScheduler+0xbc>)
 80039d2:	f7ff fd93 	bl	80034fc <xTaskCreateStatic>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <vTaskStartScheduler+0xc0>)
 80039da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <vTaskStartScheduler+0xc0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039e4:	2301      	movs	r3, #1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e001      	b.n	80039ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039f4:	f000 fd04 	bl	8004400 <xTimerCreateTimerTask>
 80039f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d116      	bne.n	8003a2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
}
 8003a12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <vTaskStartScheduler+0xc4>)
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <vTaskStartScheduler+0xc8>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a22:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <vTaskStartScheduler+0xcc>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a28:	f001 f8d2 	bl	8004bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a2c:	e00f      	b.n	8003a4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d10b      	bne.n	8003a4e <vTaskStartScheduler+0xae>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60fb      	str	r3, [r7, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <vTaskStartScheduler+0xaa>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08005cec 	.word	0x08005cec
 8003a5c:	08004091 	.word	0x08004091
 8003a60:	20000d14 	.word	0x20000d14
 8003a64:	20000d10 	.word	0x20000d10
 8003a68:	20000cfc 	.word	0x20000cfc
 8003a6c:	20000cf4 	.word	0x20000cf4

08003a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a03      	ldr	r2, [pc, #12]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000d18 	.word	0x20000d18

08003a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a9a:	4b42      	ldr	r3, [pc, #264]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <xTaskResumeAll+0x2e>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aba:	f001 f92d 	bl	8004d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003abe:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4a37      	ldr	r2, [pc, #220]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac8:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d162      	bne.n	8003b96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad0:	4b35      	ldr	r3, [pc, #212]	@ (8003ba8 <xTaskResumeAll+0x11c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05e      	beq.n	8003b96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad8:	e02f      	b.n	8003b3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ada:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <xTaskResumeAll+0x120>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe ffe4 	bl	8002ab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe ffdf 	bl	8002ab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d903      	bls.n	8003b0a <xTaskResumeAll+0x7e>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <xTaskResumeAll+0x128>)
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7fe ff6a 	bl	80029fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <xTaskResumeAll+0x12c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <xTaskResumeAll+0x120>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1cb      	bne.n	8003ada <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b48:	f000 fb58 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b58:	f000 f846 	bl	8003be8 <xTaskIncrementTick>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b62:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f1      	bne.n	8003b58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b7a:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <xTaskResumeAll+0x138>)
 8003b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b96:	f001 f8f1 	bl	8004d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000d18 	.word	0x20000d18
 8003ba8:	20000cf0 	.word	0x20000cf0
 8003bac:	20000cb0 	.word	0x20000cb0
 8003bb0:	20000cf8 	.word	0x20000cf8
 8003bb4:	20000820 	.word	0x20000820
 8003bb8:	2000081c 	.word	0x2000081c
 8003bbc:	20000d04 	.word	0x20000d04
 8003bc0:	20000d00 	.word	0x20000d00
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <xTaskGetTickCount+0x1c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000cf4 	.word	0x20000cf4

08003be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <xTaskIncrementTick+0x148>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 8090 	bne.w	8003d1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d34 <xTaskIncrementTick+0x14c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c04:	4a4b      	ldr	r2, [pc, #300]	@ (8003d34 <xTaskIncrementTick+0x14c>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c10:	4b49      	ldr	r3, [pc, #292]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	603b      	str	r3, [r7, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xTaskIncrementTick+0x46>
 8003c32:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	4b40      	ldr	r3, [pc, #256]	@ (8003d3c <xTaskIncrementTick+0x154>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4a3e      	ldr	r2, [pc, #248]	@ (8003d3c <xTaskIncrementTick+0x154>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b3e      	ldr	r3, [pc, #248]	@ (8003d40 <xTaskIncrementTick+0x158>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d40 <xTaskIncrementTick+0x158>)
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	f000 fad4 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c54:	4b3b      	ldr	r3, [pc, #236]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d349      	bcc.n	8003cf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5e:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	601a      	str	r2, [r3, #0]
					break;
 8003c70:	e03f      	b.n	8003cf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d203      	bcs.n	8003c92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c90:	e02f      	b.n	8003cf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe ff0c 	bl	8002ab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe ff03 	bl	8002ab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	4b25      	ldr	r3, [pc, #148]	@ (8003d48 <xTaskIncrementTick+0x160>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <xTaskIncrementTick+0xda>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a22      	ldr	r2, [pc, #136]	@ (8003d48 <xTaskIncrementTick+0x160>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a1f      	ldr	r2, [pc, #124]	@ (8003d4c <xTaskIncrementTick+0x164>)
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe fe8e 	bl	80029fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <xTaskIncrementTick+0x168>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3b8      	bcc.n	8003c5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf0:	e7b5      	b.n	8003c5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf2:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <xTaskIncrementTick+0x168>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4914      	ldr	r1, [pc, #80]	@ (8003d4c <xTaskIncrementTick+0x164>)
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d901      	bls.n	8003d0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <xTaskIncrementTick+0x16c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e004      	b.n	8003d26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <xTaskIncrementTick+0x170>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <xTaskIncrementTick+0x170>)
 8003d24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d26:	697b      	ldr	r3, [r7, #20]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000d18 	.word	0x20000d18
 8003d34:	20000cf4 	.word	0x20000cf4
 8003d38:	20000ca8 	.word	0x20000ca8
 8003d3c:	20000cac 	.word	0x20000cac
 8003d40:	20000d08 	.word	0x20000d08
 8003d44:	20000d10 	.word	0x20000d10
 8003d48:	20000cf8 	.word	0x20000cf8
 8003d4c:	20000820 	.word	0x20000820
 8003d50:	2000081c 	.word	0x2000081c
 8003d54:	20000d04 	.word	0x20000d04
 8003d58:	20000d00 	.word	0x20000d00

08003d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <vTaskSwitchContext+0xa8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d6a:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <vTaskSwitchContext+0xac>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d70:	e042      	b.n	8003df8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <vTaskSwitchContext+0xac>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d78:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <vTaskSwitchContext+0xb0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e011      	b.n	8003da4 <vTaskSwitchContext+0x48>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	607b      	str	r3, [r7, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <vTaskSwitchContext+0x3e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	491a      	ldr	r1, [pc, #104]	@ (8003e10 <vTaskSwitchContext+0xb4>)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0e3      	beq.n	8003d80 <vTaskSwitchContext+0x24>
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <vTaskSwitchContext+0xb4>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d104      	bne.n	8003de8 <vTaskSwitchContext+0x8c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <vTaskSwitchContext+0xb8>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <vTaskSwitchContext+0xb0>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000d18 	.word	0x20000d18
 8003e08:	20000d04 	.word	0x20000d04
 8003e0c:	20000cf8 	.word	0x20000cf8
 8003e10:	20000820 	.word	0x20000820
 8003e14:	2000081c 	.word	0x2000081c

08003e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <vTaskPlaceOnEventList+0x48>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fe fdfa 	bl	8002a42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4e:	2101      	movs	r1, #1
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f000 fa81 	bl	8004358 <prvAddCurrentTaskToDelayedList>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000081c 	.word	0x2000081c

08003e64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3318      	adds	r3, #24
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fe fdaf 	bl	80029fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f000 fa54 	bl	8004358 <prvAddCurrentTaskToDelayedList>
	}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2000081c 	.word	0x2000081c

08003ebc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60fb      	str	r3, [r7, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fde0 	bl	8002ab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f6c <xTaskRemoveFromEventList+0xb0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11d      	bne.n	8003f38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fdd7 	bl	8002ab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <xTaskRemoveFromEventList+0xb4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d903      	bls.n	8003f1a <xTaskRemoveFromEventList+0x5e>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <xTaskRemoveFromEventList+0xb4>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <xTaskRemoveFromEventList+0xb8>)
 8003f28:	441a      	add	r2, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fd62 	bl	80029fa <vListInsertEnd>
 8003f36:	e005      	b.n	8003f44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	480e      	ldr	r0, [pc, #56]	@ (8003f78 <xTaskRemoveFromEventList+0xbc>)
 8003f40:	f7fe fd5b 	bl	80029fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <xTaskRemoveFromEventList+0xc0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d905      	bls.n	8003f5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <xTaskRemoveFromEventList+0xc4>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e001      	b.n	8003f62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f62:	697b      	ldr	r3, [r7, #20]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000d18 	.word	0x20000d18
 8003f70:	20000cf8 	.word	0x20000cf8
 8003f74:	20000820 	.word	0x20000820
 8003f78:	20000cb0 	.word	0x20000cb0
 8003f7c:	2000081c 	.word	0x2000081c
 8003f80:	20000d04 	.word	0x20000d04

08003f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <vTaskInternalSetTimeOutState+0x24>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <vTaskInternalSetTimeOutState+0x28>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	605a      	str	r2, [r3, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20000d08 	.word	0x20000d08
 8003fac:	20000cf4 	.word	0x20000cf4

08003fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	613b      	str	r3, [r7, #16]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60fb      	str	r3, [r7, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ff6:	f000 fe8f 	bl	8004d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <xTaskCheckForTimeOut+0xc0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d102      	bne.n	800401a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e023      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <xTaskCheckForTimeOut+0xc4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d007      	beq.n	8004036 <xTaskCheckForTimeOut+0x86>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e015      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d20b      	bcs.n	8004058 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad2      	subs	r2, r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff99 	bl	8003f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e004      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004062:	f000 fe8b 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8004066:	69fb      	ldr	r3, [r7, #28]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000cf4 	.word	0x20000cf4
 8004074:	20000d08 	.word	0x20000d08

08004078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <vTaskMissedYield+0x14>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000d04 	.word	0x20000d04

08004090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004098:	f000 f852 	bl	8004140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800409c:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvIdleTask+0x28>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d9f9      	bls.n	8004098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <prvIdleTask+0x2c>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040b4:	e7f0      	b.n	8004098 <prvIdleTask+0x8>
 80040b6:	bf00      	nop
 80040b8:	20000820 	.word	0x20000820
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e00c      	b.n	80040e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <prvInitialiseTaskLists+0x60>)
 80040d8:	4413      	add	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fc60 	bl	80029a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b37      	cmp	r3, #55	@ 0x37
 80040ea:	d9ef      	bls.n	80040cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ec:	480d      	ldr	r0, [pc, #52]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 80040ee:	f7fe fc57 	bl	80029a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f2:	480d      	ldr	r0, [pc, #52]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 80040f4:	f7fe fc54 	bl	80029a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040f8:	480c      	ldr	r0, [pc, #48]	@ (800412c <prvInitialiseTaskLists+0x6c>)
 80040fa:	f7fe fc51 	bl	80029a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040fe:	480c      	ldr	r0, [pc, #48]	@ (8004130 <prvInitialiseTaskLists+0x70>)
 8004100:	f7fe fc4e 	bl	80029a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004104:	480b      	ldr	r0, [pc, #44]	@ (8004134 <prvInitialiseTaskLists+0x74>)
 8004106:	f7fe fc4b 	bl	80029a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410a:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvInitialiseTaskLists+0x78>)
 800410c:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 800410e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvInitialiseTaskLists+0x7c>)
 8004112:	4a05      	ldr	r2, [pc, #20]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000820 	.word	0x20000820
 8004124:	20000c80 	.word	0x20000c80
 8004128:	20000c94 	.word	0x20000c94
 800412c:	20000cb0 	.word	0x20000cb0
 8004130:	20000cc4 	.word	0x20000cc4
 8004134:	20000cdc 	.word	0x20000cdc
 8004138:	20000ca8 	.word	0x20000ca8
 800413c:	20000cac 	.word	0x20000cac

08004140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004146:	e019      	b.n	800417c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004148:	f000 fde6 	bl	8004d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <prvCheckTasksWaitingTermination+0x50>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fcab 	bl	8002ab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 8004170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004172:	f000 fe03 	bl	8004d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f810 	bl	800419c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e1      	bne.n	8004148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000cc4 	.word	0x20000cc4
 8004194:	20000cf0 	.word	0x20000cf0
 8004198:	20000cd8 	.word	0x20000cd8

0800419c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ffa0 	bl	80050f8 <vPortFree>
				vPortFree( pxTCB );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 ff9d 	bl	80050f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041be:	e019      	b.n	80041f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d103      	bne.n	80041d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 ff94 	bl	80050f8 <vPortFree>
	}
 80041d0:	e010      	b.n	80041f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d00b      	beq.n	80041f4 <prvDeleteTCB+0x58>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <prvDeleteTCB+0x54>
	}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000ca8 	.word	0x20000ca8
 8004238:	20000d10 	.word	0x20000d10

0800423c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <xTaskGetSchedulerState+0x34>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800424a:	2301      	movs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e008      	b.n	8004262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004250:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <xTaskGetSchedulerState+0x38>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004258:	2302      	movs	r3, #2
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e001      	b.n	8004262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004262:	687b      	ldr	r3, [r7, #4]
	}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000cfc 	.word	0x20000cfc
 8004274:	20000d18 	.word	0x20000d18

08004278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d058      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800428e:	4b2f      	ldr	r3, [pc, #188]	@ (800434c <xTaskPriorityDisinherit+0xd4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d00b      	beq.n	80042b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d02c      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fbde 	bl	8002ab4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d903      	bls.n	8004320 <xTaskPriorityDisinherit+0xa8>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <xTaskPriorityDisinherit+0xdc>)
 800432e:	441a      	add	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fb5f 	bl	80029fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2000081c 	.word	0x2000081c
 8004350:	20000cf8 	.word	0x20000cf8
 8004354:	20000820 	.word	0x20000820

08004358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fba0 	bl	8002ab4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d10a      	bne.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4819      	ldr	r0, [pc, #100]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800438c:	f7fe fb35 	bl	80029fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004390:	e026      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d209      	bcs.n	80043be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f7fe fb43 	bl	8002a42 <vListInsert>
}
 80043bc:	e010      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043be:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fb39 	bl	8002a42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d0:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d202      	bcs.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043da:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000cf4 	.word	0x20000cf4
 80043ec:	2000081c 	.word	0x2000081c
 80043f0:	20000cdc 	.word	0x20000cdc
 80043f4:	20000cac 	.word	0x20000cac
 80043f8:	20000ca8 	.word	0x20000ca8
 80043fc:	20000d10 	.word	0x20000d10

08004400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800440a:	f000 fb13 	bl	8004a34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <xTimerCreateTimerTask+0x84>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800441e:	1d3a      	adds	r2, r7, #4
 8004420:	f107 0108 	add.w	r1, r7, #8
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fa9f 	bl	800296c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	9202      	str	r2, [sp, #8]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2302      	movs	r3, #2
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2300      	movs	r3, #0
 800443e:	460a      	mov	r2, r1
 8004440:	4911      	ldr	r1, [pc, #68]	@ (8004488 <xTimerCreateTimerTask+0x88>)
 8004442:	4812      	ldr	r0, [pc, #72]	@ (800448c <xTimerCreateTimerTask+0x8c>)
 8004444:	f7ff f85a 	bl	80034fc <xTaskCreateStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 800444c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000d4c 	.word	0x20000d4c
 8004488:	08005cf4 	.word	0x08005cf4
 800448c:	080045cd 	.word	0x080045cd
 8004490:	20000d50 	.word	0x20000d50

08004494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	@ 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044c4:	4b19      	ldr	r3, [pc, #100]	@ (800452c <xTimerGenericCommand+0x98>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02a      	beq.n	8004522 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	dc18      	bgt.n	8004510 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044de:	f7ff fead 	bl	800423c <xTaskGetSchedulerState>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d109      	bne.n	80044fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044e8:	4b10      	ldr	r3, [pc, #64]	@ (800452c <xTimerGenericCommand+0x98>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f107 0110 	add.w	r1, r7, #16
 80044f0:	2300      	movs	r3, #0
 80044f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f4:	f7fe fc12 	bl	8002d1c <xQueueGenericSend>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80044fa:	e012      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <xTimerGenericCommand+0x98>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	f107 0110 	add.w	r1, r7, #16
 8004504:	2300      	movs	r3, #0
 8004506:	2200      	movs	r2, #0
 8004508:	f7fe fc08 	bl	8002d1c <xQueueGenericSend>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24
 800450e:	e008      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <xTimerGenericCommand+0x98>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f107 0110 	add.w	r1, r7, #16
 8004518:	2300      	movs	r3, #0
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	f7fe fd00 	bl	8002f20 <xQueueGenericSendFromISR>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	@ 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000d4c 	.word	0x20000d4c

08004530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453a:	4b23      	ldr	r3, [pc, #140]	@ (80045c8 <prvProcessExpiredTimer+0x98>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fab3 	bl	8002ab4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	18d1      	adds	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f000 f8d5 	bl	8004718 <prvInsertTimerInActiveList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff88 	bl	8004494 <xTimerGenericCommand>
 8004584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000d44 	.word	0x20000d44

080045cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f859 	bl	8004690 <prvGetNextExpireTime>
 80045de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4619      	mov	r1, r3
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f805 	bl	80045f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ea:	f000 f8d7 	bl	800479c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ee:	bf00      	nop
 80045f0:	e7f0      	b.n	80045d4 <prvTimerTask+0x8>
	...

080045f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045fe:	f7ff fa37 	bl	8003a70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f866 	bl	80046d8 <prvSampleTimeNow>
 800460c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d130      	bne.n	8004676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d806      	bhi.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004622:	f7ff fa33 	bl	8003a8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff81 	bl	8004530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800462e:	e024      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <prvProcessTimerOrBlockTask+0x90>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x50>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <prvProcessTimerOrBlockTask+0x52>
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004648:	4b0f      	ldr	r3, [pc, #60]	@ (8004688 <prvProcessTimerOrBlockTask+0x94>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	f7fe ff1d 	bl	8003494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800465a:	f7ff fa17 	bl	8003a8c <xTaskResumeAll>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <prvProcessTimerOrBlockTask+0x98>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	e001      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004676:	f7ff fa09 	bl	8003a8c <xTaskResumeAll>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d48 	.word	0x20000d48
 8004688:	20000d4c 	.word	0x20000d4c
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <prvGetNextExpireTime+0x16>
 80046a2:	2201      	movs	r2, #1
 80046a4:	e000      	b.n	80046a8 <prvGetNextExpireTime+0x18>
 80046a6:	2200      	movs	r2, #0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000d44 	.word	0x20000d44

080046d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e0:	f7ff fa72 	bl	8003bc8 <xTaskGetTickCount>
 80046e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <prvSampleTimeNow+0x3c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d205      	bcs.n	80046fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f0:	f000 f93a 	bl	8004968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <prvSampleTimeNow+0x3c>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000d54 	.word	0x20000d54

08004718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d812      	bhi.n	8004764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e01b      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <prvInsertTimerInActiveList+0x7c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f970 	bl	8002a42 <vListInsert>
 8004762:	e012      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d206      	bcs.n	800477a <prvInsertTimerInActiveList+0x62>
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e007      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <prvInsertTimerInActiveList+0x80>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f95c 	bl	8002a42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000d48 	.word	0x20000d48
 8004798:	20000d44 	.word	0x20000d44

0800479c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a2:	e0ce      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da19      	bge.n	80047de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	3304      	adds	r3, #4
 80047ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d4:	6850      	ldr	r0, [r2, #4]
 80047d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	4611      	mov	r1, r2
 80047dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f2c0 80ae 	blt.w	8004942 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f95c 	bl	8002ab4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fc:	463b      	mov	r3, r7
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff6a 	bl	80046d8 <prvSampleTimeNow>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b09      	cmp	r3, #9
 800480a:	f200 8097 	bhi.w	800493c <prvProcessReceivedCommands+0x1a0>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <prvProcessReceivedCommands+0x78>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	0800483d 	.word	0x0800483d
 8004818:	0800483d 	.word	0x0800483d
 800481c:	0800483d 	.word	0x0800483d
 8004820:	080048b3 	.word	0x080048b3
 8004824:	080048c7 	.word	0x080048c7
 8004828:	08004913 	.word	0x08004913
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800483d 	.word	0x0800483d
 8004834:	080048b3 	.word	0x080048b3
 8004838:	080048c7 	.word	0x080048c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	18d1      	adds	r1, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485c:	f7ff ff5c 	bl	8004718 <prvInsertTimerInActiveList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06c      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800486c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d061      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	441a      	add	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	2100      	movs	r1, #0
 800488c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800488e:	f7ff fe01 	bl	8004494 <xTimerGenericCommand>
 8004892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d152      	bne.n	8004940 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61bb      	str	r3, [r7, #24]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048c4:	e03d      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	18d1      	adds	r1, r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490c:	f7ff ff04 	bl	8004718 <prvInsertTimerInActiveList>
					break;
 8004910:	e017      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004922:	f000 fbe9 	bl	80050f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004926:	e00c      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800493a:	e002      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					break;
 8004940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <prvProcessReceivedCommands+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1d39      	adds	r1, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fb86 	bl	800305c <xQueueReceive>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af26 	bne.w	80047a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3730      	adds	r7, #48	@ 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000d4c 	.word	0x20000d4c

08004968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	e049      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f893 	bl	8002ab4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02f      	beq.n	8004a04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90e      	bls.n	80049d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fe f838 	bl	8002a42 <vListInsert>
 80049d2:	e017      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	2100      	movs	r1, #0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd58 	bl	8004494 <xTimerGenericCommand>
 80049e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1b0      	bne.n	8004970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6013      	str	r3, [r2, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000d44 	.word	0x20000d44
 8004a30:	20000d48 	.word	0x20000d48

08004a34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a3a:	f000 f96d 	bl	8004d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d120      	bne.n	8004a88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a46:	4814      	ldr	r0, [pc, #80]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a48:	f7fd ffaa 	bl	80029a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a4c:	4813      	ldr	r0, [pc, #76]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a4e:	f7fd ffa7 	bl	80029a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <prvCheckForValidListAndQueue+0x6c>)
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a58:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <prvCheckForValidListAndQueue+0x70>)
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <prvCheckForValidListAndQueue+0x74>)
 8004a64:	4a11      	ldr	r2, [pc, #68]	@ (8004aac <prvCheckForValidListAndQueue+0x78>)
 8004a66:	2110      	movs	r1, #16
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f7fe f8b7 	bl	8002bdc <xQueueGenericCreateStatic>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a74:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	490b      	ldr	r1, [pc, #44]	@ (8004ab0 <prvCheckForValidListAndQueue+0x7c>)
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fcdc 	bl	8003440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a88:	f000 f978 	bl	8004d7c <vPortExitCritical>
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000d4c 	.word	0x20000d4c
 8004a98:	20000d1c 	.word	0x20000d1c
 8004a9c:	20000d30 	.word	0x20000d30
 8004aa0:	20000d44 	.word	0x20000d44
 8004aa4:	20000d48 	.word	0x20000d48
 8004aa8:	20000df8 	.word	0x20000df8
 8004aac:	20000d58 	.word	0x20000d58
 8004ab0:	08005cfc 	.word	0x08005cfc

08004ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <pxPortInitialiseStack+0x64>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b14      	subs	r3, #20
 8004aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f06f 0202 	mvn.w	r2, #2
 8004b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b20      	subs	r3, #32
 8004b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	08004b1d 	.word	0x08004b1d

08004b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <prvTaskExitError+0x58>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d00b      	beq.n	8004b48 <prvTaskExitError+0x2c>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <prvTaskExitError+0x28>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
}
 8004b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b5c:	bf00      	nop
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0fc      	beq.n	8004b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ba8:	4808      	ldr	r0, [pc, #32]	@ (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bca:	bf00      	nop
 8004bcc:	e000ed08 	.word	0xe000ed08

08004bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <xPortStartScheduler+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10b      	bne.n	8004bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <xPortStartScheduler+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10b      	bne.n	8004c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	613b      	str	r3, [r7, #16]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1a:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <xPortStartScheduler+0x130>)
 8004c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	22ff      	movs	r2, #255	@ 0xff
 8004c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <xPortStartScheduler+0x134>)
 8004c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c42:	4b31      	ldr	r3, [pc, #196]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c48:	e009      	b.n	8004c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d0ef      	beq.n	8004c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00b      	beq.n	8004c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cac:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc4:	f000 f8da 	bl	8004e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <xPortStartScheduler+0x140>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cce:	f000 f8f9 	bl	8004ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cde:	f7ff ff63 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce2:	f7ff f83b 	bl	8003d5c <vTaskSwitchContext>
	prvTaskExitError();
 8004ce6:	f7ff ff19 	bl	8004b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	410fc271 	.word	0x410fc271
 8004cfc:	410fc270 	.word	0x410fc270
 8004d00:	e000e400 	.word	0xe000e400
 8004d04:	20000e48 	.word	0x20000e48
 8004d08:	20000e4c 	.word	0x20000e4c
 8004d0c:	e000ed20 	.word	0xe000ed20
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	e000ef34 	.word	0xe000ef34

08004d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
}
 8004d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d110      	bne.n	8004d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <vPortEnterCritical+0x60>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vPortEnterCritical+0x4a>
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <vPortExitCritical+0x26>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <vPortExitCritical+0x50>)
 8004daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <vPortExitCritical+0x50>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <vPortExitCritical+0x44>
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe ffac 	bl	8003d5c <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe fec9 	bl	8003be8 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <xPortSysTickHandler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed88 	.word	0xe000ed88

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d915      	bls.n	8004f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20b      	bcs.n	8004f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <vPortValidateInterruptPriority+0x80>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90b      	bls.n	8004f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vPortValidateInterruptPriority+0x62>
	}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e3f0 	.word	0xe000e3f0
 8004f50:	20000e48 	.word	0x20000e48
 8004f54:	e000ed0c 	.word	0xe000ed0c
 8004f58:	20000e4c 	.word	0x20000e4c

08004f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f68:	f7fe fd82 	bl	8003a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <pvPortMalloc+0x184>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f74:	f000 f924 	bl	80051c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <pvPortMalloc+0x188>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8095 	bne.w	80050b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01e      	beq.n	8004fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <pvPortMalloc+0x6e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06f      	beq.n	80050b0 <pvPortMalloc+0x154>
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <pvPortMalloc+0x18c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d86a      	bhi.n	80050b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <pvPortMalloc+0x190>)
 8004fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <pvPortMalloc+0x190>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe4:	e004      	b.n	8004ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <pvPortMalloc+0xa6>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f1      	bne.n	8004fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <pvPortMalloc+0x184>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	d051      	beq.n	80050b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	4413      	add	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	2308      	movs	r3, #8
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	429a      	cmp	r2, r3
 800502c:	d920      	bls.n	8005070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <pvPortMalloc+0xfc>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f000 f90a 	bl	8005284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <pvPortMalloc+0x18c>)
 800507c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <pvPortMalloc+0x194>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d203      	bcs.n	8005092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <pvPortMalloc+0x18c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <pvPortMalloc+0x194>)
 8005090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <pvPortMalloc+0x188>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	431a      	orrs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <pvPortMalloc+0x198>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a11      	ldr	r2, [pc, #68]	@ (80050f4 <pvPortMalloc+0x198>)
 80050ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b0:	f7fe fcec 	bl	8003a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <pvPortMalloc+0x17a>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <pvPortMalloc+0x176>
	return pvReturn;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004a58 	.word	0x20004a58
 80050e4:	20004a6c 	.word	0x20004a6c
 80050e8:	20004a5c 	.word	0x20004a5c
 80050ec:	20004a50 	.word	0x20004a50
 80050f0:	20004a60 	.word	0x20004a60
 80050f4:	20004a64 	.word	0x20004a64

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <vPortFree+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <vPortFree+0x46>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <vPortFree+0x66>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <vPortFree+0xbc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <vPortFree+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005184:	f7fe fc74 	bl	8003a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <vPortFree+0xc0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <vPortFree+0xc0>)
 8005194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f000 f874 	bl	8005284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vPortFree+0xc4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a06      	ldr	r2, [pc, #24]	@ (80051bc <vPortFree+0xc4>)
 80051a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051a6:	f7fe fc71 	bl	8003a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20004a6c 	.word	0x20004a6c
 80051b8:	20004a5c 	.word	0x20004a5c
 80051bc:	20004a68 	.word	0x20004a68

080051c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <prvHeapInit+0xac>)
 80051ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3307      	adds	r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <prvHeapInit+0xac>)
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <prvHeapInit+0xb0>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <prvHeapInit+0xb0>)
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800520c:	2208      	movs	r2, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <prvHeapInit+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <prvHeapInit+0xb4>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <prvHeapInit+0xb8>)
 800524e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <prvHeapInit+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <prvHeapInit+0xc0>)
 800525a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000e50 	.word	0x20000e50
 8005270:	20004a50 	.word	0x20004a50
 8005274:	20004a58 	.word	0x20004a58
 8005278:	20004a60 	.word	0x20004a60
 800527c:	20004a5c 	.word	0x20004a5c
 8005280:	20004a6c 	.word	0x20004a6c

08005284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <prvInsertBlockIntoFreeList+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e002      	b.n	8005298 <prvInsertBlockIntoFreeList+0x14>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d108      	bne.n	80052c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d118      	bne.n	800530c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00d      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e008      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e003      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d002      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20004a50 	.word	0x20004a50
 8005334:	20004a58 	.word	0x20004a58

08005338 <siprintf>:
 8005338:	b40e      	push	{r1, r2, r3}
 800533a:	b510      	push	{r4, lr}
 800533c:	b09d      	sub	sp, #116	@ 0x74
 800533e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005340:	9002      	str	r0, [sp, #8]
 8005342:	9006      	str	r0, [sp, #24]
 8005344:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005348:	480a      	ldr	r0, [pc, #40]	@ (8005374 <siprintf+0x3c>)
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	9104      	str	r1, [sp, #16]
 800534e:	490a      	ldr	r1, [pc, #40]	@ (8005378 <siprintf+0x40>)
 8005350:	f853 2b04 	ldr.w	r2, [r3], #4
 8005354:	9105      	str	r1, [sp, #20]
 8005356:	2400      	movs	r4, #0
 8005358:	a902      	add	r1, sp, #8
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005360:	f000 f9a2 	bl	80056a8 <_svfiprintf_r>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	701c      	strb	r4, [r3, #0]
 8005368:	b01d      	add	sp, #116	@ 0x74
 800536a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800536e:	b003      	add	sp, #12
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000010 	.word	0x20000010
 8005378:	ffff0208 	.word	0xffff0208

0800537c <memset>:
 800537c:	4402      	add	r2, r0
 800537e:	4603      	mov	r3, r0
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	f803 1b01 	strb.w	r1, [r3], #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	@ (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	@ (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	@ (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	@ (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	@ (80053dc <__libc_init_array+0x44>)
 80053ac:	f000 fc64 	bl	8005c78 <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08005da0 	.word	0x08005da0
 80053d4:	08005da0 	.word	0x08005da0
 80053d8:	08005da0 	.word	0x08005da0
 80053dc:	08005da4 	.word	0x08005da4

080053e0 <__retarget_lock_acquire_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_release_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <_free_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4605      	mov	r5, r0
 8005404:	2900      	cmp	r1, #0
 8005406:	d041      	beq.n	800548c <_free_r+0x8c>
 8005408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540c:	1f0c      	subs	r4, r1, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	bfb8      	it	lt
 8005412:	18e4      	addlt	r4, r4, r3
 8005414:	f000 f8e0 	bl	80055d8 <__malloc_lock>
 8005418:	4a1d      	ldr	r2, [pc, #116]	@ (8005490 <_free_r+0x90>)
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	b933      	cbnz	r3, 800542c <_free_r+0x2c>
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	6014      	str	r4, [r2, #0]
 8005422:	4628      	mov	r0, r5
 8005424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005428:	f000 b8dc 	b.w	80055e4 <__malloc_unlock>
 800542c:	42a3      	cmp	r3, r4
 800542e:	d908      	bls.n	8005442 <_free_r+0x42>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	1821      	adds	r1, r4, r0
 8005434:	428b      	cmp	r3, r1
 8005436:	bf01      	itttt	eq
 8005438:	6819      	ldreq	r1, [r3, #0]
 800543a:	685b      	ldreq	r3, [r3, #4]
 800543c:	1809      	addeq	r1, r1, r0
 800543e:	6021      	streq	r1, [r4, #0]
 8005440:	e7ed      	b.n	800541e <_free_r+0x1e>
 8005442:	461a      	mov	r2, r3
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	b10b      	cbz	r3, 800544c <_free_r+0x4c>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d9fa      	bls.n	8005442 <_free_r+0x42>
 800544c:	6811      	ldr	r1, [r2, #0]
 800544e:	1850      	adds	r0, r2, r1
 8005450:	42a0      	cmp	r0, r4
 8005452:	d10b      	bne.n	800546c <_free_r+0x6c>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	4401      	add	r1, r0
 8005458:	1850      	adds	r0, r2, r1
 800545a:	4283      	cmp	r3, r0
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	d1e0      	bne.n	8005422 <_free_r+0x22>
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	6053      	str	r3, [r2, #4]
 8005466:	4408      	add	r0, r1
 8005468:	6010      	str	r0, [r2, #0]
 800546a:	e7da      	b.n	8005422 <_free_r+0x22>
 800546c:	d902      	bls.n	8005474 <_free_r+0x74>
 800546e:	230c      	movs	r3, #12
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	e7d6      	b.n	8005422 <_free_r+0x22>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	1821      	adds	r1, r4, r0
 8005478:	428b      	cmp	r3, r1
 800547a:	bf04      	itt	eq
 800547c:	6819      	ldreq	r1, [r3, #0]
 800547e:	685b      	ldreq	r3, [r3, #4]
 8005480:	6063      	str	r3, [r4, #4]
 8005482:	bf04      	itt	eq
 8005484:	1809      	addeq	r1, r1, r0
 8005486:	6021      	streq	r1, [r4, #0]
 8005488:	6054      	str	r4, [r2, #4]
 800548a:	e7ca      	b.n	8005422 <_free_r+0x22>
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	20004bb4 	.word	0x20004bb4

08005494 <sbrk_aligned>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4e0f      	ldr	r6, [pc, #60]	@ (80054d4 <sbrk_aligned+0x40>)
 8005498:	460c      	mov	r4, r1
 800549a:	6831      	ldr	r1, [r6, #0]
 800549c:	4605      	mov	r5, r0
 800549e:	b911      	cbnz	r1, 80054a6 <sbrk_aligned+0x12>
 80054a0:	f000 fba4 	bl	8005bec <_sbrk_r>
 80054a4:	6030      	str	r0, [r6, #0]
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fb9f 	bl	8005bec <_sbrk_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d103      	bne.n	80054ba <sbrk_aligned+0x26>
 80054b2:	f04f 34ff 	mov.w	r4, #4294967295
 80054b6:	4620      	mov	r0, r4
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	1cc4      	adds	r4, r0, #3
 80054bc:	f024 0403 	bic.w	r4, r4, #3
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	d0f8      	beq.n	80054b6 <sbrk_aligned+0x22>
 80054c4:	1a21      	subs	r1, r4, r0
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fb90 	bl	8005bec <_sbrk_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d1f2      	bne.n	80054b6 <sbrk_aligned+0x22>
 80054d0:	e7ef      	b.n	80054b2 <sbrk_aligned+0x1e>
 80054d2:	bf00      	nop
 80054d4:	20004bb0 	.word	0x20004bb0

080054d8 <_malloc_r>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4606      	mov	r6, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d904      	bls.n	80054fe <_malloc_r+0x26>
 80054f4:	230c      	movs	r3, #12
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	2000      	movs	r0, #0
 80054fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055d4 <_malloc_r+0xfc>
 8005502:	f000 f869 	bl	80055d8 <__malloc_lock>
 8005506:	f8d8 3000 	ldr.w	r3, [r8]
 800550a:	461c      	mov	r4, r3
 800550c:	bb44      	cbnz	r4, 8005560 <_malloc_r+0x88>
 800550e:	4629      	mov	r1, r5
 8005510:	4630      	mov	r0, r6
 8005512:	f7ff ffbf 	bl	8005494 <sbrk_aligned>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	4604      	mov	r4, r0
 800551a:	d158      	bne.n	80055ce <_malloc_r+0xf6>
 800551c:	f8d8 4000 	ldr.w	r4, [r8]
 8005520:	4627      	mov	r7, r4
 8005522:	2f00      	cmp	r7, #0
 8005524:	d143      	bne.n	80055ae <_malloc_r+0xd6>
 8005526:	2c00      	cmp	r4, #0
 8005528:	d04b      	beq.n	80055c2 <_malloc_r+0xea>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4639      	mov	r1, r7
 800552e:	4630      	mov	r0, r6
 8005530:	eb04 0903 	add.w	r9, r4, r3
 8005534:	f000 fb5a 	bl	8005bec <_sbrk_r>
 8005538:	4581      	cmp	r9, r0
 800553a:	d142      	bne.n	80055c2 <_malloc_r+0xea>
 800553c:	6821      	ldr	r1, [r4, #0]
 800553e:	1a6d      	subs	r5, r5, r1
 8005540:	4629      	mov	r1, r5
 8005542:	4630      	mov	r0, r6
 8005544:	f7ff ffa6 	bl	8005494 <sbrk_aligned>
 8005548:	3001      	adds	r0, #1
 800554a:	d03a      	beq.n	80055c2 <_malloc_r+0xea>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	442b      	add	r3, r5
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	f8d8 3000 	ldr.w	r3, [r8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	bb62      	cbnz	r2, 80055b4 <_malloc_r+0xdc>
 800555a:	f8c8 7000 	str.w	r7, [r8]
 800555e:	e00f      	b.n	8005580 <_malloc_r+0xa8>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	1b52      	subs	r2, r2, r5
 8005564:	d420      	bmi.n	80055a8 <_malloc_r+0xd0>
 8005566:	2a0b      	cmp	r2, #11
 8005568:	d917      	bls.n	800559a <_malloc_r+0xc2>
 800556a:	1961      	adds	r1, r4, r5
 800556c:	42a3      	cmp	r3, r4
 800556e:	6025      	str	r5, [r4, #0]
 8005570:	bf18      	it	ne
 8005572:	6059      	strne	r1, [r3, #4]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	bf08      	it	eq
 8005578:	f8c8 1000 	streq.w	r1, [r8]
 800557c:	5162      	str	r2, [r4, r5]
 800557e:	604b      	str	r3, [r1, #4]
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f82f 	bl	80055e4 <__malloc_unlock>
 8005586:	f104 000b 	add.w	r0, r4, #11
 800558a:	1d23      	adds	r3, r4, #4
 800558c:	f020 0007 	bic.w	r0, r0, #7
 8005590:	1ac2      	subs	r2, r0, r3
 8005592:	bf1c      	itt	ne
 8005594:	1a1b      	subne	r3, r3, r0
 8005596:	50a3      	strne	r3, [r4, r2]
 8005598:	e7af      	b.n	80054fa <_malloc_r+0x22>
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	42a3      	cmp	r3, r4
 800559e:	bf0c      	ite	eq
 80055a0:	f8c8 2000 	streq.w	r2, [r8]
 80055a4:	605a      	strne	r2, [r3, #4]
 80055a6:	e7eb      	b.n	8005580 <_malloc_r+0xa8>
 80055a8:	4623      	mov	r3, r4
 80055aa:	6864      	ldr	r4, [r4, #4]
 80055ac:	e7ae      	b.n	800550c <_malloc_r+0x34>
 80055ae:	463c      	mov	r4, r7
 80055b0:	687f      	ldr	r7, [r7, #4]
 80055b2:	e7b6      	b.n	8005522 <_malloc_r+0x4a>
 80055b4:	461a      	mov	r2, r3
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d1fb      	bne.n	80055b4 <_malloc_r+0xdc>
 80055bc:	2300      	movs	r3, #0
 80055be:	6053      	str	r3, [r2, #4]
 80055c0:	e7de      	b.n	8005580 <_malloc_r+0xa8>
 80055c2:	230c      	movs	r3, #12
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	4630      	mov	r0, r6
 80055c8:	f000 f80c 	bl	80055e4 <__malloc_unlock>
 80055cc:	e794      	b.n	80054f8 <_malloc_r+0x20>
 80055ce:	6005      	str	r5, [r0, #0]
 80055d0:	e7d6      	b.n	8005580 <_malloc_r+0xa8>
 80055d2:	bf00      	nop
 80055d4:	20004bb4 	.word	0x20004bb4

080055d8 <__malloc_lock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	@ (80055e0 <__malloc_lock+0x8>)
 80055da:	f7ff bf01 	b.w	80053e0 <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	20004bac 	.word	0x20004bac

080055e4 <__malloc_unlock>:
 80055e4:	4801      	ldr	r0, [pc, #4]	@ (80055ec <__malloc_unlock+0x8>)
 80055e6:	f7ff befc 	b.w	80053e2 <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	20004bac 	.word	0x20004bac

080055f0 <__ssputs_r>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	688e      	ldr	r6, [r1, #8]
 80055f6:	461f      	mov	r7, r3
 80055f8:	42be      	cmp	r6, r7
 80055fa:	680b      	ldr	r3, [r1, #0]
 80055fc:	4682      	mov	sl, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4690      	mov	r8, r2
 8005602:	d82d      	bhi.n	8005660 <__ssputs_r+0x70>
 8005604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800560c:	d026      	beq.n	800565c <__ssputs_r+0x6c>
 800560e:	6965      	ldr	r5, [r4, #20]
 8005610:	6909      	ldr	r1, [r1, #16]
 8005612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005616:	eba3 0901 	sub.w	r9, r3, r1
 800561a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800561e:	1c7b      	adds	r3, r7, #1
 8005620:	444b      	add	r3, r9
 8005622:	106d      	asrs	r5, r5, #1
 8005624:	429d      	cmp	r5, r3
 8005626:	bf38      	it	cc
 8005628:	461d      	movcc	r5, r3
 800562a:	0553      	lsls	r3, r2, #21
 800562c:	d527      	bpl.n	800567e <__ssputs_r+0x8e>
 800562e:	4629      	mov	r1, r5
 8005630:	f7ff ff52 	bl	80054d8 <_malloc_r>
 8005634:	4606      	mov	r6, r0
 8005636:	b360      	cbz	r0, 8005692 <__ssputs_r+0xa2>
 8005638:	6921      	ldr	r1, [r4, #16]
 800563a:	464a      	mov	r2, r9
 800563c:	f7ff fed2 	bl	80053e4 <memcpy>
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	6126      	str	r6, [r4, #16]
 800564e:	6165      	str	r5, [r4, #20]
 8005650:	444e      	add	r6, r9
 8005652:	eba5 0509 	sub.w	r5, r5, r9
 8005656:	6026      	str	r6, [r4, #0]
 8005658:	60a5      	str	r5, [r4, #8]
 800565a:	463e      	mov	r6, r7
 800565c:	42be      	cmp	r6, r7
 800565e:	d900      	bls.n	8005662 <__ssputs_r+0x72>
 8005660:	463e      	mov	r6, r7
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	4632      	mov	r2, r6
 8005666:	4641      	mov	r1, r8
 8005668:	f000 faa6 	bl	8005bb8 <memmove>
 800566c:	68a3      	ldr	r3, [r4, #8]
 800566e:	1b9b      	subs	r3, r3, r6
 8005670:	60a3      	str	r3, [r4, #8]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	4433      	add	r3, r6
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	2000      	movs	r0, #0
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	462a      	mov	r2, r5
 8005680:	f000 fac4 	bl	8005c0c <_realloc_r>
 8005684:	4606      	mov	r6, r0
 8005686:	2800      	cmp	r0, #0
 8005688:	d1e0      	bne.n	800564c <__ssputs_r+0x5c>
 800568a:	6921      	ldr	r1, [r4, #16]
 800568c:	4650      	mov	r0, sl
 800568e:	f7ff feb7 	bl	8005400 <_free_r>
 8005692:	230c      	movs	r3, #12
 8005694:	f8ca 3000 	str.w	r3, [sl]
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e7e9      	b.n	800567a <__ssputs_r+0x8a>
	...

080056a8 <_svfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4698      	mov	r8, r3
 80056ae:	898b      	ldrh	r3, [r1, #12]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	b09d      	sub	sp, #116	@ 0x74
 80056b4:	4607      	mov	r7, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	d510      	bpl.n	80056de <_svfiprintf_r+0x36>
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	b973      	cbnz	r3, 80056de <_svfiprintf_r+0x36>
 80056c0:	2140      	movs	r1, #64	@ 0x40
 80056c2:	f7ff ff09 	bl	80054d8 <_malloc_r>
 80056c6:	6028      	str	r0, [r5, #0]
 80056c8:	6128      	str	r0, [r5, #16]
 80056ca:	b930      	cbnz	r0, 80056da <_svfiprintf_r+0x32>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	b01d      	add	sp, #116	@ 0x74
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	2340      	movs	r3, #64	@ 0x40
 80056dc:	616b      	str	r3, [r5, #20]
 80056de:	2300      	movs	r3, #0
 80056e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e2:	2320      	movs	r3, #32
 80056e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ec:	2330      	movs	r3, #48	@ 0x30
 80056ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800588c <_svfiprintf_r+0x1e4>
 80056f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056f6:	f04f 0901 	mov.w	r9, #1
 80056fa:	4623      	mov	r3, r4
 80056fc:	469a      	mov	sl, r3
 80056fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005702:	b10a      	cbz	r2, 8005708 <_svfiprintf_r+0x60>
 8005704:	2a25      	cmp	r2, #37	@ 0x25
 8005706:	d1f9      	bne.n	80056fc <_svfiprintf_r+0x54>
 8005708:	ebba 0b04 	subs.w	fp, sl, r4
 800570c:	d00b      	beq.n	8005726 <_svfiprintf_r+0x7e>
 800570e:	465b      	mov	r3, fp
 8005710:	4622      	mov	r2, r4
 8005712:	4629      	mov	r1, r5
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff ff6b 	bl	80055f0 <__ssputs_r>
 800571a:	3001      	adds	r0, #1
 800571c:	f000 80a7 	beq.w	800586e <_svfiprintf_r+0x1c6>
 8005720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005722:	445a      	add	r2, fp
 8005724:	9209      	str	r2, [sp, #36]	@ 0x24
 8005726:	f89a 3000 	ldrb.w	r3, [sl]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 809f 	beq.w	800586e <_svfiprintf_r+0x1c6>
 8005730:	2300      	movs	r3, #0
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800573a:	f10a 0a01 	add.w	sl, sl, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	9307      	str	r3, [sp, #28]
 8005742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005746:	931a      	str	r3, [sp, #104]	@ 0x68
 8005748:	4654      	mov	r4, sl
 800574a:	2205      	movs	r2, #5
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	484e      	ldr	r0, [pc, #312]	@ (800588c <_svfiprintf_r+0x1e4>)
 8005752:	f7fa fd4d 	bl	80001f0 <memchr>
 8005756:	9a04      	ldr	r2, [sp, #16]
 8005758:	b9d8      	cbnz	r0, 8005792 <_svfiprintf_r+0xea>
 800575a:	06d0      	lsls	r0, r2, #27
 800575c:	bf44      	itt	mi
 800575e:	2320      	movmi	r3, #32
 8005760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005764:	0711      	lsls	r1, r2, #28
 8005766:	bf44      	itt	mi
 8005768:	232b      	movmi	r3, #43	@ 0x2b
 800576a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800576e:	f89a 3000 	ldrb.w	r3, [sl]
 8005772:	2b2a      	cmp	r3, #42	@ 0x2a
 8005774:	d015      	beq.n	80057a2 <_svfiprintf_r+0xfa>
 8005776:	9a07      	ldr	r2, [sp, #28]
 8005778:	4654      	mov	r4, sl
 800577a:	2000      	movs	r0, #0
 800577c:	f04f 0c0a 	mov.w	ip, #10
 8005780:	4621      	mov	r1, r4
 8005782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005786:	3b30      	subs	r3, #48	@ 0x30
 8005788:	2b09      	cmp	r3, #9
 800578a:	d94b      	bls.n	8005824 <_svfiprintf_r+0x17c>
 800578c:	b1b0      	cbz	r0, 80057bc <_svfiprintf_r+0x114>
 800578e:	9207      	str	r2, [sp, #28]
 8005790:	e014      	b.n	80057bc <_svfiprintf_r+0x114>
 8005792:	eba0 0308 	sub.w	r3, r0, r8
 8005796:	fa09 f303 	lsl.w	r3, r9, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	46a2      	mov	sl, r4
 80057a0:	e7d2      	b.n	8005748 <_svfiprintf_r+0xa0>
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	9103      	str	r1, [sp, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfbb      	ittet	lt
 80057ae:	425b      	neglt	r3, r3
 80057b0:	f042 0202 	orrlt.w	r2, r2, #2
 80057b4:	9307      	strge	r3, [sp, #28]
 80057b6:	9307      	strlt	r3, [sp, #28]
 80057b8:	bfb8      	it	lt
 80057ba:	9204      	strlt	r2, [sp, #16]
 80057bc:	7823      	ldrb	r3, [r4, #0]
 80057be:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c0:	d10a      	bne.n	80057d8 <_svfiprintf_r+0x130>
 80057c2:	7863      	ldrb	r3, [r4, #1]
 80057c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c6:	d132      	bne.n	800582e <_svfiprintf_r+0x186>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	9203      	str	r2, [sp, #12]
 80057d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d4:	3402      	adds	r4, #2
 80057d6:	9305      	str	r3, [sp, #20]
 80057d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800589c <_svfiprintf_r+0x1f4>
 80057dc:	7821      	ldrb	r1, [r4, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7fa fd05 	bl	80001f0 <memchr>
 80057e6:	b138      	cbz	r0, 80057f8 <_svfiprintf_r+0x150>
 80057e8:	9b04      	ldr	r3, [sp, #16]
 80057ea:	eba0 000a 	sub.w	r0, r0, sl
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	4082      	lsls	r2, r0
 80057f2:	4313      	orrs	r3, r2
 80057f4:	3401      	adds	r4, #1
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	4824      	ldr	r0, [pc, #144]	@ (8005890 <_svfiprintf_r+0x1e8>)
 80057fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005802:	2206      	movs	r2, #6
 8005804:	f7fa fcf4 	bl	80001f0 <memchr>
 8005808:	2800      	cmp	r0, #0
 800580a:	d036      	beq.n	800587a <_svfiprintf_r+0x1d2>
 800580c:	4b21      	ldr	r3, [pc, #132]	@ (8005894 <_svfiprintf_r+0x1ec>)
 800580e:	bb1b      	cbnz	r3, 8005858 <_svfiprintf_r+0x1b0>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	3307      	adds	r3, #7
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	3308      	adds	r3, #8
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581e:	4433      	add	r3, r6
 8005820:	9309      	str	r3, [sp, #36]	@ 0x24
 8005822:	e76a      	b.n	80056fa <_svfiprintf_r+0x52>
 8005824:	fb0c 3202 	mla	r2, ip, r2, r3
 8005828:	460c      	mov	r4, r1
 800582a:	2001      	movs	r0, #1
 800582c:	e7a8      	b.n	8005780 <_svfiprintf_r+0xd8>
 800582e:	2300      	movs	r3, #0
 8005830:	3401      	adds	r4, #1
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0c0a 	mov.w	ip, #10
 800583a:	4620      	mov	r0, r4
 800583c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005840:	3a30      	subs	r2, #48	@ 0x30
 8005842:	2a09      	cmp	r2, #9
 8005844:	d903      	bls.n	800584e <_svfiprintf_r+0x1a6>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0c6      	beq.n	80057d8 <_svfiprintf_r+0x130>
 800584a:	9105      	str	r1, [sp, #20]
 800584c:	e7c4      	b.n	80057d8 <_svfiprintf_r+0x130>
 800584e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005852:	4604      	mov	r4, r0
 8005854:	2301      	movs	r3, #1
 8005856:	e7f0      	b.n	800583a <_svfiprintf_r+0x192>
 8005858:	ab03      	add	r3, sp, #12
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	462a      	mov	r2, r5
 800585e:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <_svfiprintf_r+0x1f0>)
 8005860:	a904      	add	r1, sp, #16
 8005862:	4638      	mov	r0, r7
 8005864:	f3af 8000 	nop.w
 8005868:	1c42      	adds	r2, r0, #1
 800586a:	4606      	mov	r6, r0
 800586c:	d1d6      	bne.n	800581c <_svfiprintf_r+0x174>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	065b      	lsls	r3, r3, #25
 8005872:	f53f af2d 	bmi.w	80056d0 <_svfiprintf_r+0x28>
 8005876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005878:	e72c      	b.n	80056d4 <_svfiprintf_r+0x2c>
 800587a:	ab03      	add	r3, sp, #12
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	462a      	mov	r2, r5
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <_svfiprintf_r+0x1f0>)
 8005882:	a904      	add	r1, sp, #16
 8005884:	4638      	mov	r0, r7
 8005886:	f000 f879 	bl	800597c <_printf_i>
 800588a:	e7ed      	b.n	8005868 <_svfiprintf_r+0x1c0>
 800588c:	08005d64 	.word	0x08005d64
 8005890:	08005d6e 	.word	0x08005d6e
 8005894:	00000000 	.word	0x00000000
 8005898:	080055f1 	.word	0x080055f1
 800589c:	08005d6a 	.word	0x08005d6a

080058a0 <_printf_common>:
 80058a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	4616      	mov	r6, r2
 80058a6:	4698      	mov	r8, r3
 80058a8:	688a      	ldr	r2, [r1, #8]
 80058aa:	690b      	ldr	r3, [r1, #16]
 80058ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	bfb8      	it	lt
 80058b4:	4613      	movlt	r3, r2
 80058b6:	6033      	str	r3, [r6, #0]
 80058b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058bc:	4607      	mov	r7, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	b10a      	cbz	r2, 80058c6 <_printf_common+0x26>
 80058c2:	3301      	adds	r3, #1
 80058c4:	6033      	str	r3, [r6, #0]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	0699      	lsls	r1, r3, #26
 80058ca:	bf42      	ittt	mi
 80058cc:	6833      	ldrmi	r3, [r6, #0]
 80058ce:	3302      	addmi	r3, #2
 80058d0:	6033      	strmi	r3, [r6, #0]
 80058d2:	6825      	ldr	r5, [r4, #0]
 80058d4:	f015 0506 	ands.w	r5, r5, #6
 80058d8:	d106      	bne.n	80058e8 <_printf_common+0x48>
 80058da:	f104 0a19 	add.w	sl, r4, #25
 80058de:	68e3      	ldr	r3, [r4, #12]
 80058e0:	6832      	ldr	r2, [r6, #0]
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	42ab      	cmp	r3, r5
 80058e6:	dc26      	bgt.n	8005936 <_printf_common+0x96>
 80058e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	3b00      	subs	r3, #0
 80058f0:	bf18      	it	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	0692      	lsls	r2, r2, #26
 80058f6:	d42b      	bmi.n	8005950 <_printf_common+0xb0>
 80058f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058fc:	4641      	mov	r1, r8
 80058fe:	4638      	mov	r0, r7
 8005900:	47c8      	blx	r9
 8005902:	3001      	adds	r0, #1
 8005904:	d01e      	beq.n	8005944 <_printf_common+0xa4>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	6922      	ldr	r2, [r4, #16]
 800590a:	f003 0306 	and.w	r3, r3, #6
 800590e:	2b04      	cmp	r3, #4
 8005910:	bf02      	ittt	eq
 8005912:	68e5      	ldreq	r5, [r4, #12]
 8005914:	6833      	ldreq	r3, [r6, #0]
 8005916:	1aed      	subeq	r5, r5, r3
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	bf0c      	ite	eq
 800591c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005920:	2500      	movne	r5, #0
 8005922:	4293      	cmp	r3, r2
 8005924:	bfc4      	itt	gt
 8005926:	1a9b      	subgt	r3, r3, r2
 8005928:	18ed      	addgt	r5, r5, r3
 800592a:	2600      	movs	r6, #0
 800592c:	341a      	adds	r4, #26
 800592e:	42b5      	cmp	r5, r6
 8005930:	d11a      	bne.n	8005968 <_printf_common+0xc8>
 8005932:	2000      	movs	r0, #0
 8005934:	e008      	b.n	8005948 <_printf_common+0xa8>
 8005936:	2301      	movs	r3, #1
 8005938:	4652      	mov	r2, sl
 800593a:	4641      	mov	r1, r8
 800593c:	4638      	mov	r0, r7
 800593e:	47c8      	blx	r9
 8005940:	3001      	adds	r0, #1
 8005942:	d103      	bne.n	800594c <_printf_common+0xac>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594c:	3501      	adds	r5, #1
 800594e:	e7c6      	b.n	80058de <_printf_common+0x3e>
 8005950:	18e1      	adds	r1, r4, r3
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	2030      	movs	r0, #48	@ 0x30
 8005956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800595a:	4422      	add	r2, r4
 800595c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005964:	3302      	adds	r3, #2
 8005966:	e7c7      	b.n	80058f8 <_printf_common+0x58>
 8005968:	2301      	movs	r3, #1
 800596a:	4622      	mov	r2, r4
 800596c:	4641      	mov	r1, r8
 800596e:	4638      	mov	r0, r7
 8005970:	47c8      	blx	r9
 8005972:	3001      	adds	r0, #1
 8005974:	d0e6      	beq.n	8005944 <_printf_common+0xa4>
 8005976:	3601      	adds	r6, #1
 8005978:	e7d9      	b.n	800592e <_printf_common+0x8e>
	...

0800597c <_printf_i>:
 800597c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	7e0f      	ldrb	r7, [r1, #24]
 8005982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005984:	2f78      	cmp	r7, #120	@ 0x78
 8005986:	4691      	mov	r9, r2
 8005988:	4680      	mov	r8, r0
 800598a:	460c      	mov	r4, r1
 800598c:	469a      	mov	sl, r3
 800598e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005992:	d807      	bhi.n	80059a4 <_printf_i+0x28>
 8005994:	2f62      	cmp	r7, #98	@ 0x62
 8005996:	d80a      	bhi.n	80059ae <_printf_i+0x32>
 8005998:	2f00      	cmp	r7, #0
 800599a:	f000 80d1 	beq.w	8005b40 <_printf_i+0x1c4>
 800599e:	2f58      	cmp	r7, #88	@ 0x58
 80059a0:	f000 80b8 	beq.w	8005b14 <_printf_i+0x198>
 80059a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059ac:	e03a      	b.n	8005a24 <_printf_i+0xa8>
 80059ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059b2:	2b15      	cmp	r3, #21
 80059b4:	d8f6      	bhi.n	80059a4 <_printf_i+0x28>
 80059b6:	a101      	add	r1, pc, #4	@ (adr r1, 80059bc <_printf_i+0x40>)
 80059b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	080059a5 	.word	0x080059a5
 80059c8:	080059a5 	.word	0x080059a5
 80059cc:	080059a5 	.word	0x080059a5
 80059d0:	080059a5 	.word	0x080059a5
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	080059a5 	.word	0x080059a5
 80059dc:	080059a5 	.word	0x080059a5
 80059e0:	080059a5 	.word	0x080059a5
 80059e4:	080059a5 	.word	0x080059a5
 80059e8:	08005b27 	.word	0x08005b27
 80059ec:	08005a53 	.word	0x08005a53
 80059f0:	08005ae1 	.word	0x08005ae1
 80059f4:	080059a5 	.word	0x080059a5
 80059f8:	080059a5 	.word	0x080059a5
 80059fc:	08005b49 	.word	0x08005b49
 8005a00:	080059a5 	.word	0x080059a5
 8005a04:	08005a53 	.word	0x08005a53
 8005a08:	080059a5 	.word	0x080059a5
 8005a0c:	080059a5 	.word	0x080059a5
 8005a10:	08005ae9 	.word	0x08005ae9
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6032      	str	r2, [r6, #0]
 8005a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a24:	2301      	movs	r3, #1
 8005a26:	e09c      	b.n	8005b62 <_printf_i+0x1e6>
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	6031      	str	r1, [r6, #0]
 8005a30:	0606      	lsls	r6, r0, #24
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0xbc>
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	e003      	b.n	8005a40 <_printf_i+0xc4>
 8005a38:	0645      	lsls	r5, r0, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0xb8>
 8005a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xd0>
 8005a44:	232d      	movs	r3, #45	@ 0x2d
 8005a46:	426d      	negs	r5, r5
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4c:	4858      	ldr	r0, [pc, #352]	@ (8005bb0 <_printf_i+0x234>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e011      	b.n	8005a76 <_printf_i+0xfa>
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	0608      	lsls	r0, r1, #24
 8005a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a5c:	d402      	bmi.n	8005a64 <_printf_i+0xe8>
 8005a5e:	0649      	lsls	r1, r1, #25
 8005a60:	bf48      	it	mi
 8005a62:	b2ad      	uxthmi	r5, r5
 8005a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a66:	4852      	ldr	r0, [pc, #328]	@ (8005bb0 <_printf_i+0x234>)
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	bf14      	ite	ne
 8005a6c:	230a      	movne	r3, #10
 8005a6e:	2308      	moveq	r3, #8
 8005a70:	2100      	movs	r1, #0
 8005a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a76:	6866      	ldr	r6, [r4, #4]
 8005a78:	60a6      	str	r6, [r4, #8]
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	db05      	blt.n	8005a8a <_printf_i+0x10e>
 8005a7e:	6821      	ldr	r1, [r4, #0]
 8005a80:	432e      	orrs	r6, r5
 8005a82:	f021 0104 	bic.w	r1, r1, #4
 8005a86:	6021      	str	r1, [r4, #0]
 8005a88:	d04b      	beq.n	8005b22 <_printf_i+0x1a6>
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a90:	fb03 5711 	mls	r7, r3, r1, r5
 8005a94:	5dc7      	ldrb	r7, [r0, r7]
 8005a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a9a:	462f      	mov	r7, r5
 8005a9c:	42bb      	cmp	r3, r7
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	d9f4      	bls.n	8005a8c <_printf_i+0x110>
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d10b      	bne.n	8005abe <_printf_i+0x142>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07df      	lsls	r7, r3, #31
 8005aaa:	d508      	bpl.n	8005abe <_printf_i+0x142>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	6861      	ldr	r1, [r4, #4]
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	bfde      	ittt	le
 8005ab4:	2330      	movle	r3, #48	@ 0x30
 8005ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005abe:	1b92      	subs	r2, r2, r6
 8005ac0:	6122      	str	r2, [r4, #16]
 8005ac2:	f8cd a000 	str.w	sl, [sp]
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	aa03      	add	r2, sp, #12
 8005aca:	4621      	mov	r1, r4
 8005acc:	4640      	mov	r0, r8
 8005ace:	f7ff fee7 	bl	80058a0 <_printf_common>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d14a      	bne.n	8005b6c <_printf_i+0x1f0>
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f043 0320 	orr.w	r3, r3, #32
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	4832      	ldr	r0, [pc, #200]	@ (8005bb4 <_printf_i+0x238>)
 8005aea:	2778      	movs	r7, #120	@ 0x78
 8005aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	6831      	ldr	r1, [r6, #0]
 8005af4:	061f      	lsls	r7, r3, #24
 8005af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005afa:	d402      	bmi.n	8005b02 <_printf_i+0x186>
 8005afc:	065f      	lsls	r7, r3, #25
 8005afe:	bf48      	it	mi
 8005b00:	b2ad      	uxthmi	r5, r5
 8005b02:	6031      	str	r1, [r6, #0]
 8005b04:	07d9      	lsls	r1, r3, #31
 8005b06:	bf44      	itt	mi
 8005b08:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0c:	6023      	strmi	r3, [r4, #0]
 8005b0e:	b11d      	cbz	r5, 8005b18 <_printf_i+0x19c>
 8005b10:	2310      	movs	r3, #16
 8005b12:	e7ad      	b.n	8005a70 <_printf_i+0xf4>
 8005b14:	4826      	ldr	r0, [pc, #152]	@ (8005bb0 <_printf_i+0x234>)
 8005b16:	e7e9      	b.n	8005aec <_printf_i+0x170>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	f023 0320 	bic.w	r3, r3, #32
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	e7f6      	b.n	8005b10 <_printf_i+0x194>
 8005b22:	4616      	mov	r6, r2
 8005b24:	e7bd      	b.n	8005aa2 <_printf_i+0x126>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	6825      	ldr	r5, [r4, #0]
 8005b2a:	6961      	ldr	r1, [r4, #20]
 8005b2c:	1d18      	adds	r0, r3, #4
 8005b2e:	6030      	str	r0, [r6, #0]
 8005b30:	062e      	lsls	r6, r5, #24
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	d501      	bpl.n	8005b3a <_printf_i+0x1be>
 8005b36:	6019      	str	r1, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <_printf_i+0x1c4>
 8005b3a:	0668      	lsls	r0, r5, #25
 8005b3c:	d5fb      	bpl.n	8005b36 <_printf_i+0x1ba>
 8005b3e:	8019      	strh	r1, [r3, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	4616      	mov	r6, r2
 8005b46:	e7bc      	b.n	8005ac2 <_printf_i+0x146>
 8005b48:	6833      	ldr	r3, [r6, #0]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	6032      	str	r2, [r6, #0]
 8005b4e:	681e      	ldr	r6, [r3, #0]
 8005b50:	6862      	ldr	r2, [r4, #4]
 8005b52:	2100      	movs	r1, #0
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7fa fb4b 	bl	80001f0 <memchr>
 8005b5a:	b108      	cbz	r0, 8005b60 <_printf_i+0x1e4>
 8005b5c:	1b80      	subs	r0, r0, r6
 8005b5e:	6060      	str	r0, [r4, #4]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	2300      	movs	r3, #0
 8005b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b6a:	e7aa      	b.n	8005ac2 <_printf_i+0x146>
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	4632      	mov	r2, r6
 8005b70:	4649      	mov	r1, r9
 8005b72:	4640      	mov	r0, r8
 8005b74:	47d0      	blx	sl
 8005b76:	3001      	adds	r0, #1
 8005b78:	d0ad      	beq.n	8005ad6 <_printf_i+0x15a>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	079b      	lsls	r3, r3, #30
 8005b7e:	d413      	bmi.n	8005ba8 <_printf_i+0x22c>
 8005b80:	68e0      	ldr	r0, [r4, #12]
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	4298      	cmp	r0, r3
 8005b86:	bfb8      	it	lt
 8005b88:	4618      	movlt	r0, r3
 8005b8a:	e7a6      	b.n	8005ada <_printf_i+0x15e>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4632      	mov	r2, r6
 8005b90:	4649      	mov	r1, r9
 8005b92:	4640      	mov	r0, r8
 8005b94:	47d0      	blx	sl
 8005b96:	3001      	adds	r0, #1
 8005b98:	d09d      	beq.n	8005ad6 <_printf_i+0x15a>
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	68e3      	ldr	r3, [r4, #12]
 8005b9e:	9903      	ldr	r1, [sp, #12]
 8005ba0:	1a5b      	subs	r3, r3, r1
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	dcf2      	bgt.n	8005b8c <_printf_i+0x210>
 8005ba6:	e7eb      	b.n	8005b80 <_printf_i+0x204>
 8005ba8:	2500      	movs	r5, #0
 8005baa:	f104 0619 	add.w	r6, r4, #25
 8005bae:	e7f5      	b.n	8005b9c <_printf_i+0x220>
 8005bb0:	08005d75 	.word	0x08005d75
 8005bb4:	08005d86 	.word	0x08005d86

08005bb8 <memmove>:
 8005bb8:	4288      	cmp	r0, r1
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	eb01 0402 	add.w	r4, r1, r2
 8005bc0:	d902      	bls.n	8005bc8 <memmove+0x10>
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	d807      	bhi.n	8005bd8 <memmove+0x20>
 8005bc8:	1e43      	subs	r3, r0, #1
 8005bca:	42a1      	cmp	r1, r4
 8005bcc:	d008      	beq.n	8005be0 <memmove+0x28>
 8005bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd6:	e7f8      	b.n	8005bca <memmove+0x12>
 8005bd8:	4402      	add	r2, r0
 8005bda:	4601      	mov	r1, r0
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	d100      	bne.n	8005be2 <memmove+0x2a>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bea:	e7f7      	b.n	8005bdc <memmove+0x24>

08005bec <_sbrk_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d06      	ldr	r5, [pc, #24]	@ (8005c08 <_sbrk_r+0x1c>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	f7fa ff24 	bl	8000a44 <_sbrk>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_sbrk_r+0x1a>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_sbrk_r+0x1a>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20004ba8 	.word	0x20004ba8

08005c0c <_realloc_r>:
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	4607      	mov	r7, r0
 8005c12:	4614      	mov	r4, r2
 8005c14:	460d      	mov	r5, r1
 8005c16:	b921      	cbnz	r1, 8005c22 <_realloc_r+0x16>
 8005c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	f7ff bc5b 	b.w	80054d8 <_malloc_r>
 8005c22:	b92a      	cbnz	r2, 8005c30 <_realloc_r+0x24>
 8005c24:	f7ff fbec 	bl	8005400 <_free_r>
 8005c28:	4625      	mov	r5, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	f000 f81a 	bl	8005c68 <_malloc_usable_size_r>
 8005c34:	4284      	cmp	r4, r0
 8005c36:	4606      	mov	r6, r0
 8005c38:	d802      	bhi.n	8005c40 <_realloc_r+0x34>
 8005c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c3e:	d8f4      	bhi.n	8005c2a <_realloc_r+0x1e>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4638      	mov	r0, r7
 8005c44:	f7ff fc48 	bl	80054d8 <_malloc_r>
 8005c48:	4680      	mov	r8, r0
 8005c4a:	b908      	cbnz	r0, 8005c50 <_realloc_r+0x44>
 8005c4c:	4645      	mov	r5, r8
 8005c4e:	e7ec      	b.n	8005c2a <_realloc_r+0x1e>
 8005c50:	42b4      	cmp	r4, r6
 8005c52:	4622      	mov	r2, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	bf28      	it	cs
 8005c58:	4632      	movcs	r2, r6
 8005c5a:	f7ff fbc3 	bl	80053e4 <memcpy>
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff fbcd 	bl	8005400 <_free_r>
 8005c66:	e7f1      	b.n	8005c4c <_realloc_r+0x40>

08005c68 <_malloc_usable_size_r>:
 8005c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6c:	1f18      	subs	r0, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfbc      	itt	lt
 8005c72:	580b      	ldrlt	r3, [r1, r0]
 8005c74:	18c0      	addlt	r0, r0, r3
 8005c76:	4770      	bx	lr

08005c78 <_init>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr

08005c84 <_fini>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr
